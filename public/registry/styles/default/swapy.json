{
  "name": "swapy",
  "dependencies": [],
  "files": [
    {
      "name": "swapy.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport {\n    DragDropContext,\n    Droppable,\n    Draggable,\n    DropResult,\n    DroppableStateSnapshot,\n    DroppableProvided,\n    DraggableStateSnapshot,\n    DraggableProvided,\n    DraggableProvidedDragHandleProps,\n} from '@hello-pangea/dnd'\nimport { cn } from '@/lib'\nimport { Badge } from './badge'\nimport { Button } from './button'\nimport { EllipsisVertical, Plus } from 'lucide-react'\nimport { ScrollArea } from './scroll-area'\nimport { Recording } from './audio-record'\n\n// Type for a Subtask\ninterface Subtask {\n    id: string\n    title: string\n}\n\n// Type for Attachments\ninterface Attachment {\n    id?: string\n    type?: string\n    filename?: string\n    url?: string\n    alt?: string\n    size?: string\n}\n\n// Type for a Link (reference, URL, etc.)\ninterface Link {\n    id: string\n    title: string\n    url?: string\n}\n\n// Type for a Comment\nexport interface CommentType {\n    id: string\n    content: string\n    attachments: Attachment[]\n    createdAt: string\n    user: TaggedUserType\n    likes: LikedType\n}\n\nexport interface LikedType {\n    amount: number\n    users: TaggedUserType[]\n}\n\n// Type for a Tagged User\nexport interface TaggedUserType {\n    id: string\n    name?: string\n    avatarUrl?: string\n}\n\n// Type for Labels (tags or categories)\ninterface Label {\n    id: string\n    content: string\n    className?: string // Tailwind CSS class or custom class\n}\n\n// Type for Task Options (could be buttons or dropdowns, etc.)\ninterface TaskOption {\n    id?: string\n    type?: string // Specify the type of option if needed\n    label?: string\n}\n\n// Main Task Type\ninterface Task {\n    id: string\n    title: string\n    description: string\n    subtasks: Subtask[]\n    attachments: Attachment[]\n    links: Link[]\n    comments: CommentType[]\n    taggedUsers: TaggedUserType[]\n    labels: Label[]\n    options: TaskOption[]\n}\n\n// Type for a Column containing task IDs\ninterface Column {\n    id: string\n    title: string\n    taskIds: string[] // Array of task IDs in the column\n}\n\n// Type for Initial Data containing tasks and columns\nexport interface InitDataType {\n    tasks: Record<string, Task> // Key is the task ID\n    columns: Record<string, Column> // Key is the column ID\n    columnOrder: string[] // Array of column IDs\n}\n\ninterface OnDragEndType {\n    result: DropResult\n    state: InitDataType\n    setState: React.Dispatch<React.SetStateAction<InitDataType>>\n}\n\nconst onDragEnd = ({ result, state, setState }: OnDragEndType) => {\n    const { source, destination } = result\n\n    // Dropped outside the list\n    if (!destination) return\n\n    const sourceColumn = state.columns[source.droppableId]\n    const destinationColumn = state.columns[destination.droppableId]\n\n    // Reordering within the same column\n    if (sourceColumn === destinationColumn) {\n        const newTaskIds = reorder(sourceColumn.taskIds, source.index, destination.index)\n        const newColumn: Column = {\n            ...sourceColumn,\n            taskIds: newTaskIds,\n        }\n\n        setState({\n            ...state,\n            columns: {\n                ...state.columns,\n                [newColumn.id]: newColumn,\n            },\n        })\n    } else {\n        // Moving to a different column\n        const result = move(sourceColumn.taskIds, destinationColumn.taskIds, source, destination)\n\n        const newState: InitDataType = {\n            ...state,\n            columns: {\n                ...state.columns,\n                [sourceColumn.id]: {\n                    ...sourceColumn,\n                    taskIds: result[source.droppableId],\n                },\n                [destinationColumn.id]: {\n                    ...destinationColumn,\n                    taskIds: result[destination.droppableId],\n                },\n            },\n        }\n\n        setState(newState)\n    }\n}\n\n// Initial data structure with tasks and columns\n// Function to reorder the list on drag end\nexport const reorder = <T,>(list: T[], startIndex: number, endIndex: number): T[] => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n    return result\n}\n\n// Function to move tasks between columns\nexport const move = (\n    source: string[],\n    destination: string[],\n    droppableSource: { index: number; droppableId: string },\n    droppableDestination: { index: number; droppableId: string }\n) => {\n    const sourceClone = Array.from(source)\n    const destClone = Array.from(destination)\n    const [removed] = sourceClone.splice(droppableSource.index, 1)\n    destClone.splice(droppableDestination.index, 0, removed)\n\n    return {\n        [droppableSource.droppableId]: sourceClone,\n        [droppableDestination.droppableId]: destClone,\n    }\n}\n\nexport const KanbanAddTaskRow = React.memo(() => {\n    return (\n        <div className=\"flex items-center gap-2 mb-1rem px-4\">\n            <Button\n                size={'default'}\n                variant={'secondary'}\n                className={cn('w-full')}\n            >\n                <Plus className={cn('size-5')} />\n            </Button>\n        </div>\n    )\n})\n\nexport const KanbanColumnBodyDraggable = React.memo(\n    ({ column, tasks, kanbanColumnRow }: { column: Column; tasks: Task[]; kanbanColumnRow: KanbanColumnBodyProps }) => {\n        return (\n            <>\n                <Droppable\n                    key={column.id}\n                    droppableId={column.id}\n                >\n                    {(provided, snapshot) => (\n                        <KanbanColumnBody\n                            kanbanColumnRow={kanbanColumnRow}\n                            provided={provided}\n                            snapshot={snapshot}\n                            column={column}\n                            tasks={tasks}\n                        />\n                    )}\n                </Droppable>\n            </>\n        )\n    }\n)\n\nexport const KanbanColumnBody = React.memo(\n    ({\n        provided,\n        snapshot,\n        column,\n        tasks,\n        kanbanColumnRow,\n    }: {\n        provided: DroppableProvided\n        snapshot: DroppableStateSnapshot\n        column: Column\n        tasks: Task[]\n        kanbanColumnRow: KanbanColumnBodyProps\n    }) => {\n        return (\n            <div\n                ref={provided.innerRef}\n                className={cn(\n                    'pt-2 border-[2px] border-dashed border-transparent rounded-md transition-all w-full',\n                    snapshot.isDraggingOver && 'bg-green-100/30 border-green-400/30',\n                    column.taskIds.includes(snapshot.draggingFromThisWith ?? '') && 'bg-red-100/30 border-red-400/30',\n                    snapshot.draggingFromThisWith === snapshot.draggingOverWith &&\n                    snapshot.draggingOverWith &&\n                    'bg-sky-100/30 border-sky-400/30'\n                )}\n                style={{\n                    height: 500,\n                }}\n            // {...provided.droppableProps}\n            >\n                {tasks.map((task, index) => (\n                    <SwapyColumnRowDraggable\n                        key={task.id}\n                        task={task}\n                        idx={index}\n                        kanbanColumnRow={kanbanColumnRow}\n                        columnProvided={provided}\n                        columnSnapshot={snapshot}\n                        {...provided.droppableProps}\n                    />\n                ))}\n                {provided.placeholder}\n            </div>\n        )\n    }\n)\n\nexport const SwapyColumnRowDraggable = React.memo(\n    ({\n        task,\n        idx,\n        columnProvided,\n        columnSnapshot,\n        kanbanColumnRow,\n    }: {\n        task: Task\n        idx: number\n        columnProvided: DroppableProvided\n        columnSnapshot: DroppableStateSnapshot\n        kanbanColumnRow: KanbanColumnBodyProps\n    }) => {\n        return (\n            <Draggable\n                draggableId={task.id}\n                index={idx}\n            >\n                {(provided, snapshot) => (\n                    <KanbanColumnRow\n                        provided={provided}\n                        snapshot={snapshot}\n                        task={task}\n                        kanbanColumnRow={kanbanColumnRow}\n                        columnProvided={columnProvided}\n                        columnSnapshot={columnSnapshot}\n                    />\n                )}\n            </Draggable>\n        )\n    }\n)\n\n//NOTE: KanbanColumnAddRow\n\nexport interface KanbanColumnAddRowBodyArgs {\n    column: Column\n}\n\nexport interface KanbanAddColumnRowBodyProps extends Omit<React.HTMLProps<HTMLDivElement>, 'children'> {\n    children: React.FC<KanbanColumnAddRowBodyArgs>\n}\n\nexport interface KanbanAddColumnRow {\n    column: Column\n    kanbanColumnAddRow: KanbanAddColumnRowBodyProps\n}\n\nexport const KanbanColumnAddRow: React.FC<KanbanAddColumnRow> = React.memo(({ column, kanbanColumnAddRow }) => {\n    const { className, children: KanbanColumnAddRowBody, ...props } = kanbanColumnAddRow ?? {}\n    return (\n        <div\n            className={cn('', className)}\n            {...props}\n        >\n            <KanbanColumnAddRowBody column={column} />\n        </div>\n    )\n})\n\n//NOTE:  KanbanColumnHeader\nexport type KanbanColumnRowBodyContentArgs = {\n    column: Column\n}\n\nexport interface KanbanColumnHeaderBodyProps\n    extends Partial<\n        Omit<React.HTMLProps<HTMLDivElement>, 'children'> & Pick<KanbanColumnHeaderProps, 'dragHandlerProps'>\n    > {\n    children: React.FC<KanbanColumnRowBodyContentArgs>\n}\n\nexport interface KanbanColumnHeaderProps extends Omit<React.HTMLProps<HTMLDivElement>, 'children'> {\n    column: Column\n    dragHandlerProps?: DraggableProvidedDragHandleProps | null\n    kanbanColumnHeader: KanbanColumnHeaderBodyProps\n}\n\nexport const KanbanColumnHeader: React.FC<KanbanColumnHeaderProps> = React.memo(\n    ({ column, dragHandlerProps, kanbanColumnHeader }) => {\n        const { children: KanbanColumnRowBody, className, ...restProps } = kanbanColumnHeader ?? {}\n\n        return (\n            <div\n                className={cn('flex items-center justify-between gap-2 mb-2 px-4', className)}\n                {...dragHandlerProps}\n                {...restProps}\n            >\n                {<KanbanColumnRowBody column={column} />}\n            </div>\n        )\n    }\n)\n\n//NOTE: KanbanColumnRow\nexport interface KanbanColumnRowComponentArgs extends Pick<KanbanColumnRowProps, 'task'> { }\nexport interface KanbanColumnBodyProps extends Omit<React.HTMLProps<HTMLDivElement>, 'children'> {\n    options: {\n        draggingOutStyle?: string\n        draggingOnOriginStyle?: string\n        draggingOverNoColumnStyle?: string\n    }\n    children: React.FC<KanbanColumnRowComponentArgs>\n}\n\nexport interface KanbanColumnRowProps {\n    provided: DraggableProvided\n    snapshot: DraggableStateSnapshot\n    task: Task\n    columnProvided: DroppableProvided\n    columnSnapshot: DroppableStateSnapshot\n    kanbanColumnRow: KanbanColumnBodyProps\n}\n\nexport const KanbanColumnRow = React.memo(\n    ({ provided, snapshot, task, columnProvided, columnSnapshot, kanbanColumnRow }: KanbanColumnRowProps) => {\n        const draggingOut = task.id === columnSnapshot.draggingFromThisWith\n        const draggingToOrigin = (task.id === columnSnapshot.draggingOverWith && columnSnapshot.draggingOverWith) as boolean\n        const draggingOverNoColumn = snapshot.isDragging && !snapshot.draggingOver\n\n        const { children: KanbanColumnRowBody, className, options } = kanbanColumnRow ?? {}\n        const { draggingOutStyle, draggingOnOriginStyle, draggingOverNoColumnStyle } = options ?? {}\n\n        const kanbanStyle = cn(\n            //FIX:\n            'select-none p-4 b-secondary border border-border  border-solid  rounded-md flex items-center gap-3 mb-2 mx-2 z-10 relative',\n            draggingOut &&\n            (draggingOutStyle\n                ? cn('border-red-400/30 border-dashed border-2', draggingOutStyle)\n                : 'border-red-400/30 border-dashed border-2'),\n            draggingToOrigin &&\n            (draggingOnOriginStyle\n                ? cn('border-sky-400/30 border-dashed border-2', draggingOnOriginStyle)\n                : 'border-sky-400/30 border-dashed border-2'),\n            //NOTE: you will have to add some outline animation here for deleting for\n            //example\n            draggingOverNoColumn &&\n            (draggingOverNoColumnStyle\n                ? cn('border-purple-400/30 border-dashed border-2', draggingOverNoColumnStyle)\n                : 'border-purple-400/30 border-dashed border-2')\n        )\n\n        return (\n            <div className=\"relative\">\n                <div\n                    className={cn('overflow-hidden  bg-background', kanbanStyle, className)}\n                    style={{ ...provided.draggableProps.style }}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                >\n                    <KanbanColumnRowBody task={task} />\n                </div>\n            </div>\n        )\n    }\n)\n\n// NOTE: Kanban\ninterface KanbanType {\n    initData: InitDataType\n    kanbanColumnRow: KanbanColumnBodyProps\n    kanbanColumnHeader: KanbanColumnHeaderBodyProps\n    kanbanColumnAddRow: KanbanAddColumnRowBodyProps\n}\n\nexport const Kanban = React.forwardRef(\n    (\n        { initData, kanbanColumnRow, kanbanColumnHeader, kanbanColumnAddRow }: KanbanType,\n        ref: React.ForwardedRef<HTMLDivElement>\n    ) => {\n        const [state, setState] = React.useState<InitDataType>(initData)\n        const onDragEndd = React.useCallback((result: DropResult) => onDragEnd({ state, setState, result }), [state])\n\n        return (\n            <div\n                ref={ref}\n                className=\"w-full h-full\"\n            >\n                <DragDropContext onDragEnd={onDragEndd}>\n                    <Droppable\n                        droppableId=\"board\"\n                        type=\"COLUMN\"\n                        direction=\"horizontal\"\n                        ignoreContainerClipping={true}\n                    // isCombineEnabled={isCombineEnabled}\n                    >\n                        {(provided, snapshot) => (\n                            <div\n                                className={cn(\n                                    //FIX:\n                                    'flex space-around bg-[161617] p-4 rounded-lg border border-border border-solid gap-4 mr-4'\n                                )}\n                                {...provided.droppableProps}\n                                ref={provided.innerRef}\n                            >\n                                {state.columnOrder.map((columnId, idx) => {\n                                    const column = state.columns[columnId]\n                                    const tasks = column.taskIds.map(taskId => state.tasks[taskId])\n\n                                    return (\n                                        <Draggable\n                                            key={column.id}\n                                            draggableId={column.id}\n                                            index={idx}\n                                        >\n                                            {(provided, snapshot) => (\n                                                <div\n                                                    className=\"flex flex-col gap-2 bg-:w rounded-md py-2  w-[350px]\"\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                >\n                                                    <KanbanColumnHeader\n                                                        column={column}\n                                                        kanbanColumnHeader={kanbanColumnHeader}\n                                                        dragHandlerProps={provided.dragHandleProps}\n                                                    />\n                                                    <KanbanColumnAddRow\n                                                        kanbanColumnAddRow={kanbanColumnAddRow}\n                                                        column={column}\n                                                    />\n                                                    <KanbanColumnBodyDraggable\n                                                        kanbanColumnRow={kanbanColumnRow}\n                                                        column={column}\n                                                        tasks={tasks}\n                                                    />\n                                                </div>\n                                            )}\n                                        </Draggable>\n                                    )\n                                })}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n        )\n    }\n)\n// https://chatgpt.com/share/66e80c4a-ebfc-8009-aa04-d56fd753c19f\n"
    }
  ],
  "type": "components:ui"
}