{
  "name": "drawer",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "drawer",
  "files": [
    {
      "path": "drawer/drawer.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { Drawer as DrawerPrimitive } from 'vaul'\n\nimport { cn } from '@gentelduck/libs/cn'\nimport { DrawerWrapperProps } from './drawer.types'\n\n/**\n * `Drawer` is a React component that renders a drawer interface.\n *\n * @param {React.ComponentProps<typeof DrawerPrimitive.Root>} props - The props to be passed to the `DrawerPrimitive.Root` component.\n * @param {boolean} [props.shouldScaleBackground] - If true, the drawer will scale the background when it is open.\n *\n * @returns {JSX.Element} The rendered `DrawerPrimitive.Root` component.\n */\nfunction Drawer({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>): JSX.Element {\n  return (\n    <DrawerPrimitive.Root\n      shouldScaleBackground={shouldScaleBackground}\n      {...props}\n    />\n  )\n}\nDrawer.displayName = 'Drawer'\n\n/**\n * A component that serves as the trigger for opening the Drawer.\n * It is a wrapper around the `DrawerPrimitive.Trigger` component.\n *\n * @component\n */\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\n/**\n * A component that provides a portal for rendering the Drawer component.\n * This allows the Drawer to be rendered outside of its parent component's DOM hierarchy.\n */\nconst DrawerPortal = DrawerPrimitive.Portal\n\n/**\n * A component that represents the close button for the Drawer component.\n * It is a wrapper around the `DrawerPrimitive.Close` component.\n */\nconst DrawerClose = DrawerPrimitive.Close\n\n/**\n * `DrawerOverlay` is a React component that renders an overlay for a drawer.\n * It uses `React.forwardRef` to pass down a ref to the underlying `DrawerPrimitive.Overlay` component.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {string} [props.className] - Additional class names to apply to the overlay.\n * @param {React.Ref} ref - The reference to be forwarded to the `DrawerPrimitive.Overlay` component.\n *\n * @returns {JSX.Element} The rendered overlay component.\n */\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn('fixed inset-0 z-50 bg-black/80', className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\n/**\n * `DrawerContent` is a React component that renders the content of a drawer using `DrawerPrimitive.Content`.\n * It is wrapped in a `DrawerPortal` and includes a `DrawerOverlay`.\n *\n * @param {object} props - The properties passed to the component.\n * @param {string} [props.className] - Additional class names to apply to the drawer content.\n * @param {React.ReactNode} props.children - The content to be rendered inside the drawer.\n * @param {object} props.overlay - The properties passed to the `DrawerOverlay` component.\n * @param {React.Ref} ref - The reference to the drawer content element.\n *\n * @returns {JSX.Element} The rendered drawer content component.\n */\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content> & {\n    overlay?: React.ComponentPropsWithoutRef<typeof DrawerOverlay>\n  }\n>(({ className, children, overlay, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay {...overlay} />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background',\n        className\n      )}\n      {...props}\n    >\n      <div className='mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted' />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = 'DrawerContent'\n\n/**\n * A component that renders the header of a drawer.\n *\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The properties passed to the component.\n * @param {string} [props.className] - Additional class names to apply to the header.\n *\n * @returns {JSX.Element} The rendered header component.\n */\nfunction DrawerHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\n  return (\n    <div\n      className={cn('grid gap-1.5 p-4 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\nDrawerHeader.displayName = 'DrawerHeader'\n\n/**\n * A component that renders the footer of a drawer.\n *\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The properties passed to the component.\n * @param {string} [props.className] - Additional class names to apply to the footer.\n *\n * @returns {JSX.Element} The rendered footer component.\n */\nfunction DrawerFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\n  return (\n    <div\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\nDrawerFooter.displayName = 'DrawerFooter'\n\n/**\n * `DrawerTitle` is a React component that forwards its ref to the `DrawerPrimitive.Title` component.\n * It applies additional class names for styling and accepts all props that `DrawerPrimitive.Title` accepts.\n *\n * @param {string} className - Additional class names to apply to the component.\n * @param {React.Ref} ref - A ref that will be forwarded to the `DrawerPrimitive.Title` component.\n * @param {object} props - Additional props to be passed to the `DrawerPrimitive.Title` component.\n *\n * @returns {JSX.Element} The rendered `DrawerPrimitive.Title` component with forwarded ref and applied class names.\n */\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      'text-lg font-semibold leading-none tracking-tight',\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\n/**\n * `DrawerDescription` is a React component that forwards its ref to the `DrawerPrimitive.Description` component.\n * It accepts all props that `DrawerPrimitive.Description` accepts, along with an optional `className` prop.\n *\n * @param {Object} props - The props for the component.\n * @param {string} [props.className] - An optional class name to apply to the component.\n * @param {React.Ref} ref - The ref to be forwarded to the `DrawerPrimitive.Description` component.\n *\n * @returns {JSX.Element} The rendered `DrawerPrimitive.Description` component with forwarded ref and applied class names.\n */\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\n/**\n * `DrawerWrapper` is a React component that wraps a `Drawer` component and renders children elements\n * conditionally based on the screen size. If the screen width is 768px or greater, a `Drawer` is rendered; otherwise,\n * a `Sheet` is rendered.\n * @param {DrawerWrapperProps} props - The properties passed to the component.\n * @returns {JSX.Element} The rendered `Drawer` or `Sheet` component.\n */\nfunction DrawerWrapper({\n  trigger,\n  content,\n  duckHook,\n  ...props\n}: DrawerWrapperProps): JSX.Element {\n  const {\n    className: contentClassName,\n    children: contentChildren,\n    _header,\n    _footer,\n    ...contentProps\n  } = content\n  const {\n    className: headerClassName,\n    _description,\n    _title,\n    ...headerProps\n  } = _header ?? {}\n  const {\n    className: footerClassName,\n    _submit: _subSubmit,\n    _cancel: _subCancel,\n    ...footerProps\n  } = _footer ?? {}\n\n  return (\n    <Drawer\n      open={duckHook?.state.shape}\n      onOpenChange={duckHook?.handleOpenChange}\n      {...props}\n    >\n      <DrawerTrigger {...trigger} />\n      <DrawerContent\n        className={cn('flex flex-col w-full h-full', contentClassName)}\n        {...contentProps}\n      >\n        <div\n          data-role-wrapper\n          className='flex flex-col gap-4 w-full h-full'\n        >\n          {_header && (\n            <DrawerHeader {...headerProps}>\n              {headerProps.children ? (\n                headerProps.children\n              ) : (\n                <>\n                  <DrawerTitle {..._title} />\n                  <DrawerDescription {..._description} />\n                </>\n              )}\n            </DrawerHeader>\n          )}\n          {contentChildren}\n          <DrawerFooter\n            className={cn('flex items-ceter gap-2', footerClassName)}\n            {...footerProps}\n          >\n            <DrawerClose\n              asChild\n              {..._subCancel}\n            />\n            <div\n              {..._subSubmit}\n              className={cn('w-full', _subSubmit?.className)}\n              onClick={(e) => {\n                duckHook?.setState({ shape: false, alert: false })\n                _subSubmit?.onClick?.(e)\n              }}\n            />\n          </DrawerFooter>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}\nDrawerWrapper.displayName = 'DrawerWrapper'\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerWrapper,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/drawer.tsx"
    },
    {
      "path": "drawer/drawer.types.ts",
      "content": "import { Drawer as DrawerPrimitive } from 'vaul'\nimport { UseDuckAlertReturnType } from '../alert-dialog/alert-dialog.types'\nimport {\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from './drawer'\n\n/**\n * DrawerWrapperProps\n */\nexport type DrawerWrapperProps = {\n  trigger?: React.ComponentPropsWithoutRef<typeof DrawerTrigger>\n  content: Partial<React.ComponentPropsWithoutRef<typeof DrawerContent>> & {\n    _header?: React.ComponentPropsWithoutRef<typeof DrawerHeader> & {\n      _title?: React.ComponentPropsWithoutRef<typeof DrawerTitle>\n      _description?: React.ComponentPropsWithoutRef<typeof DrawerDescription>\n    }\n    _footer?: React.ComponentPropsWithoutRef<typeof DrawerFooter> & {\n      _cancel?: React.ComponentPropsWithoutRef<typeof DrawerClose>\n      _submit?: React.HTMLProps<HTMLDivElement>\n    }\n  }\n  duckHook?: UseDuckAlertReturnType\n} & React.ComponentProps<typeof DrawerPrimitive.Root>\n",
      "type": "registry:ui",
      "target": "components/ui/drawer.types.ts"
    },
    {
      "path": "drawer/index.ts",
      "content": "export * from './drawer'\nexport * from './drawer.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/drawer"
}