{
  "name": "table-1",
  "type": "registry:example",
  "registryDependencies": ["table"],
  "root_folder": "table",
  "files": [
    {
      "path": "table/table-1.tsx",
      "content": "import { cn } from '@/lib'\nimport { faker } from '@faker-js/faker'\nimport { groupArrays } from '@/lib/utils'\nimport {\n  optionsData,\n  PriorityType,\n  StatusType,\n  TableDataType,\n  tableHeaderDropDown,\n} from '@/registry/default/example/TableAdvancedDemo'\nimport {\n  Checkbox,\n  ComboboxType,\n  ContextContent,\n  ContextMenuLabel,\n  ContextMenuOptionsType,\n  DropdownMenuOptionsDataType,\n  DropdownMenuView,\n} from '@/registry/default/ui'\nimport {\n  DuckTableFilter,\n  DuckTableBarRightSide,\n  DuckTableProvider,\n  DuckTableSearch,\n  TableBarViewButton,\n  TableHeaderType,\n  DuckTableBarLeftSide,\n  DuckTableHeader,\n  DuckTableBar,\n  DuckTable,\n  TableBody,\n  DuckTableBodyRow,\n  TableContentDataType,\n  TableCell,\n  TableHeaderOptionsType,\n  DuckTableBody,\n  DuckTableFooter,\n  FooterColumnType,\n  DuckTableDownBar,\n  DuckTablePagination,\n  EmptyTable,\n} from '@/registry/registry-ui-components/table'\nimport {\n  ArrowDownIcon,\n  ArrowRightIcon,\n  ArrowUpIcon,\n  Circle,\n  CircleCheck,\n  CircleHelp,\n  CircleX,\n  Clock12,\n  Ellipsis,\n} from 'lucide-react'\nimport React from 'react'\nimport { tableData } from './table-2'\n\nexport default function Table1Demo() {\n  return (\n    <>\n      <DuckTableProvider>\n        <DuckTableBar>\n          <DuckTableBarRightSide>\n            <DuckTableSearch\n              input={{\n                trigger: {\n                  placeholder: 'Search...',\n                },\n              }}\n            />\n            <DuckTableFilter filter={combinedFiltersData} />\n          </DuckTableBarRightSide>\n          <DuckTableBarLeftSide>\n            <TableBarViewButton header={columns} />\n          </DuckTableBarLeftSide>\n        </DuckTableBar>\n        <DuckTable>\n          <DuckTableHeader headers={columns} selectable={true} />\n\n          <DuckTableBody<(typeof tableData)[number]> data={tableData}>\n            {(data) =>\n              data?.map((row, idx) => {\n                return (\n                  <DuckTableRowWrapper\n                    key={idx}\n                    options={{\n                      group: [3, 1],\n                      optionsData: optionsData,\n                    }}\n                    row={row}\n                  />\n                )\n              })\n            }\n          </DuckTableBody>\n          {/*<DuckTableFooter columns={footerColumns} />\n\n          <EmptyTable />\n          */}\n        </DuckTable>\n        <DuckTableDownBar>\n          <DuckTablePagination />\n        </DuckTableDownBar>\n      </DuckTableProvider>\n    </>\n  )\n}\n\nexport const DuckTableRowWrapper = ({\n  row,\n  options,\n}: {\n  row: TableContentDataType<TableDataType>\n  options: ContextMenuOptionsType<Record<string, unknown>> | undefined\n}) => {\n  return (\n    <DuckTableBodyRow\n      content={{\n        options,\n      }}\n      row={{\n        className: '[&>td]:h-[50px] [&>td]:py-2',\n        children: (\n          <>\n            {Object.values(row).map((item, idx) => {\n              const { children, icon, ...props } = item ?? {}\n              const { children: Icon, ...iconProps } = icon ?? {}\n\n              return (\n                <React.Fragment>\n                  {/*NOTE: Rendering Checkbox */}\n                  {idx === 0 && (\n                    <TableCell key={idx} {...props}>\n                      <Checkbox className=\"border-border\" />\n                    </TableCell>\n                  )}\n                  <TableCell key={idx} {...props}>\n                    <div className=\"flex items-center gap-4 justify-between\">\n                      {/*NOTE: Rendering Label */}\n\n                      {/*NOTE: Rendering the row column childrend */}\n                      <div className=\"grid [&_*]:text-ellipsis [&_*]:overflow-hidden [&_*]:whitespace-nowrap\">\n                        <span\n                          className={cn(\n                            Icon &&\n                            'flex items-center gap-2 [&_svg]:flex-shrink-0',\n                          )}\n                        >\n                          {Icon && <Icon {...iconProps} />}\n                          {Icon ? <span> {children}</span> : children}\n                        </span>\n                      </div>\n                      {/*NOTE: Dropdown Menu */}\n                      {idx === Object.values(row).length - 1 &&\n                        optionsData?.length && (\n                          <DropdownMenuView\n                            trigger={{\n                              className:\n                                'flex py-0 px-1 data-[state=open]:bg-muted h-fit',\n                              children: (\n                                <span className=\"sr-only\">Open menu</span>\n                              ),\n                              variant: 'ghost',\n                              size: 'sm',\n                              icon: {\n                                children: Ellipsis,\n                              },\n                            }}\n                            content={{\n                              align: 'end',\n                              options,\n                            }}\n                          />\n                        )}\n                    </div>\n                  </TableCell>\n                </React.Fragment>\n              )\n            })}\n          </>\n        ),\n      }}\n    ></DuckTableBodyRow>\n  )\n}\n\nconst footerColumns: FooterColumnType[] = [\n  {\n    children: 'Total',\n    colSpan: 3,\n  },\n  {\n    children: '50000$',\n    colSpan: 3,\n    className: 'w-full text-end',\n  },\n]\n\nconst iconStyle = 'size-4 stroke-[1.5] text-muted-foreground'\n// Assuming you have separate filter arrays for StatusType and PriorityType\nconst filtersDataForStatusType: ComboboxType<\n  keyof TableDataType,\n  StatusType\n>[] = [\n    {\n      type: 'listbox',\n      trigger: {\n        children: 'status',\n        size: 'sm',\n        label: {\n          children: 'Filter Status',\n          showLabel: true,\n          showCommand: true,\n          side: 'top',\n        },\n        command: {\n          label: '⌃+⇧+S',\n          key: 'ctrl+shift+s',\n        },\n      },\n      content: {\n        showSearchInput: true,\n        data: [\n          {\n            label: 'Backlog',\n            element: {\n              icon: {\n                children: CircleHelp,\n                className: iconStyle,\n              },\n            },\n          },\n          {\n            label: 'Todo',\n            element: {\n              icon: {\n                children: Circle,\n                className: iconStyle,\n              },\n            },\n          },\n          {\n            label: 'In Progress',\n            element: {\n              icon: {\n                children: Clock12,\n                className: iconStyle,\n              },\n            },\n          },\n          {\n            label: 'Done',\n            element: {\n              icon: {\n                children: CircleCheck,\n                className: iconStyle,\n              },\n            },\n          },\n          {\n            label: 'Canceled',\n            element: {\n              icon: {\n                children: CircleX,\n                className: iconStyle,\n              },\n            },\n          },\n        ],\n      },\n    },\n  ]\n\nconst filtersDataForPriorityType: ComboboxType<\n  keyof TableDataType,\n  PriorityType\n>[] = [\n    {\n      type: 'listbox',\n      trigger: {\n        children: 'priority',\n        label: {\n          children: 'Filter Method',\n          showLabel: true,\n          showCommand: true,\n          side: 'top',\n        },\n        command: {\n          label: '⌃+⇧+M',\n          key: 'ctrl+shift+m',\n        },\n      },\n      content: {\n        showSearchInput: true,\n        data: [\n          {\n            label: 'Low',\n            element: {\n              icon: {\n                children: ArrowDownIcon,\n                className: 'size-4 stroke-[1.5]',\n              },\n            },\n          },\n          {\n            label: 'Medium',\n            element: {\n              icon: {\n                children: ArrowRightIcon,\n                className: 'size-4 stroke-[1.5]',\n              },\n            },\n          },\n          {\n            label: 'High',\n            element: {\n              icon: {\n                children: ArrowUpIcon,\n                className: 'size-4 stroke-[1.5]',\n              },\n            },\n          },\n        ],\n      },\n    },\n  ]\n\nconst combinedFiltersData = [\n  ...filtersDataForStatusType.map(\n    (filter) =>\n      ({\n        ...filter,\n        type: 'combobox',\n        onSelect: filter.onSelect,\n      }) as ComboboxType<StatusType | PriorityType, keyof TableDataType>,\n  ),\n  ...filtersDataForPriorityType.map(\n    (filter) =>\n      ({\n        ...filter,\n        type: 'combobox',\n        onSelect: filter.onSelect,\n      }) as ComboboxType<StatusType | PriorityType, keyof TableDataType>,\n  ),\n]\n\nexport const columns = [\n  {\n    label: 'task',\n    className: 'w-[130px]',\n    sortable: false,\n  },\n  {\n    label: 'title',\n    className: 'w-[300px]',\n    sortable: true,\n    showLabel: false,\n  },\n  {\n    label: 'label',\n    className: 'w-[140px]',\n    sortable: true,\n    currentSort: 'not sorted',\n  },\n  {\n    label: 'status',\n    sortable: true,\n    className: 'w-[145px]',\n    currentSort: 'not sorted',\n  },\n  {\n    label: 'priority',\n    className: 'w-[170px]',\n    sortable: true,\n  },\n] as const satisfies readonly TableHeaderType[]\n\nconst statuses = [\n  { name: 'In Progress', icon: Clock12 },\n  { name: 'Backlog', icon: CircleHelp },\n  { name: 'Todo', icon: Circle },\n  { name: 'Done', icon: CircleCheck },\n  { name: 'Canceled', icon: CircleX },\n]\n\nconst priorities = [\n  { name: 'Low', icon: ArrowDownIcon },\n  { name: 'Medium', icon: ArrowRightIcon },\n  { name: 'High', icon: ArrowUpIcon },\n]\n\nconst labels = ['Bug', 'Feature', 'Documentation']\n\n// export const generateTableData = (count = 10) => {\n//   return Array.from({ length: count }, (_, index) => {\n//     return {\n//       task: { children: `TASK-${faker.number.int({ min: 1000, max: 9999 })}` },\n//       title: { children: faker.hacker.phrase() },\n//       label: { children: faker.helpers.arrayElement(labels) },\n//       status: { children: faker.helpers.arrayElement(statuses) },\n//       priority: { children: faker.helpers.arrayElement(priorities) },\n//     }\n//   })\n// }\n//\n// export const tableData = generateTableData(30) as unknown as TableContentDataType<TableDataType>[]\n",
      "type": "registry:example",
      "target": "components/table-1.tsx"
    }
  ],
  "source": "/registry-examples-duckui/src/table"
}
