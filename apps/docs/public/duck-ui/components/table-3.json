{
  "name": "table-3",
  "type": "registry:example",
  "registryDependencies": [
    "table"
  ],
  "root_folder": "table",
  "files": [
    {
      "path": "table/table-3.tsx",
      "content": "import { TableCell, TableRow } from '@/registry/registry-ui-components/table'\nimport { columns } from './table-1'\nimport { tableData } from './table-2'\nimport {\n  DuckTable,\n  DuckTableBody,\n  DuckTableHeader,\n  DuckTableProvider,\n  DuckTableRowCheckbox,\n  DuckTableSearchInput,\n  DuckTableTopBar,\n  useDuckTable,\n} from '@/registry/registry-ui-components/table/table-advanced'\nimport React from 'react'\nimport { Ellipsis, Pen, Trash2 } from 'lucide-react'\nimport {\n  DropdownMenuOptionsDataType,\n  DropdownMenuProvider,\n  DropdownMenuView,\n  useDropdownMenuContext,\n} from '@/registry/registry-ui-components/dropdown-menu/dropdown-menu-wrapper'\nimport { toast } from 'sonner'\nimport { SheetWrapper } from '@/registry/registry-ui-components/sheet'\nimport {\n  Button,\n  buttonVariants,\n} from '@/registry/registry-ui-components/button'\nimport { cn } from '@/lib/cn'\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/registry/registry-ui-components/alert-dialog'\n\nexport default function TableDemo3() {\n  return (\n    <>\n      <DuckTableProvider table_rows={tableData} table_columns={columns}>\n        <DuckTableTopBar>\n          <DuckTableSearchInput />\n        </DuckTableTopBar>\n        <DuckTable>\n          <DuckTableHeader />\n          <DuckTableBody>\n            <Rows />\n          </DuckTableBody>\n        </DuckTable>\n      </DuckTableProvider>\n    </>\n  )\n}\nexport function Rows() {\n  const { tableRows, tableColumns } = useDuckTable<typeof columns>()\n\n  return tableRows?.map((row, idx) => {\n    return (\n      <TableRow key={idx}>\n        {Object.values(row).map((item, idx) => {\n          const Component = () => (\n            <div className=\"flex items-center gap-2 [&>svg]:size-4 [&>svg]:stroke-[1.5] [&>svg]:text-muted-foreground\">\n              {item.icon}\n              <span className=\"text-ellipsis overflow-hidden duck-truncate\">\n                {item?.children}\n              </span>\n            </div>\n          )\n\n          return (\n            !Array.from(tableColumns.values())[idx]?.['aria-hidden'] && (\n              <TableCell key={idx}>\n                {idx === 0 ? (\n                  <div className=\"flex items-center gap-4\">\n                    <DuckTableRowCheckbox<typeof columns> tableRow={row} />\n                    <Component />\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-between gap-4 w-full\">\n                    <Component />\n                    {idx === Array.from(tableColumns.values()).length - 1 && (\n                      <DropdownMenuProvider>\n                        <RowOptions key={idx} idx={idx} />\n                      </DropdownMenuProvider>\n                    )}\n                  </div>\n                )}\n              </TableCell>\n            )\n          )\n        })}\n      </TableRow>\n    )\n  })\n}\n\nexport const RowOptions = ({ idx }: { idx: number }) => {\n  const { open, setOpen } = useDropdownMenuContext()\n  const [dropOpen, setDropOpen] = React.useState(false)\n\n  return (\n    <>\n      {/* NOTE: THE MAIN TEST*/}\n      <DropdownMenuView\n        open={dropOpen}\n        onOpenChange={setDropOpen}\n        modal={false}\n        trigger={{\n          variant: 'ghost',\n          size: 'sm',\n          icon: <Ellipsis />,\n          className: 'px-1 py-0 h-auto [&>div>span]:sr-only',\n          command: {\n            label: '⌘+k',\n            key: 'Alt+p',\n            action: () => {\n              setDropOpen(true)\n            },\n          },\n        }}\n        content={{\n          label: { children: 'User Menu' },\n          options: {\n            itemType: 'label',\n            optionsData: menuItems(),\n            group: [1, 1], // First 3 items in group 1, next 2 in group 2\n          },\n          className: 'min-w-[180px]',\n        }}\n      />\n\n      {/* NOTE: THE FIRST TEST*/}\n      <SheetWrapper\n        open={open?.id.includes(`sheet`) && open.value}\n        onOpenChange={(value) => {\n          setOpen((_) => ({\n            ..._!,\n            value,\n          }))\n        }}\n        trigger={{ className: 'sr-only' }}\n        content={{\n          children: <div className={cn('h-full')}>you're amazing wildduck</div>,\n          _header: {\n            _title: { children: <>Edit the table row</> },\n            _description: { children: <>Set your daily calorie goal</> },\n          },\n          _footer: {\n            className: 'flex w-full justify-between items-end',\n            _submit: {\n              children: (\n                <Button\n                  variant=\"default\"\n                  onClick={() => toast.success('Goal updated!')}\n                >\n                  Submit\n                </Button>\n              ),\n            },\n            _cancel: { children: <Button variant=\"outline\">Cancel</Button> },\n          },\n        }}\n      />\n\n      {/* NOTE: the second test*/}\n      <AlertDialog\n        open={open?.id.includes(`dialog`) && open.value}\n        onOpenChange={(value) => {\n          setOpen((_) => ({\n            ..._!,\n            value,\n          }))\n        }}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete your\n              account and remove your data from our servers.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel asChild>\n              <Button\n                className={cn(\n                  buttonVariants({\n                    variant: 'secondary',\n                    size: 'sm',\n                    border: 'secondary',\n                    className: 'px-8',\n                  }),\n                )}\n              >\n                Cancel\n              </Button>\n            </AlertDialogCancel>\n            <AlertDialogAction asChild>\n              <Button\n                className={cn(\n                  buttonVariants({\n                    variant: 'destructive',\n                    size: 'sm',\n                    border: 'destructive',\n                    className: 'px-8',\n                  }),\n                )}\n              >\n                Delete\n              </Button>\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  )\n}\n\nfunction menuItems() {\n  return [\n    {\n      icon: <Pen />,\n      actionType: 'sheet',\n      children: 'Settings',\n      command: {\n        label: '⌘+o+k',\n        key: 'Alt+o',\n      },\n    },\n    {\n      children: 'Delete',\n      actionType: 'dialog',\n      icon: <Trash2 />,\n      command: {\n        label: '⌘+o+d',\n        key: 'Alt+n',\n      },\n      className:\n        'bg-destructive/40 dark:text-white/70 text-destructive hover:!bg-destructive hover:!text-white',\n    },\n  ] as DropdownMenuOptionsDataType[]\n}\n",
      "type": "registry:example",
      "target": "components/table-3.tsx"
    }
  ],
  "source": "/registry-examples-duckui/src/table"
}