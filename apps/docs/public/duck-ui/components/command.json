{
  "name": "command",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "command",
  "files": [
    {
      "path": "command/command.hooks.ts",
      "content": "import React from 'react'\nimport { CommandContextType } from './command.types'\nimport { CommandContext } from './command'\n\n/**\n * Custom hook to access the CommandContext.\n *\n * @function useCommandContext\n * @returns {CommandContextType} The command context value.\n * @throws Will throw an error if the hook is used outside of a CommandProvider.\n */\nexport function useCommandContext(): CommandContextType {\n  const context = React.useContext(CommandContext)\n  if (!context) {\n    throw new Error('useCommandContext must be used within a CommandProvider')\n  }\n  return context\n}\n",
      "type": "registry:ui",
      "target": "components/ui/command.hooks.ts"
    },
    {
      "path": "command/command.tsx",
      "content": "import React from 'react'\nimport { cn } from '@gentleduck/libs/cn'\nimport { Search } from 'lucide-react'\nimport { useDuckShortcut } from '@ahmedayob/duck-shortcut'\nimport {\n  CommandBadgeProps,\n  CommandContextType,\n  CommandEmptyProps,\n  CommandGroupProps,\n  CommandInputProps,\n  CommandItemProps,\n  CommandListProps,\n  CommandProps,\n  CommandSeparatorProps,\n} from './command.types'\nimport { useDebounceCallback } from '@gentleduck/hooks/use-debounce'\nimport { useCommandContext } from './command.hooks'\n\n/**\n * @type {React.Context<CommandContextType|null>}\n * @description The context for the Command components. It holds the current search query and a function to update it.\n */\nexport const CommandContext: React.Context<CommandContextType | null> =\n  React.createContext<CommandContextType | null>(null)\n\n/**\n * Command Component\n *\n * @component\n * @param {React.HTMLProps<HTMLDivElement>} props - The component props.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {React.Ref<HTMLDivElement>} [props.ref] - Reference to the underlying div element.\n * @param {React.HTMLProps<HTMLDivElement>} [...props] - The component props.\n * @returns {JSX.Element} The rendered Command component.\n */\nfunction Command({ className, ref, ...props }: CommandProps): JSX.Element {\n  const [search, setSearch] = React.useState<string>('')\n\n  return (\n    <CommandContext.Provider\n      value={{\n        search,\n        setSearch,\n      }}\n    >\n      <div\n        ref={ref}\n        className={cn(\n          'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n          className,\n        )}\n        {...props}\n      />\n    </CommandContext.Provider>\n  )\n}\n\n/**\n * CommandInput Component\n *\n * @component\n * @param {React.HTMLProps<HTMLInputElement>} props - The component props.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {React.Ref<HTMLInputElement>} [props.ref] - Reference to the input element.\n * @param {React.HTMLProps<HTMLInputElement>} [...props] - The component props.\n * @returns {JSX.Element} The rendered CommandInput component.\n */\nfunction CommandInput({\n  className,\n  ref,\n  ...props\n}: CommandInputProps): JSX.Element {\n  const { setSearch } = useCommandContext()\n  const debouncedSetSearch = useDebounceCallback(setSearch, 0)\n\n  return (\n    <div\n      className='flex items-center border-b px-3 gap-1'\n      cmdk-input-wrapper=''\n    >\n      <Search className='h-4 w-4 shrink-0 opacity-50' />\n      <input\n        ref={ref}\n        onChange={(e) => debouncedSetSearch(e.target.value)}\n        className={cn(\n          'flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\n/**\n * CommandEmpty Component\n *\n * @component\n * @param {React.HTMLProps<HTMLLIElement>} props - The component props.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {React.Ref<HTMLHeadingElement>} [props.ref] - Reference to the heading element.\n * @param {React.HTMLProps<HTMLLIElement>} [...props] - Additional props.\n * @returns {JSX.Element} The rendered CommandEmpty component.\n */\nfunction CommandEmpty({\n  className,\n  ref,\n  ...props\n}: CommandEmptyProps): JSX.Element {\n  return <h6 ref={ref} className='py-6 text-center text-sm' {...props} />\n}\n\n/**\n * CommandList Component\n *\n * @component\n * @param {React.HTMLProps<HTMLLIElement>} props - The component props.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {(search: string) => React.ReactNode} props.children - A render prop that receives the current search query.\n * @param {React.Ref<HTMLUListElement>} [props.ref] - Reference to the ul element.\n * @param {React.HTMLProps<HTMLLIElement>} [...props] - Additional props.\n * @returns {JSX.Element} The rendered CommandList component.\n */\nfunction CommandList({\n  className,\n  children,\n  ref,\n  ...props\n}: CommandListProps): JSX.Element {\n  const { search } = useCommandContext()\n  return (\n    <ul\n      ref={ref}\n      className={cn(\n        'max-h-[300px] overflow-y-auto overflow-x-hidden p-1 [scrollbar-width:thin] [scrollbar-gutter:stable]',\n        className,\n      )}\n      children={children(search)}\n      {...props}\n    />\n  )\n}\n/**\n * CommandGroup Component\n *\n * @component\n * @param {React.HTMLProps<HTMLLIElement>} props - The component props.\n * @param {string} props.heading - The title for the group.\n * @param {React.ReactNode} props.children - The items within this group.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {React.Ref<HTMLDivElement>} [props.ref] - Reference to the div element.\n * @param {React.HTMLProps<HTMLLIElement>} [...props] - Additional props.\n * @returns {JSX.Element} The rendered CommandGroup component.\n */\nfunction CommandGroup({\n  className,\n  children,\n  heading,\n  ref,\n  ...props\n}: CommandGroupProps): JSX.Element {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n        className,\n      )}\n      {...props}\n    >\n      <h3 className='text-sm text-muted-foreground mb-1 pl-1'>{heading}</h3>\n      {children}\n    </div>\n  )\n}\n\n/**\n * CommandItem Component\n *\n * @component\n * @param {React.HTMLProps<HTMLLIElement>} props - The component props.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {React.Ref<HTMLLIElement>} [props.ref] - Reference to the list item element.\n * @param {React.HTMLProps<HTMLLIElement>} [...props] - Additional props.\n * @returns {JSX.Element} The rendered CommandItem component.\n */\nfunction CommandItem({\n  className,\n  ref,\n  ...props\n}: CommandItemProps): JSX.Element {\n  return (\n    <li\n      ref={ref}\n      className={cn(\n        \"relative flex cursor-default select-none items-center rounded-xs px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:size-4 flex gap-2 hover:bg-muted cursor-pointer transition-color duration-300 will-change-300 hover:text-accent-foreground\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\n/**\n * CommandShortcut Component\n *\n * @component\n * @param {React.HTMLProps<HTMLElement>} props - The component props.\n * @param {string} props.keys - The keyboard shortcut keys (e.g., \"ctrl+K\").\n * @param {() => void} props.onKeysPressed - Callback when the shortcut is activated.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {React.Ref<HTMLElement>} [props.ref] - Reference to the kbd element.\n * @param {React.HTMLProps<HTMLElement>} [...props] - Additional props.\n * @returns {JSX.Element} The rendered CommandShortcut component.\n */\nfunction CommandShortcut({\n  className,\n  keys,\n  onKeysPressed,\n  ref,\n  ...props\n}: CommandBadgeProps): JSX.Element {\n  useDuckShortcut({\n    keys,\n    onKeysPressed: () => {\n      window.event?.preventDefault()\n      onKeysPressed()\n    },\n  })\n\n  return (\n    <kbd\n      className={cn(\n        'inline-flex items-center gap-[2px] transition-colors focus:outline-hidden focus:ring-2 focus:ring-ring focus:offset-2 text-[.7rem] py-[.12rem] px-2 rounded-[4px] text-secondary-foreground [&_svg]:!size-3 !font-sans cursor-none pointer-events-none select-none ml-auto text-xs tracking-widest text-muted-foreground',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n}\n/**\n * CommandSeparator Component\n *\n * @component\n * @param {React.HTMLProps<HTMLDivElement>} props - The component props.\n * @param {string} [props.className] - Additional CSS classes.\n * @param {React.Ref<HTMLDivElement>} [props.ref] - Reference to the separator div.\n * @param {React.HTMLProps<HTMLDivElement>} [...props] - The component props.\n * @returns {JSX.Element} The rendered CommandSeparator component.\n */\nfunction CommandSeparator({\n  className,\n  ref,\n  ...props\n}: CommandSeparatorProps): JSX.Element {\n  return (\n    <div\n      ref={ref}\n      className={cn('-mx-1 h-px bg-border', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandInput,\n  CommandList,\n  CommandGroup,\n  CommandItem,\n  CommandEmpty,\n  CommandShortcut,\n  CommandSeparator,\n  // CommandDialog,\n}\n\n// interface CommandDialogProps extends DialogP rop s {}\n//\n// const CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n//   return (\n//     <Dialog {...props}>\n//       <DialogContent className='overflow-hidden p-0 shadow-lg'>\n//         <Command className='[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5'>\n//           {children}\n//         </Command>\n//       </DialogContent>\n//     </Dialog>\n//   )\n// }\n",
      "type": "registry:ui",
      "target": "components/ui/command.tsx"
    },
    {
      "path": "command/command.types.ts",
      "content": "export interface CommandProps extends React.HTMLProps<HTMLDivElement> {}\n\n/**\n * Props for the CommandInput component.\n * This component renders an input field for searching through the command items.\n */\nexport interface CommandInputProps extends React.HTMLProps<HTMLInputElement> {}\n\n/**\n * Props for the CommandList component.\n * The children property is a render function that receives the current search string,\n * allowing dynamic filtering of command items.\n */\nexport interface CommandListProps\n  extends Omit<React.HTMLProps<HTMLUListElement>, 'children'> {\n  /** A render function that returns the command items.*/\n  children: (/** The current search string */ search: string) => React.ReactNode\n}\n\n/**\n * Props for the CommandGroup component.\n * This component is used to group command items under a common heading.\n */\nexport interface CommandGroupProps extends React.HTMLProps<HTMLDivElement> {\n  /** The title for the command group. */\n  heading: string\n}\n\n/**\n * Props for the CommandItem component.\n * Represents an individual command item in the command palette.\n */\nexport interface CommandItemProps extends React.HTMLProps<HTMLLIElement> {}\n\n/**\n * Props for the CommandEmpty component.\n * Rendered when no command items match the current search query.\n */\nexport interface CommandEmptyProps\n  extends React.HTMLProps<HTMLHeadingElement> {}\n\n/**\n * Type for the context used within the Command components.\n * This context provides the current search query and a function to update it.\n */\nexport type CommandContextType = {\n  /** The current search query. */\n  search: string\n  /** A function to update the search query. */\n  setSearch: React.Dispatch<React.SetStateAction<string>>\n}\n\n/**\n * Props for the CommandSeparator component.\n * This component renders a visual separator between command groups or items.\n */\nexport interface CommandSeparatorProps\n  extends React.HTMLProps<HTMLDivElement> {}\n\n/**\n * Props for the CommandBadge component (also used as CommandShortcut).\n * This component displays a badge that indicates the keyboard shortcut for a command.\n */\nexport interface CommandBadgeProps extends React.HTMLProps<HTMLElement> {\n  /** The keyboard shortcut keys (e.g., \"ctrl+K\"). */\n  keys: string\n  /** Callback function that is invoked when the shortcut keys are pressed. */\n  onKeysPressed: () => void\n}\n",
      "type": "registry:ui",
      "target": "components/ui/command.types.ts"
    },
    {
      "path": "command/index.ts",
      "content": "export * from './command'\nexport * from './command.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/command"
}
