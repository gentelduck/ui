{
  "name": "input",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "input",
  "files": [
    {
      "path": "input/index.ts",
      "content": "export * from './input'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "input/input.tsx",
      "content": "import * as React from 'react'\n\nimport { cn } from '@gentelduck/libs/cn'\nimport { Badge } from '../badge'\nimport { LabelType } from '../button'\nimport { CommandShortcut } from '../command'\nimport { Tooltip, TooltipContent, TooltipTrigger } from '../tooltip'\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nInput.displayName = 'Input'\n\nexport interface InputCustomViewProps {\n  trigger: React.ComponentPropsWithoutRef<typeof Input>\n  label?: LabelType\n  badge?: React.ComponentPropsWithoutRef<typeof CommandShortcut>\n}\n\nconst InputCustomView = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  InputCustomViewProps\n>(({ trigger, label, badge }, ref) => {\n  const {\n    children: badgeChildren,\n    className: badgeClassName,\n    ...badgeProps\n  } = badge ?? {}\n  const {\n    children: labelChildren,\n    className: labelClassName,\n    ...labelProps\n  } = label ?? {}\n  const { className: triggerClassName, ...triggerProps } = trigger ?? {}\n  return (\n    <div className='flex flex-col'>\n      <Tooltip delayDuration={0}>\n        <TooltipTrigger>\n          <Input\n            ref={ref}\n            className={cn('h-8 w-[150px] lg:w-[200px]', triggerClassName)}\n            {...triggerProps}\n          />\n        </TooltipTrigger>\n        <TooltipContent\n          className={cn(\n            'flex items-center gap-2 z-50 justify-start',\n            labelClassName,\n          )}\n          {...labelProps}\n        >\n          <CommandShortcut className='text-[.8rem]' {...badgeProps}>\n            <Badge variant='secondary' size='sm' className='p-0 px-2'>\n              {badgeChildren}\n            </Badge>\n          </CommandShortcut>\n          <p className='text-sm'>{labelChildren}</p>\n        </TooltipContent>\n      </Tooltip>\n    </div>\n  )\n})\n\nInputCustomView.displayName = 'InputWithLabel'\n\nexport { Input, InputCustomView }\n",
      "type": "registry:ui",
      "target": "components/ui/input.tsx"
    }
  ],
  "source": "/registry-ui-duckui/src/input"
}