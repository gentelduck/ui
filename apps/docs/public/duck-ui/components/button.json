{
  "name": "button",
  "type": "registry:ui",
  "dependencies": ["@radix-ui/react-slot", "@ahmedayob/duck-shortcut"],
  "registryDependencies": ["tooltip", "command", "badge"],
  "root_folder": "button",
  "files": [
    {
      "path": "button/button.constants.ts",
      "content": "import { cva } from 'class-variance-authority'\n\nexport const buttonVariants = cva(\n  'relative inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 font-regular cursor-pointer',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground hover:bg-primary/90 shadow',\n        destructive:\n          'bg-destructive/90 hover:bg-destructive/70  text-destructive-foreground shadow-sm',\n        warning:\n          'bg-warning/90 hover:bg-warning/70 text-warning-foreground shadow-sm',\n        outline:\n          'border border-input text-accent-foreground bg-background hover:bg-accent hover:text-accent-foreground shadow-sm',\n        dashed:\n          'border border-dashed border-input text-accent-foreground bg-background hover:bg-accent/50 hover:text-accent-foreground shadow-sm',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-sm',\n        ghost:\n          'hover:bg-accent text-accent-foreground hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n        expand_icon:\n          'group relative text-primary-foreground bg-primary hover:bg-primary/90',\n        ring_hover:\n          'bg-primary text-primary-foreground transition-all duration-300 hover:bg-primary/90 hover:ring-2 hover:ring-primary/90 hover:ring-offset-2',\n        shine:\n          'text-primary-foreground animate-shine bg-gradient-to-r from-primary via-primary/75 to-primary bg-[length:400%_100%] ',\n        gooey_right:\n          'text-primary-foreground relative bg-primary z-0 overflow-hidden transition-all duration-500 before:absolute before:inset-0 before:-z-10 before:translate-x-[150%] before:translate-y-[150%] before:scale-[2.5] before:rounded-[100%] before:bg-gradient-to-r from-zinc-400 before:transition-transform before:duration-1000  hover:before:translate-x-[0%] hover:before:translate-y-[0%] ',\n        gooey_left:\n          'text-primary-foreground relative bg-primary z-0 overflow-hidden transition-all duration-500 after:absolute after:inset-0 after:-z-10 after:translate-x-[-150%] after:translate-y-[150%] after:scale-[2.5] after:rounded-[100%] after:bg-gradient-to-l from-zinc-400 after:transition-transform after:duration-1000  hover:after:translate-x-[0%] hover:after:translate-y-[0%] ',\n        link_hover1:\n          'relative after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-left after:scale-x-100 hover:after:origin-bottom-right hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-300',\n        link_hover2:\n          'relative after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-right after:scale-x-0 hover:after:origin-bottom-left hover:after:scale-x-100 after:transition-transform after:ease-in-out after:duration-300',\n        nothing: '',\n      },\n      size: {\n        icon: 'text-base size-[2em] p-0 [&_svg]:size-[1.1em] rounded-md',\n        xs: 'text-xs h-[2.5em] px-[1em] py-[0.5em] [&_svg]:size-[1.3em] rounded-md',\n        sm: 'text-sm h-[2.5em] px-[1em] py-[0.5em] [&_svg]:size-[1.3em] rounded-md',\n        md: 'text-base h-[2.5em] px-[1.25em] py-[0.5em] [&_svg]:size-[1.3em] rounded-md',\n        default:\n          'text-base h-[2.5em] px-[1.25em] py-[0.5em] [&_svg]:size-[1.3em] rounded-md',\n        lg: 'text-lg h-[2.75em] px-[1.5em] py-[0.5em] [&_svg]:size-[1.3em] rounded-lg',\n        xl: 'text-xl h-[3em] px-[1.75em] py-[0.5em] [&_svg]:size-[1.3em] rounded-lg',\n        '2xl':\n          'text-2xl h-[3.25em] px-[2em] py-[0.5em] [&_svg]:size-[1.3em] rounded-lg',\n        '3xl':\n          'text-3xl h-[3.5em] px-[2.25em] py-[0.5em] [&_svg]:size-[1.3em] rounded-lg',\n      },\n      border: {\n        default: '',\n        primary: 'border border-border/40 hover:border-border/80',\n        secondary:\n          'border border-secondary/40 hover:border-secondary bg-secondary/40 hover:bg-secondary/65',\n        destructive:\n          'border border-destructive/40 hover:border-destructive bg-destructive/40 hover:bg-destructive/65',\n        warning:\n          'border border-warning/40 hover:border-warning bg-warning/40 hover:bg-warning/65',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n      border: 'default',\n    },\n  },\n)\n",
      "type": "registry:ui",
      "target": "components/ui/button.constants.ts"
    },
    {
      "path": "button/button.tsx",
      "content": "import * as React from 'react'\n\nimport { useDuckShortcut } from '@ahmedayob/duck-shortcut'\nimport { Slot } from '@radix-ui/react-slot'\nimport { Loader } from 'lucide-react'\n\nimport { Badge } from '../badge'\nimport { Tooltip, TooltipContent, TooltipTrigger } from '../tooltip'\nimport { buttonVariants } from './button.constants'\nimport { ButtonProps } from './button.types'\n\nimport { cn } from '@gentelduck/libs/cn'\nimport { CommandShortcut } from '../command'\nimport { TooltipProvider } from '@radix-ui/react-tooltip'\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isCollapsed = false,\n      size = 'default',\n      variant = 'default',\n      border = 'default',\n      className,\n      label,\n      children,\n      icon: Icon,\n      secondIcon: Icon2,\n      loading = false,\n      animationIcon,\n      command,\n      ...props\n    }: ButtonProps,\n    ref: React.ForwardedRef<HTMLButtonElement> | undefined,\n  ) => {\n    const {\n      className: labelClassName,\n      variant: labelVariant,\n      size: labelSize,\n      side,\n      showLabel,\n      showCommand,\n      delayDuration = 0,\n      open,\n      onOpenChange,\n      ...labelProps\n    } = label || {}\n    const Component = asChild ? Slot : 'button'\n    const { icon: AniIcon, iconPlacement = 'right' } = animationIcon ?? {}\n    const {\n      className: commandClassName,\n      variant: commandVariant,\n      size: commandSize,\n      label: commandLabel,\n      show: commandShow,\n      key,\n      action,\n      ...commandProps\n    } = command ?? {}\n\n    if (key && action) {\n      useDuckShortcut({ keys: [key], onKeysPressed: action })\n    }\n\n    // Handle keyboard shortcut Badge\n    const CommandComponent = () => (\n      <CommandShortcut className=\"text-[.8rem]\">\n        {(commandShow ?? true) && (\n          <Badge\n            variant={commandVariant ?? 'secondary'}\n            size={commandSize ?? 'sm'}\n            className={cn(\n              'p-0 px-2 text-bold rounded-sm text-secondary-foreground',\n              commandClassName,\n            )}\n            {...commandProps}\n          >\n            {commandLabel}\n          </Badge>\n        )}\n      </CommandShortcut>\n    )\n\n    const ButtonBody = (\n      <Component\n        ref={ref}\n        className={cn(\n          buttonVariants({\n            variant,\n            size: size\n              ? isCollapsed\n                ? 'icon'\n                : size\n              : isCollapsed\n                ? 'icon'\n                : 'default',\n            border,\n            className,\n          }),\n        )}\n        disabled={loading}\n        data-state={isCollapsed ? 'close' : 'open'}\n        {...props}\n      >\n        {AniIcon && iconPlacement === 'left' && (\n          <div className=\"w-0 translate-x-[0%] pr-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-100 group-hover:pr-2 group-hover:opacity-100\">\n            {AniIcon}\n          </div>\n        )}\n        <div className=\"flex items-center gap-2\">\n          {!loading ? Icon : <Loader className=\"animate-spin\" />}\n          {!isCollapsed && size !== 'icon' && children}\n          {!isCollapsed && command?.label && !showCommand && (\n            <CommandComponent />\n          )}\n\n          {!isCollapsed && label && !showLabel && (\n            <Badge\n              variant={labelVariant ?? 'secondary'}\n              size={labelSize ?? 'default'}\n              className={cn(\n                'text-[.8rem] py-0 rounded-md px-1 font-meduim',\n                labelVariant === 'nothing' && 'text-accent',\n                labelClassName,\n              )}\n              {...labelProps}\n            />\n          )}\n          {!isCollapsed && Icon2 && Icon2}\n        </div>\n        {AniIcon && iconPlacement === 'right' && (\n          <div className=\"w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100\">\n            {AniIcon}\n          </div>\n        )}\n      </Component>\n    )\n\n    if (!label?.showLabel) {\n      return ButtonBody\n    }\n\n    return (\n      <TooltipProvider>\n        <Tooltip\n          delayDuration={delayDuration}\n          open={open}\n          onOpenChange={onOpenChange}\n        >\n          <TooltipTrigger asChild>{ButtonBody}</TooltipTrigger>\n          {(isCollapsed || showLabel) && label && (\n            <TooltipContent\n              {...labelProps}\n              className={cn(\n                'flex items-center gap-2 z-50 justify-start',\n                labelClassName,\n              )}\n              side={side || 'right'}\n            >\n              {command?.label && showCommand && <CommandComponent />}\n              {showLabel && (\n                <span\n                  className={cn(\n                    'ml-auto text-[.9rem]',\n                    !showLabel && 'text-muted-foreground',\n                  )}\n                  {...labelProps}\n                />\n              )}\n            </TooltipContent>\n          )}\n        </Tooltip>\n      </TooltipProvider>\n    )\n  },\n)\n\nButton.displayName = 'Button'\n\nexport { Button }\n",
      "type": "registry:ui",
      "target": "components/ui/button.tsx"
    },
    {
      "path": "button/button.types.ts",
      "content": "import * as TooltipPrimitive from '@radix-ui/react-tooltip'\nimport { VariantProps } from 'class-variance-authority'\nimport { buttonVariants } from './button.constants'\nimport { Badge } from '../badge'\nimport { Tooltip } from '../tooltip'\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isCollapsed?: boolean\n  loading?: boolean\n  icon?: React.ReactNode\n  secondIcon?: React.ReactNode\n  label?: LabelType\n  command?: CommandType\n  animationIcon?: {\n    icon?: React.ReactNode\n    iconPlacement?: 'left' | 'right'\n  }\n}\n\nexport interface LabelType\n  extends Partial<\n      React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n    >,\n    Partial<React.ComponentPropsWithoutRef<typeof Badge>>,\n    Partial<React.ComponentPropsWithoutRef<typeof Tooltip>> {\n  showCommand?: boolean\n  showLabel?: boolean\n  delayDuration?: number\n}\n\nexport type CommandType = {\n  label?: string\n  key: string\n  show?: boolean\n  action?: <T>(arg?: T) => void\n} & Partial<React.ComponentPropsWithoutRef<typeof Badge>>\n",
      "type": "registry:ui",
      "target": "components/ui/button.types.ts"
    },
    {
      "path": "button/index.ts",
      "content": "export * from './button'\nexport * from './button.types'\nexport * from './button.constants'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/button"
}
