{
  "name": "alert-dialog",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "alert-dialog",
  "files": [
    {
      "path": "alert-dialog/alert-dialog.hook.ts",
      "content": "import React from 'react'\nimport { StateType, UseDuckAlertReturnType, UserDuckAlertProps } from './alert-dialog.types'\n\n/**\n * Custom hook to manage the state and behavior of an alert dialog with a drawer.\n *\n * @param {Object} props - The properties for the alert dialog.\n * @param {Object} props.actions - Contains optional cancel and continue actions.\n * @param {Function} [props.actions.cancel] - Callback to execute when the alert is canceled.\n * @param {Function} [props.actions.continue] - Callback to execute when the alert is continued.\n * @param {boolean} props.state - Initial state indicating whether to show the alert.\n *\n * @returns {UseDuckAlertReturnType} An object containing handlers and state management utilities:\n *\n */\nexport function useDuckAlert<T>({ state: changeState }: UserDuckAlertProps<T>): UseDuckAlertReturnType {\n  const [state, setState] = React.useState<StateType>({ shape: false, alert: false })\n  const changeStateRef = React.useRef<typeof changeState | null>(null)\n\n  React.useEffect(() => {\n    changeStateRef.current = changeState\n  }, [])\n\n  const handleAlertCancel = React.useCallback(() => {\n    setState(prevState => ({ ...prevState, alert: false, shape: true }))\n  }, [])\n\n  const handleAlertContinue = React.useCallback(() => {\n    setState(prevState => ({ ...prevState, alert: false, shape: false }))\n  }, [])\n\n  const handleOpenChange = React.useCallback(\n    (drawerState: boolean) => {\n      const showAlert = !drawerState && (changeState || true) && changeStateRef.current !== changeState\n\n      setState(() => ({\n        alert: showAlert as boolean,\n        shape: changeState || true ? drawerState : false,\n      }))\n    },\n    [changeState]\n  )\n\n  return {\n    handleAlertCancel,\n    handleAlertContinue,\n    handleOpenChange,\n    state,\n    setState,\n  }\n}\n",
      "type": "registry:ui",
      "target": "components/ui/alert-dialog.hook.ts"
    },
    {
      "path": "alert-dialog/alert-dialog.tsx",
      "content": "'use client'\r\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\r\nimport * as React from 'react'\r\n\r\nimport { cn } from '@gentelduck/libs/cn'\r\nimport { buttonVariants } from '../button'\r\nimport { DialogWrapper } from '../dialog'\r\nimport { DrawerWrapper } from '../drawer'\r\nimport { SheetWrapper } from '../sheet'\r\nimport { useDuckAlert } from './alert-dialog.hook'\r\nimport {\r\n  AlertDialogDialogProps,\r\n  AlertDialogDrawerProps,\r\n  AlertDialogSheetProps,\r\n  AlertDialogWrapperType,\r\n} from './alert-dialog.types'\r\n\r\n/**\r\n * A component that renders an alert dialog using the AlertDialogPrimitive.Root component.\r\n */\r\nconst AlertDialog =\r\n  AlertDialogPrimitive.Root as typeof AlertDialogPrimitive.Root\r\n\r\n/**\r\n * A component that serves as the trigger for an alert dialog.\r\n */\r\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\r\n\r\n/**\r\n * A component that renders the AlertDialog content inside a portal.\r\n * This is a wrapper around the `AlertDialogPrimitive.Portal` component.\r\n */\r\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\r\n\r\n/**\r\n * `AlertDialogOverlay` is a React forward reference component that renders an overlay for an alert dialog.\r\n * It uses `AlertDialogPrimitive.Overlay` as the base component and applies additional styles and animations.\r\n *\r\n * @param {string} className - Additional class names to apply to the content.\r\n * @param {React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>} props - Additional props to pass to the overlay component.\r\n * @param {React.ElementRef} ref - Ref to be forwarded to the `AlertDialogPrimitive.Overlay` component.\r\n *\r\n * @returns {JSX.Element} The rendered overlay component.\r\n */\r\nconst AlertDialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Overlay\r\n    className={cn(\r\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\r\n      className,\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n))\r\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\r\n\r\n/**\r\n * `AlertDialogContent` is a React component that renders the content of an alert dialog.\r\n * It uses `React.forwardRef` to pass a ref to the underlying `AlertDialogPrimitive.Content` component.\r\n *\r\n * @param {string} className - Additional class names to apply to the content.\r\n * @param {React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>} props - Additional props to pass to the `AlertDialogPrimitive.Content` component.\r\n * @param {React.ElementRef} ref - Ref to be forwarded to the `AlertDialogPrimitive.Content` component.\r\n *\r\n * @returns {JSX.Element} The rendered alert dialog content.\r\n */\r\nconst AlertDialogContent = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPortal>\r\n    <AlertDialogOverlay />\r\n    <AlertDialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-sm duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  </AlertDialogPortal>\r\n))\r\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\r\n\r\n/**\r\n * A component that renders the header of an alert dialog.\r\n * It uses a flexbox layout to arrange its children in a vertical column\r\n * and applies responsive text alignment.\r\n *\r\n * @param {string} className - Additional class names to apply to the content.\r\n * @param {React.HTMLAttributes<HTMLDivElement>} ...props - The properties passed to the component.\r\n *\r\n * @returns {JSX.Element} The rendered header component.\r\n */\r\nfunction AlertDialogHeader({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'flex flex-col space-y-2 text-center sm:text-left',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\nAlertDialogHeader.displayName = 'AlertDialogHeader'\r\n\r\n/**\r\n * A component that renders the footer of an alert dialog.\r\n *\r\n * It uses a flexbox layout to arrange its children in a vertical column\r\n * on small screens and in a row with space between items on larger screens.\r\n *\r\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The properties passed to the component.\r\n * @param {string} [props.className] - Additional class names for styling.\r\n *\r\n * @returns {JSX.Element} The rendered footer component.\r\n */\r\nfunction AlertDialogFooter({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\nAlertDialogFooter.displayName = 'AlertDialogFooter'\r\n\r\n/**\r\n * `AlertDialogTitle` is a React component that forwards its ref to the `AlertDialogPrimitive.Title` component.\r\n * It accepts all props that `AlertDialogPrimitive.Title` accepts, along with an optional `className` prop\r\n * to apply additional CSS classes.\r\n *\r\n * @param {React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>} props - The props for the component.\r\n * @param {React.ElementRef} ref - The ref to be forwarded to the `AlertDialogPrimitive.Title` component.\r\n *\r\n * @returns {JSX.Element} The rendered `AlertDialogPrimitive.Title` component with forwarded ref and applied props.\r\n */\r\nconst AlertDialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn('text-lg font-semibold', className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\r\n\r\n/**\r\n * `AlertDialogDescription` is a React component that forwards its ref to the `AlertDialogPrimitive.Description` component.\r\n * It accepts all props that `AlertDialogPrimitive.Description` accepts, along with an optional `className` prop for additional styling.\r\n *\r\n * @param {React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>} props - The props for the component.\r\n * @param {React.ElementRef} ref - The ref to be forwarded to the `AlertDialogPrimitive.Description` component.\r\n *\r\n * @returns {JSX.Element} The rendered `AlertDialogPrimitive.Description` component with forwarded ref and applied class names.\r\n */\r\nconst AlertDialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn('text-sm text-muted-foreground', className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogDescription.displayName =\r\n  AlertDialogPrimitive.Description.displayName\r\n\r\n/**\r\n * `AlertDialogAction` is a React component that forwards its ref to the `AlertDialogPrimitive.Action` component.\r\n * It accepts all the props of `AlertDialogPrimitive.Action` and an additional `className` prop for custom styling.\r\n *\r\n * @param {React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>} props - All other props are passed through to the `AlertDialogPrimitive.Action` component.\r\n * @param {React.ElementRef} ref - A ref that will be forwarded to the `AlertDialogPrimitive.Action` component.\r\n *\r\n * @returns {JSX.Element} The rendered `AlertDialogPrimitive.Action` component with forwarded ref and applied class names.\r\n */\r\nconst AlertDialogAction = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Action\r\n    ref={ref}\r\n    className={cn(buttonVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\r\n\r\n/**\r\n * `AlertDialogCancel` is a React forward reference component that renders a cancel button\r\n * for an alert dialog using `AlertDialogPrimitive.Cancel`. It accepts all props that a\r\n * `AlertDialogPrimitive.Cancel` component would accept, along with an optional `className`\r\n * for additional styling.\r\n *\r\n * @param {React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>} props - The properties passed to the component.\r\n * @param {React.ElementRef} ref - The reference to be forwarded to the `AlertDialogPrimitive.Cancel` component.\r\n *\r\n * @returns {JSX.Element} The rendered cancel button for the alert dialog.\r\n */\r\nconst AlertDialogCancel = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Cancel\r\n    ref={ref}\r\n    className={cn(\r\n      buttonVariants({ variant: 'outline' }),\r\n      'mt-2 sm:mt-0',\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\n\r\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\r\n\r\n/**\r\n * Renders an alert dialog and a sheet component, managing their open states\r\n * and handling user interactions through provided callbacks.\r\n *\r\n * @param {AlertDialogWrapperType} props - The properties for configuring the AlertDialogWrapper.\r\n *\r\n * The component utilizes the `useDuckAlert` hook for managing its internal state\r\n * and provides a structured layout for displaying an alert dialog with a trigger,\r\n * content, header, footer, and actions, as well as a sheet with nested content\r\n * and customizable headers and footers. The component handles user interactions\r\n * with cancel and continue actions, updating the state and invoking provided callbacks.\r\n */\r\nexport function AlertDialogWrapper({\r\n  alertTrigger,\r\n  alertContent,\r\n  duckHook,\r\n}: AlertDialogWrapperType) {\r\n  const { _header, _footer, ...contentProps } = alertContent ?? {}\r\n  const { _title, _description, ...headerProps } = _header ?? {}\r\n  const { _submit, _cancel, ...footerProps } = _footer ?? {}\r\n\r\n  return (\r\n    <AlertDialog open={duckHook?.state.alert}>\r\n      <AlertDialogTrigger\r\n        {...alertTrigger}\r\n        onClick={(e) => {\r\n          duckHook?.setState({ shape: true, alert: false })\r\n          alertTrigger?.onClick?.(e)\r\n        }}\r\n      />\r\n      <AlertDialogContent {...contentProps}>\r\n        <AlertDialogHeader {...headerProps}>\r\n          {headerProps.children ? (\r\n            headerProps.children\r\n          ) : (\r\n            <>\r\n              <AlertDialogTitle {..._title} />\r\n              <AlertDialogDescription {..._description} />\r\n            </>\r\n          )}\r\n        </AlertDialogHeader>\r\n\r\n        <AlertDialogFooter {...footerProps}>\r\n          <AlertDialogCancel\r\n            {..._cancel}\r\n            onClick={(e) => {\r\n              duckHook?.handleAlertCancel()\r\n              _cancel?.onClick?.(e)\r\n            }}\r\n            asChild\r\n          >\r\n            {_cancel?.children ?? 'Cancel'}\r\n          </AlertDialogCancel>\r\n          <AlertDialogAction\r\n            {..._submit}\r\n            onClick={(e) => {\r\n              duckHook?.handleAlertContinue()\r\n              _submit?.onClick?.(e)\r\n            }}\r\n            asChild\r\n          >\r\n            {_submit?.children ?? 'Continue'}\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  )\r\n}\r\n\r\n/**\r\n * AlertDialogSheet is a component that provides a structured layout for displaying\r\n * an alert dialog with a trigger, content, header, footer, and actions, as well as\r\n * a sheet with nested content and customizable headers and footers. The component\r\n * handles user interactions with cancel and continue actions, updating the state\r\n * and invoking provided callbacks.\r\n *\r\n * @param {AlertDialogSheetProps} props - The properties for configuring the AlertDialogSheet.\r\n *\r\n * The component utilizes the `useDuckAlert` hook for managing its internal state\r\n * and provides a structured layout for displaying an alert dialog with a trigger,\r\n * content, header, footer, and actions, as well as a sheet with nested content\r\n * and customizable headers and footers. The component handles user interactions\r\n * with cancel and continue actions, updating the state and invoking provided callbacks.\r\n */\r\nfunction AlertDialogSheet<T = string>({\r\n  alertTrigger,\r\n  alertContent,\r\n  content,\r\n  state,\r\n}: AlertDialogSheetProps<T>) {\r\n  const duckHook = useDuckAlert({ state })\r\n\r\n  return (\r\n    <>\r\n      <AlertDialogWrapper\r\n        alertTrigger={alertTrigger}\r\n        alertContent={alertContent}\r\n        duckHook={duckHook}\r\n      />\r\n      <SheetWrapper content={content} duckHook={duckHook} />\r\n    </>\r\n  )\r\n}\r\n\r\nAlertDialogSheet.displayName = 'AlertDialogSheet'\r\n\r\n/**\r\n * AlertDialogDrawer is a component that provides a structured layout for displaying\r\n * an alert dialog with a trigger, content, header, footer, and actions, as well as\r\n * a drawer with nested content and customizable headers and footers. The component\r\n * handles user interactions with cancel and continue actions, updating the state\r\n * and invoking provided callbacks.\r\n *\r\n * @param {AlertDialogDrawerProps} props - The properties for configuring the AlertDialogDrawer.\r\n *\r\n * The component utilizes the `useDuckAlert` hook for managing its internal state\r\n * and provides a structured layout for displaying an alert dialog with a trigger,\r\n * content, header, footer, and actions, as well as a drawer with nested content\r\n * and customizable headers and footers. The component handles user interactions\r\n * with cancel and continue actions, updating the state and invoking provided callbacks.\r\n */\r\n\r\nfunction AlertDialogDrawer<T = string>({\r\n  alertTrigger,\r\n  alertContent,\r\n  content,\r\n  state,\r\n}: AlertDialogDrawerProps<T>) {\r\n  const duckHook = useDuckAlert<T>({ state })\r\n\r\n  return (\r\n    <>\r\n      <AlertDialogWrapper\r\n        alertTrigger={alertTrigger}\r\n        alertContent={alertContent}\r\n        duckHook={duckHook}\r\n      />\r\n      <DrawerWrapper content={content} duckHook={duckHook} />\r\n    </>\r\n  )\r\n}\r\n\r\nAlertDialogSheet.displayName = 'AlertDialogDrawer'\r\n\r\n/**\r\n * Renders an alert dialog and a dialog component, managing their open states\r\n * and handling user interactions through provided callbacks.\r\n *\r\n * @template T\r\n * @param {AlertDialogDialogProps} props - The properties for configuring the AlertDialogDialog.\r\n *\r\n * The component utilizes the `useDuckAlert` hook for managing its internal state\r\n * and provides a structured layout for displaying an alert dialog with a trigger,\r\n * content, header, footer, and actions, as well as a dialog with nested content\r\n * and customizable headers and footers. The component handles user interactions\r\n * with cancel and continue actions, updating the state and invoking provided callbacks.\r\n */\r\n\r\nfunction AlertDialogDialog<T = string>({\r\n  alertTrigger,\r\n  alertContent,\r\n  content,\r\n  state,\r\n}: AlertDialogDialogProps<T>) {\r\n  const duckHook = useDuckAlert<T>({ state })\r\n\r\n  return (\r\n    <>\r\n      <AlertDialogWrapper\r\n        alertTrigger={alertTrigger}\r\n        alertContent={alertContent}\r\n        duckHook={duckHook}\r\n      />\r\n      <DialogWrapper content={content} duckHook={duckHook} />\r\n    </>\r\n  )\r\n}\r\n\r\nAlertDialogSheet.displayName = 'AlertDialogDialog'\r\n\r\nexport {\r\n  AlertDialog,\r\n  AlertDialogOverlay,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogFooter,\r\n  AlertDialogTitle,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogTrigger,\r\n  AlertDialogDescription,\r\n  AlertDialogSheet,\r\n  AlertDialogDrawer,\r\n  AlertDialogDialog,\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ui/alert-dialog.tsx"
    },
    {
      "path": "alert-dialog/alert-dialog.types.ts",
      "content": "import {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from './alert-dialog'\nimport { SheetWrapperProps } from '../sheet'\nimport { DrawerWrapperProps } from '../drawer'\nimport { DialogWrapperProps } from '../dialog'\n\n/**\n * Alert Dialog State\n */\nexport interface StateType {\n  shape: boolean\n  alert: boolean\n}\n\n/**\n * UseDuckAlertReturnType\n */\nexport type UseDuckAlertReturnType = {\n  handleAlertCancel: () => void\n  handleAlertContinue: () => void\n  handleOpenChange: (drawerState: boolean) => void\n  state: StateType\n  setState: React.Dispatch<React.SetStateAction<StateType>>\n}\n\n/**\n * UserDuckAlertProps\n */\nexport type UserDuckAlertProps<T> = Pick<AlertDialogSheetProps<T>, 'state'>\n\nexport type AlertDialogWrapperType = {\n  alertTrigger: React.ComponentPropsWithoutRef<typeof AlertDialogTrigger>\n  alertContent: React.ComponentPropsWithoutRef<typeof AlertDialogContent> & {\n    /**\n     * Header you will use this for nothing\n     */\n    _header?: React.ComponentPropsWithoutRef<typeof AlertDialogHeader> & {\n      _title?: React.ComponentPropsWithoutRef<typeof AlertDialogTitle>\n      _description?: React.ComponentPropsWithoutRef<\n        typeof AlertDialogDescription\n      >\n    }\n    _footer?: React.ComponentPropsWithoutRef<typeof AlertDialogFooter> & {\n      _cancel?: React.ComponentPropsWithoutRef<typeof AlertDialogCancel>\n      _submit?: React.ComponentPropsWithoutRef<typeof AlertDialogAction>\n    }\n  }\n  duckHook?: UseDuckAlertReturnType\n}\n\n/**\n * AlertDialogSheetProps\n */\nexport type AlertDialogSheetProps<T = string> = {\n  state: T\n  content: SheetWrapperProps['content']\n} & AlertDialogWrapperType\n\n/**\n * AlertDialogDrawerProps\n */\nexport type AlertDialogDrawerProps<T = string> = {\n  state: T\n  content: DrawerWrapperProps['content']\n} & AlertDialogWrapperType\n\n/**\n * AlertDialogDialogProps\n */\nexport type AlertDialogDialogProps<T = string> = {\n  state: T\n  content: DialogWrapperProps['content']\n} & AlertDialogWrapperType\n",
      "type": "registry:ui",
      "target": "components/ui/alert-dialog.types.ts"
    },
    {
      "path": "alert-dialog/index.ts",
      "content": "export * from './alert-dialog'\nexport * from './alert-dialog.types'\nexport * from './alert-dialog.hook'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/alert-dialog"
}