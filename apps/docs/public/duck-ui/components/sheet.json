{
  "name": "sheet",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "sheet",
  "files": [
    {
      "path": "sheet/index.ts",
      "content": "export * from './sheet'\nexport * from './sheet.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "sheet/sheet.constants.ts",
      "content": "import { cva } from 'class-variance-authority'\n\n/**\n * Variants for the sheet component\n */\nexport const sheetVariants = cva(\n  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\n  {\n    variants: {\n      side: {\n        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',\n        bottom:\n          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',\n        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',\n        right:\n          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',\n      },\n    },\n    defaultVariants: {\n      side: 'right',\n    },\n  }\n)\n",
      "type": "registry:ui",
      "target": "components/ui/sheet.constants.ts"
    },
    {
      "path": "sheet/sheet.tsx",
      "content": "'use client'\n\nimport * as SheetPrimitive from '@radix-ui/react-dialog'\nimport { X } from 'lucide-react'\nimport * as React from 'react'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { sheetVariants } from './sheet.constants'\nimport { SheetContentProps, SheetWrapperProps } from './sheet.types'\n\n/**\n * The `Sheet` component is a wrapper around the `SheetPrimitive.Root` component.\n * It serves as the root element for a sheet component, which is typically used\n * to display content in a modal or drawer-like interface.\n */\nconst Sheet = SheetPrimitive.Root\n\n/**\n * A trigger component for the Sheet component.\n *\n * This component is used to open or activate the Sheet component.\n * It is a part of the SheetPrimitive library.\n */\nconst SheetTrigger = SheetPrimitive.Trigger\n\n/**\n * A component that provides a close button for the Sheet component.\n * This is a wrapper around the `SheetPrimitive.Close` component.\n */\nconst SheetClose = SheetPrimitive.Close\n\n/**\n * A portal component for rendering the Sheet component outside of its parent hierarchy.\n * This is useful for rendering the Sheet in a different part of the DOM tree, such as at the root level.\n */\nconst SheetPortal = SheetPrimitive.Portal\n\n/**\n * `SheetOverlay` is a React component that renders an overlay for a sheet component.\n * It uses `React.forwardRef` to pass a ref to the underlying `SheetPrimitive.Overlay` component.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {string} [props.className] - Additional class names to apply to the overlay.\n * @param {React.Ref} ref - The ref to be forwarded to the `SheetPrimitive.Overlay` component.\n *\n * @returns {JSX.Element} The rendered overlay component.\n */\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\n/**\n * `SheetContent` is a React component that renders the content of a sheet.\n * It uses `React.forwardRef` to pass a ref to the underlying `SheetPrimitive.Content` component.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {string} [props.side='right'] - The side of the sheet where the content will appear. Defaults to 'right'.\n * @param {string} [props.className] - Additional class names to apply to the content.\n * @param {React.ReactNode} props.children - The content to be rendered inside the sheet.\n * @param {React.Ref} ref - The ref to be forwarded to the `SheetPrimitive.Content` component.\n *\n * @returns {JSX.Element} The rendered sheet content.\n */\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = 'right', className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className='absolute right-4 top-4 rounded-xs opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary'>\n        <X className='h-4 w-4' />\n        <span className='sr-only'>Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\n/**\n * SheetHeader component renders a header section for a sheet.\n * It supports additional class names and props to customize the\n * appearance and behavior of the header. The component uses a\n * flexbox layout to arrange its children in a vertical column\n * and applies responsive text alignment.\n *\n * @param {object} props - The properties passed to the component.\n * @param {string} props.className - Additional class names for styling.\n *\n * @returns {JSX.Element} The rendered SheetHeader component.\n */\nfunction SheetHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\n  return (\n    <div\n      className={cn(\n        'flex flex-col space-y-2 text-center sm:text-left',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\nSheetHeader.displayName = 'SheetHeader'\n\n/**\n * SheetFooter component renders a footer section for a sheet.\n * It supports additional class names and props to customize the\n * appearance and behavior of the footer. The component uses a\n * flexbox layout to arrange its children in a column on small\n * screens and in a row with space between items on larger screens.\n *\n * @param {object} props - The properties passed to the component.\n * @param {string} props.className - Additional class names for styling.\n *\n * @returns {JSX.Element} The rendered SheetFooter component.\n */\nfunction SheetFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\n  return (\n    <div\n      className={cn(\n        'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\nSheetFooter.displayName = 'SheetFooter'\n\n/**\n * `SheetTitle` is a React component that forwards its ref to the `SheetPrimitive.Title` component.\n * It applies additional class names for styling and accepts all props that `SheetPrimitive.Title` accepts.\n *\n * @param {string} className - Additional class names to apply to the component.\n * @param {React.Ref} ref - A ref to be forwarded to the `SheetPrimitive.Title` component.\n * @param {React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>} props - All other props to be passed to the `SheetPrimitive.Title` component.\n *\n * @returns {JSX.Element} The rendered `SheetPrimitive.Title` component with forwarded ref and applied class names.\n */\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold text-foreground', className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\n/**\n * `SheetDescription` is a React forwardRef component that wraps around `SheetPrimitive.Description`.\n * It allows you to pass a `ref` and additional props to the `SheetPrimitive.Description` component.\n *\n * @param {string} className - Additional class names to apply to the component.\n * @param {React.Ref} ref - A ref to be forwarded to the `SheetPrimitive.Description` component.\n * @param {React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>} props - Additional props to be passed to the component.\n *\n * @returns {JSX.Element} A `SheetPrimitive.Description` component with forwarded ref and additional props.\n */\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\n/**\n * `SheetWrapper` is a React component that wraps a `Sheet` component and renders children elements\n * conditionally based on the screen size. If the screen width is 768px or greater, a `Drawer` is rendered; otherwise,\n * a `Sheet` is rendered.\n * @param {SheetWrapperProps} props - The properties passed to the component.\n * @returns {JSX.Element} The rendered `Drawer` or `Sheet` component.\n */\nfunction SheetWrapper({\n  trigger,\n  content,\n  duckHook,\n  ...props\n}: SheetWrapperProps): JSX.Element {\n  const {\n    className: subContentClassName,\n    children: subcontentChildren,\n    _header,\n    _footer,\n    ...subContentProps\n  } = content\n  const {\n    className: subHeaderClassName,\n    _description: subDescription,\n    _title: subTitle,\n    ...subHeaderProps\n  } = _header ?? {}\n  const {\n    className: subFooterClassName,\n    _submit: _subSubmit,\n    _cancel: _subCancel,\n    ...subFooterProps\n  } = _footer ?? {}\n\n  return (\n    <Sheet\n      open={duckHook?.state.shape}\n      onOpenChange={duckHook?.handleOpenChange}\n      {...props}\n    >\n      <SheetTrigger {...trigger} />\n      <SheetContent\n        className={cn('flex flex-col w-full h-full', subContentClassName)}\n        {...subContentProps}\n      >\n        <div data-role-wrapper className='flex flex-col gap-4 w-full h-full'>\n          {_header && (\n            <SheetHeader {...subHeaderProps}>\n              {subHeaderProps.children ? (\n                subHeaderProps.children\n              ) : (\n                <>\n                  <SheetTitle {...subTitle} />\n                  <SheetDescription {...subDescription} />\n                </>\n              )}\n            </SheetHeader>\n          )}\n          {subcontentChildren}\n          <SheetFooter\n            className={cn('gap-2', subFooterClassName)}\n            {...subFooterProps}\n          >\n            <SheetClose asChild {..._subCancel} />\n            <div\n              {..._subSubmit}\n              className={cn('ml-0', _subSubmit?.className)}\n              onClick={(e) => {\n                duckHook?.setState({ shape: false, alert: false })\n                _subSubmit?.onClick?.(e)\n              }}\n            />\n          </SheetFooter>\n        </div>\n      </SheetContent>\n    </Sheet>\n  )\n}\nSheetWrapper.displayName = 'SheetWrapper'\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  SheetWrapper,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/sheet.tsx"
    },
    {
      "path": "sheet/sheet.types.ts",
      "content": "import * as SheetPrimitive from '@radix-ui/react-dialog'\nimport { VariantProps } from 'class-variance-authority'\nimport { UseDuckAlertReturnType } from '../alert-dialog'\nimport { SheetClose, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle, SheetTrigger } from './sheet'\nimport { sheetVariants } from './sheet.constants'\n\n/**\n * Content of the sheet\n * @see https://www.radix-ui.com/docs/primitives/components/sheet\n */\nexport interface SheetContentProps\n    extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> { }\n\n/**\n * A wrapper component for the [Radix UI Sheet](https://www.radix-ui.com/docs/primitives/components/sheet)\n */\nexport type SheetWrapperProps = {\n    trigger?: React.ComponentPropsWithoutRef<typeof SheetTrigger>\n    content: Partial<React.ComponentPropsWithoutRef<typeof SheetContent>> & {\n        _header?: React.ComponentPropsWithoutRef<typeof SheetHeader> & {\n            _title?: React.ComponentPropsWithoutRef<typeof SheetTitle>\n            _description?: React.ComponentPropsWithoutRef<typeof SheetDescription>\n        }\n        _footer?: React.ComponentPropsWithoutRef<typeof SheetFooter> & {\n            _cancel?: React.ComponentPropsWithoutRef<typeof SheetClose>\n            _submit?: React.HTMLProps<HTMLDivElement>\n        }\n    }\n    duckHook?: UseDuckAlertReturnType\n} & React.ComponentPropsWithoutRef<typeof SheetPrimitive.Root>\n",
      "type": "registry:ui",
      "target": "components/ui/sheet.types.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/sheet"
}
