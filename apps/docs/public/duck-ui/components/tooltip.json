{
  "name": "tooltip",
  "type": "registry:ui",
  "dependencies": [""],
  "registryDependencies": ["slot"],
  "root_folder": "tooltip",
  "files": [
    {
      "path": "tooltip/index.ts",
      "content": "export * from './tooltip'\nexport * from './tooltip.constants'\nexport * from './tooltip.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "tooltip/tooltip.constants.ts",
      "content": "import { cva } from 'class-variance-authority'\n\nexport const tooltipVariants = cva(\n  [\n    // Base styles\n    'flex z-50 absolute rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md overflow-hidden',\n    // Animation base\n    'select-none will-change-[transform,opacity]',\n    'animate-in duration-[150ms] ease-in-out',\n    'fade-in-0 zoom-in-95',\n  ].join(' '),\n  {\n    variants: {\n      variant: {\n        default: [\n          'opacity-0 scale-95 pointer-events-none',\n          'group-hover/tooltip:opacity-100 group-hover/tooltip:scale-100',\n          'group-focus-within/tooltip:opacity-100 group-focus-within/tooltip:scale-100',\n          'group-hover/tooltip:transition-all group-hover/tooltip:duration-200 group-hover/tooltip:ease-[cubic-bezier(0.16,1,0.3,1)]',\n          'group-hover/tooltip:transition-delay-[var(--tooltip-delay)]',\n          'group-focus-within/tooltip:transition-all group-focus-within/tooltip:duration-200 group-focus-within/tooltip:ease-[cubic-bezier(0.16,1,0.3,1)]',\n          'group-focus-within/tooltip:transition-delay-[var(--tooltip-delay)]',\n        ],\n        custom: '',\n      },\n      position: {\n        top: [\n          'bottom-[calc(100%+var(--side-offset))] left-1/2 -translate-x-1/2',\n          'origin-[var(--radix-tooltip-content-transform-origin)]',\n          'data-[side=top]:slide-in-from-bottom-2',\n        ],\n        bottom: [\n          'top-[calc(100%+var(--side-offset))] left-1/2 -translate-x-1/2',\n          'origin-[var(--radix-tooltip-content-transform-origin)]',\n          'data-[side=bottom]:slide-in-from-top-2',\n        ],\n        left: [\n          'right-[calc(100%+var(--side-offset))] top-1/2 -translate-y-1/2',\n          'origin-[var(--radix-tooltip-content-transform-origin)]',\n          'data-[side=left]:slide-in-from-right-2',\n        ],\n        right: [\n          'left-[calc(100%+var(--side-offset))] top-1/2 -translate-y-1/2',\n          'origin-[var(--radix-tooltip-content-transform-origin)]',\n          'data-[side=right]:slide-in-from-left-2',\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      position: 'top',\n    },\n  },\n)\n\nexport const tooltipArrowVariants = cva(\n  [\n    'absolute w-2 h-2 bg-popover rotate-45 border',\n    'transition-all duration-200 ease-[cubic-bezier(0.16,1,0.3,1)]',\n  ].join(' '),\n  {\n    variants: {\n      position: {\n        top: ['bottom-[-4px] left-1/2 -translate-x-1/2', 'border-r border-b'],\n        bottom: ['top-[-4px] left-1/2 -translate-x-1/2', 'border-l border-t'],\n        left: ['right-[-4px] top-1/2 -translate-y-1/2', 'border-t border-r'],\n        right: ['left-[-4px] top-1/2 -translate-y-1/2', 'border-b border-l'],\n      },\n    },\n    defaultVariants: {\n      position: 'top',\n    },\n  },\n)\n",
      "type": "registry:ui",
      "target": "components/ui/tooltip.constants.ts"
    },
    {
      "path": "tooltip/tooltip.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { cn } from '@gentleduck/libs/cn'\nimport { tooltipVariants, tooltipArrowVariants } from './tooltip.constants'\nimport type { TooltipContentProps, TooltipProps } from './tooltip.types'\n\n/**\n * Renders a Tooltip component that displays a tooltip on hover or focus.\n *\n * @param {TooltipProps} props - Additional props to pass to the tooltip container.\n * @param {React.ReactNode} [props.children] - The content to be wrapped by the tooltip.\n * @param {number} [props.delayDuration=500] - The delay in milliseconds before the tooltip appears.\n * @param {number} [pros.sideOffset=4] - Offset from the side of the tooltip trigger.\n * @param {string} [pros.size] - Optional size of the tooltip.\n * @param {string} [props.className] - Additional classes to apply to the tooltip.\n * @param {boolean} [props.asChild] - If true, passes the content as a child component.\n * @param {React.HTMLProps<HTMLDivElement>} [...props] - Additional props to pass to the tooltip container.\n * @returns {JSX.Element} The rendered tooltip component.\n */\n\nexport function Tooltip({\n  children,\n  delayDuration = 500,\n  sideOffset = 4,\n  size,\n  className,\n  asChild,\n  ...props\n}: TooltipProps): JSX.Element {\n  return (\n    <div\n      className={cn(\n        'relative inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 font-regular cursor-pointer',\n        'group/tooltip flex w-full'\n      )}\n      style={\n        {\n          '--tooltip-delay': `${delayDuration}ms`,\n          '--side-offset': `${sideOffset}px`,\n        } as React.CSSProperties\n      }\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport function TooltipContent({\n  position,\n  variant,\n  className,\n  showArrow = false,\n  children,\n  ...props\n}: TooltipContentProps) {\n  return (\n    <div\n      role='tooltip'\n      className={cn(tooltipVariants({ variant, position }), className)}\n      data-side={position}\n      {...props}\n    >\n      {children}\n      {showArrow && (\n        <span\n          className={cn(tooltipArrowVariants({ position }))}\n          aria-hidden='true'\n        />\n      )}\n    </div>\n  )\n}\n\nTooltip.displayName = 'Tooltip'\n",
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx"
    },
    {
      "path": "tooltip/tooltip.types.ts",
      "content": "import { VariantProps } from 'class-variance-authority'\nimport { tooltipVariants } from './tooltip.constants'\n\n/**\n * Props for the Tooltip component.\n *\n * This interface extends the standard HTML div properties (except for the \"content\" prop)\n * and adds additional tooltip-specific properties.\n */\nexport interface TooltipProps\n  extends Omit<React.HTMLProps<HTMLDivElement>, 'content'> {\n  /** If true, the tooltip will render its child element directly, inheriting its styles. */\n  asChild?: boolean\n  /** The delay in milliseconds before the tooltip is shown after hover or focus. */\n  delayDuration?: number\n  /** The offset distance in pixels between the tooltip and the trigger element. */\n  sideOffset?: number\n}\n\n/**\n * Props for the TooltipContent component.\n *\n * This interface extends the standard HTML div properties and includes variant properties\n * from the tooltipVariants configuration, allowing for style customization.\n */\nexport interface TooltipContentProps\n  extends React.HTMLProps<HTMLDivElement>,\n    VariantProps<typeof tooltipVariants> {\n  /** Determines whether an arrow should be rendered on the tooltip to point at the trigger element.*/\n  showArrow?: boolean\n}\n",
      "type": "registry:ui",
      "target": "components/ui/tooltip.types.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/tooltip"
}
