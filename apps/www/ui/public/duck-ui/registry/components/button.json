{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "@ahmedayob/duck-shortcut"
  ],
  "registryDependencies": [
    "tooltip",
    "command",
    "badge"
  ],
  "root_folder": "registry-ui-components/button",
  "files": [
    {
      "path": "registry-ui-components/button/button.constants.ts",
      "content": "import { cva } from 'class-variance-authority'\n\nexport const buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline:\n          'border border-input text-accent-foreground bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n        expand_icon: 'group relative text-primary-foreground bg-primary hover:bg-primary/90',\n        ring_hover:\n          'bg-primary text-primary-foreground transition-all duration-300 hover:bg-primary/90 hover:ring-2 hover:ring-primary/90 hover:ring-offset-2',\n        shine:\n          'text-primary-foreground animate-shine bg-gradient-to-r from-primary via-primary/75 to-primary bg-[length:400%_100%] ',\n        gooey_right:\n          'text-primary-foreground relative bg-primary z-0 overflow-hidden transition-all duration-500 before:absolute before:inset-0 before:-z-10 before:translate-x-[150%] before:translate-y-[150%] before:scale-[2.5] before:rounded-[100%] before:bg-gradient-to-r from-zinc-400 before:transition-transform before:duration-1000  hover:before:translate-x-[0%] hover:before:translate-y-[0%] ',\n        gooey_left:\n          'text-primary-foreground relative bg-primary z-0 overflow-hidden transition-all duration-500 after:absolute after:inset-0 after:-z-10 after:translate-x-[-150%] after:translate-y-[150%] after:scale-[2.5] after:rounded-[100%] after:bg-gradient-to-l from-zinc-400 after:transition-transform after:duration-1000  hover:after:translate-x-[0%] hover:after:translate-y-[0%] ',\n        link_hover1:\n          'relative after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-left after:scale-x-100 hover:after:origin-bottom-right hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-300',\n        link_hover2:\n          'relative after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-right after:scale-x-0 hover:after:origin-bottom-left hover:after:scale-x-100 after:transition-transform after:ease-in-out after:duration-300',\n        nothing: '',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10 p-0',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/button/button.tsx",
      "content": "import * as React from 'react'\n\nimport { Slot } from '@radix-ui/react-slot'\n\nimport { cn } from '@/lib'\nimport { ButtonProps } from './button.types'\nimport { buttonVariants } from './button.constants'\nimport { Badge } from '@/registry/default/ui/badge'\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/registry/default/ui/tooltip'\nimport { CommandShortcut } from '@/registry/default/ui/command'\n\nimport { Loader } from 'lucide-react'\nimport { useDuckShortcut } from '@ahmedayob/duck-shortcut'\nimport { toast } from 'sonner'\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isCollapsed = false,\n      size = 'default',\n      variant = 'default',\n      className,\n      label,\n      children,\n      icon,\n      secondIcon,\n      loading = false,\n      animationIcon,\n      command,\n      ...props\n    }: ButtonProps,\n    ref: React.ForwardedRef<HTMLButtonElement> | undefined\n  ) => {\n    const {\n      className: labelClassName,\n      variant: labelVariant,\n      size: labelSize,\n      side,\n      showLabel,\n      showCommand,\n      delayDuration = 0,\n      ...labelProps\n    } = label || {}\n    const Component = asChild ? Slot : 'button'\n    const { children: Icon, ...iconProps } = icon ?? {}\n    const { children: SecondIcon, ...secondIconProps } = secondIcon ?? {}\n    const { icon: animationIconChildren, iconPlacement = 'right' } = animationIcon ?? {}\n    const { children: AnimationIcon, ...animationIconProps } = animationIconChildren ?? {}\n    const {\n      className: commandClassName,\n      variant: commandVariant,\n      size: commandSize,\n      label: commandLabel,\n      key,\n      action,\n      state,\n      ...commandProps\n    } = command ?? {}\n\n    const fn = () => toast.info('NOTE: handling command shortcut without action')\n    //NOTE: handling command shortcut\n    useDuckShortcut({ keys: [key ?? 'k'], onKeysPressed: action ?? fn }, [state])\n\n    // Handle keyboard shortcut Badge\n    const CommandComponent = () => (\n      <CommandShortcut className=\"text-[.8rem]\">\n        <Badge\n          variant={commandVariant || 'secondary'}\n          size={commandSize || 'sm'}\n          className={cn('p-0 px-2 text-bold rounded-sm text-accent-foreground', commandClassName)}\n          {...commandProps}\n        >\n          {commandLabel}\n        </Badge>\n      </CommandShortcut>\n    )\n\n    return (\n      <Tooltip delayDuration={delayDuration}>\n        <TooltipTrigger asChild>\n          <Component\n            ref={ref}\n            className={cn(\n              buttonVariants({\n                variant: variant || 'ghost',\n                size: size ? (isCollapsed ? 'icon' : size) : isCollapsed ? 'icon' : 'default',\n                className: cn('relative justify-center', className),\n              })\n            )}\n            disabled={loading}\n            {...props}\n          >\n            {AnimationIcon && iconPlacement === 'left' && (\n              <div className=\"w-0 translate-x-[0%] pr-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-100 group-hover:pr-2 group-hover:opacity-100\">\n                <AnimationIcon {...animationIconProps} />\n              </div>\n            )}\n            <div className=\"flex items-center gap-2\">\n              {!loading ? Icon && !!icon && !loading && <Icon {...iconProps} /> : <Loader className=\"animate-spin\" />}\n              {!isCollapsed && children}\n              {!isCollapsed && command?.label && !showCommand && <CommandComponent />}\n\n              {!isCollapsed && label && !showLabel && (\n                <Badge\n                  variant={labelVariant ?? 'secondary'}\n                  size={labelSize ?? 'default'}\n                  className={cn('text-[.8rem] py-0 rounded-md px-1', labelClassName)}\n                  {...labelProps}\n                />\n              )}\n              {!isCollapsed && SecondIcon && <SecondIcon {...secondIconProps} />}\n            </div>\n            {AnimationIcon && iconPlacement === 'right' && (\n              <div className=\"w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100\">\n                <AnimationIcon {...animationIconProps} />\n              </div>\n            )}\n          </Component>\n        </TooltipTrigger>\n        {(isCollapsed || showLabel) && label && (\n          <TooltipContent\n            {...labelProps}\n            className={cn('flex items-center gap-2 z-50 justify-start', labelClassName)}\n            side={side || 'right'}\n          >\n            {command?.label && showCommand && <CommandComponent />}\n            {showLabel && (\n              <span\n                className={cn('ml-auto text-[.9rem]', !showLabel && 'text-muted-foreground')}\n                {...labelProps}\n              />\n            )}\n          </TooltipContent>\n        )}\n      </Tooltip>\n    )\n  }\n)\n\nButton.displayName = 'Button'\n\nexport { Button }\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/button/button.types.ts",
      "content": "import * as TooltipPrimitive from '@radix-ui/react-tooltip'\nimport { IconProps } from '@radix-ui/react-icons/dist/types'\nimport { VariantProps } from 'class-variance-authority'\nimport { LucideIcon } from 'lucide-react'\nimport { buttonVariants } from './button.constants'\nimport { Badge } from '@/registry/default/ui'\n\nexport type IconType = {\n  children: LucideIcon\n} & Omit<IconProps, 'children'> &\n  Omit<React.RefAttributes<SVGSVGElement>, 'children'>\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isCollapsed?: boolean\n  loading?: boolean\n  icon?: IconType\n  secondIcon?: IconType\n  label?: LabelType\n  command?: CommandType\n  animationIcon?: {\n    icon?: IconType\n    iconPlacement?: 'left' | 'right'\n  }\n}\n\nexport interface LabelType\n  extends Partial<React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>>,\n    Partial<React.ComponentPropsWithoutRef<typeof Badge>> {\n  showCommand?: boolean\n  showLabel?: boolean\n  delayDuration?: number\n}\n\nexport type CommandType<T = unknown> = {\n  label?: string\n  key: string\n  state?: T\n  action?: <T>(arg?: T) => void\n} & Partial<React.ComponentPropsWithoutRef<typeof Badge>>\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/button/index.ts",
      "content": "export * from './button'\nexport * from './button.types'\nexport * from './button.constants'\n",
      "type": "registry:ui"
    }
  ]
}