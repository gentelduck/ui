{
  "name": "upload-4",
  "type": "registry:example",
  "registryDependencies": [
    "upload"
  ],
  "root_folder": "registry-examples-components/upload",
  "files": [
    {
      "path": "registry-examples-components/upload/upload-4.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport {\n  UploadAdvancedProvider,\n  UploadAdnvacedContent,\n  UploadAdvancedHeader,\n  FolderType,\n  FileType,\n} from '@/registry/registry-ui-components/upload'\nimport { uuidv7 } from 'uuidv7'\n\nexport default function Upload4Demo() {\n  return (\n    <>\n      <UploadAdvancedProvider\n        attachments={attachments}\n        currentBucket=\"wildduck_attachments\"\n      >\n        <UploadAdvancedHeader />\n        <UploadAdnvacedContent />\n      </UploadAdvancedProvider>\n    </>\n  )\n}\n\n// -----------------------------------------------------------------------------------------------\n//NOTE: Generator for dumby data.\nimport { randFileName, randFileType, randNumber, randSentence, randUuid } from '@ngneat/falso'\n\nconst generateFile = (): FileType => {\n  const fileName = randFileName()\n  const fileType = randFileType()\n  return {\n    id: uuidv7(),\n    name: fileName,\n    size: '1MB',\n    file: new File([], fileName),\n    type: fileType,\n    url: '',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    treeLevel: 1,\n  }\n}\n\nconst MAX_DEPTH = 3 // Set a maximum depth for folder nesting\n\nconst generateFolder = (level: number): FolderType => {\n  const folderName = randSentence() // Generate a random folder name\n  const numFiles = randNumber({ min: 1, max: 5 }) // Random number of files\n  const numNestedFolders = level < MAX_DEPTH ? randNumber({ min: 1, max: 3 }) : 0 // Limit nested folders based on depth\n\n  const content: (FileType | FolderType)[] = []\n\n  // Generate files\n  for (let i = 0; i < numFiles; i++) {\n    content.push(generateFile())\n  }\n\n  // Generate nested folders if not at max depth\n  for (let i = 0; i < numNestedFolders; i++) {\n    content.push(generateFolder(level + 1))\n  }\n\n  return {\n    id: randUuid(),\n    name: folderName,\n    files: content.length,\n    content,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    treeLevel: level,\n  }\n}\n\nconst attachments: FolderType[] = Array.from({ length: 10 }, (_, i) => generateFolder(i + 1))\n",
      "type": "registry:example"
    }
  ]
}