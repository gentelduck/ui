{
  "name": "upload",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "alert-dialog",
    "input",
    "context-menu",
    "scroll-area",
    "button"
  ],
  "root_folder": "registry-ui-components/upload",
  "files": [
    {
      "path": "registry-ui-components/upload/index.ts",
      "content": "export * from \"./upload\";\nexport * from \"./upload.lib\";\nexport * from \"./upload.constants\";\nexport * from \"./upload.types\";\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload-sonner.tsx",
      "content": "import { Progress } from '@/registry/default/ui'\nimport { Check, CheckCircle, CheckCircleIcon, CircleCheck, Loader, Loader2 } from 'lucide-react'\nimport { toast } from 'sonner'\nimport { Button } from '../button'\n\nexport default function SonnerUpload() {\n  const uploadPromise = (files: number, toastId: number) => {\n    toast.loading(\n      <UploadContent\n        progress={0}\n        files={files}\n      />,\n      {\n        duration: 400000,\n        id: toastId,\n      }\n    )\n\n    return new Promise(resolve => {\n      let currentProgress = 0\n\n      toast.loading(\n        <UploadContent\n          progress={currentProgress}\n          files={files}\n        />,\n        {\n          duration: 400000,\n          id: toastId,\n        }\n      )\n\n      const intervalId = setInterval(() => {\n        currentProgress += Math.floor(Math.random() * 10) + 1 // Increment progress by a random value\n        if (currentProgress > 100) currentProgress = 100 // Ensure progress does not exceed 100%\n\n        if (currentProgress >= 100) {\n          clearInterval(intervalId) // Clear the interval once upload is complete\n          resolve({ progress: currentProgress, message: 'Upload complete', files: 3, toastId }) // Resolve the promise when progress reaches 100\n        }\n\n        toast.loading(\n          <UploadContent\n            progress={currentProgress}\n            files={files}\n          />,\n          {\n            id: toastId,\n          }\n        )\n      }, 20) // Adjust the interval time as needed\n    })\n  }\n\n  const UploadContent = ({ progress, files }: { progress: number; files: number }) => (\n    <div className=\"flex gap-3 w-full\">\n      {progress >= 100 ? (\n        <CircleCheck\n          className=\"fill-foreground [&_path]:fill-red-500\"\n          size={16}\n        />\n      ) : (\n        <Loader\n          className=\"animate-spin text-foreground-muted mt-0.5 \"\n          size={16}\n        />\n      )}\n      <div className=\"flex flex-col gap-2 w-full\">\n        <div className=\"flex w-full justify-between\">\n          <p className=\"text-foreground text-sm\">\n            {progress >= 100 ? `Upload complete` : files ? `Uploading ${files} files...` : `Uploading...`}\n          </p>\n          <p className=\"text-foreground-light text-sm font-mono\">{`${progress}%`}</p>\n        </div>\n        <Progress\n          value={progress}\n          className=\"w-full h-1\"\n        />\n        <small className=\"text-foreground-muted text-xs\">Please do not close the browser until completed</small>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Button\n        variant=\"default\"\n        onClick={async () => {\n          // random id\n          const toastId = Math.random()\n          const max = 20 // specify the maximum value\n          const files = Math.floor(Math.random() * max)\n          try {\n            const promise = await uploadPromise(files, toastId)\n            toast.success(\n              <UploadContent\n                progress={promise.progress}\n                files={promise.files}\n              />,\n              {\n                duration: 2000,\n                id: toastId,\n              }\n            )\n          } catch (error) {}\n        }}\n      >\n        Start upload\n      </Button>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.constants.tsx",
      "content": "import { File, FileAudio, FileImage, FileText, FileVideo } from 'lucide-react'\n\nexport enum FileType {\n  Audio = 'audio',\n  Text = 'text',\n  Image = 'image',\n  Video = 'video',\n  Pdf = 'pdf',\n  Unknown = 'unknown',\n}\n\nexport const fileTypeIcons = {\n  [FileType.Audio]: <FileAudio className=\"w-8 h-8\" />,\n  [FileType.Text]: <FileText className=\"w-8 h-8\" />,\n  [FileType.Image]: <FileImage className=\"w-8 h-8\" />,\n  [FileType.Video]: <FileVideo className=\"w-8 h-8\" />,\n  [FileType.Pdf]: <FileText className=\"w-8 h-8\" />,\n  [FileType.Unknown]: <File className=\"w-8 h-8\" />,\n}\n\n// NOTE: 10MB\nexport const MAX_SIZE = 10 * 1024 * 1024\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.lib.tsx",
      "content": "import { toast } from 'sonner'\nimport { FileType, MAX_SIZE } from './upload.constants'\nimport {\n  AttachmentType,\n  FolderType,\n  HandleAttachmentProps,\n  UploadFilesArgs,\n  UploadPromiseArgs,\n  UploadPromiseReturn,\n} from './upload.types'\nimport { uuidv7 } from 'uuidv7'\nimport { UploadSonnerContent } from './upload'\n\nexport const uploadPromise = ({ files, toastId }: UploadPromiseArgs): Promise<UploadPromiseReturn> => {\n  return new Promise(resolve => {\n    let currentProgress = 0\n    const remainingTime = getRemainingTime(currentProgress, 100)\n\n    // Show initial toast loading message\n    toast.loading(\n      <UploadSonnerContent\n        progress={currentProgress}\n        remainingTime={remainingTime}\n        files={files}\n      />,\n      { id: toastId }\n    )\n\n    // Simulate progress update with interval\n    const intervalId = setInterval(() => {\n      currentProgress += Math.floor(Math.random() * 10) + 1\n      if (currentProgress > 100) currentProgress = 100\n\n      // Update toast content with the new progress and remaining time\n      toast.loading(\n        <UploadSonnerContent\n          progress={currentProgress}\n          remainingTime={remainingTime}\n          files={files}\n        />,\n        { id: toastId }\n      )\n\n      // Resolve the promise once progress reaches 100%\n      if (currentProgress >= 100) {\n        clearInterval(intervalId)\n        resolve({ progress: currentProgress, files, remainingTime })\n      }\n    }, 200)\n  })\n}\n\n// Helper function to calculate remaining time\nexport function getRemainingTime(currentProgress: number, maxProgress: number) {\n  const progressPercentage = (currentProgress / maxProgress) * 100\n  const calculatedRemainingTime = 200 - progressPercentage * 2\n  return calculatedRemainingTime > 0 ? calculatedRemainingTime : 0\n}\n\nexport async function uploadFiles(props: UploadFilesArgs) {\n  const { e, selectedFolder, setSelectedFolder, setAttachments } = props\n\n  try {\n    const files = e.currentTarget.files\n\n    if (!files) return toast.error('Please select a file')\n\n    const newAttachments: AttachmentType[] = []\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n\n      if (file.size > MAX_SIZE) {\n        toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`)\n        continue // Skip this file and continue with the next\n      }\n\n      const attachment: AttachmentType = {\n        id: uuidv7(),\n        file: file,\n        name: file.name,\n        url: null,\n        type: file.type,\n        size: file.size.toString(),\n      }\n\n      newAttachments.push(attachment)\n    }\n\n    // random id\n    const toastId = Math.random()\n\n    // Upload promise\n    const promise = await uploadPromise({ files: files.length, toastId })\n\n    // Show upload progress toast\n    promise &&\n      toast.success(`Successfully Uploaded ${files.length} file${files.length > 1 ? 's' : ''}`, {\n        duration: 2000,\n        id: toastId,\n      })\n\n    // After the upload is done, update the state\n    if (selectedFolder.length > 0) {\n      setSelectedFolder(old =>\n        old.map(item =>\n          item.id === selectedFolder[0].id\n            ? {\n                ...item,\n                files: (item as FolderType).files + newAttachments.length,\n                content: [...selectedFolder[0]?.content, ...newAttachments],\n              }\n            : item\n        )\n      )\n    }\n\n    setAttachments(old => {\n      if (selectedFolder.length > 0) {\n        return old.map(item => {\n          return item.id === selectedFolder[0].id\n            ? {\n                ...item,\n                files: (item as FolderType).files + newAttachments.length,\n                content: [...selectedFolder[0]?.content, ...newAttachments],\n              }\n            : item\n        })\n      }\n      return [...old, ...newAttachments]\n    })\n\n    // Clear the input\n    e.target.value = ''\n  } catch (error) {\n    console.log(error)\n    toast.error('Upload failed. Please try again.')\n  }\n}\n\nexport function formatTime(seconds: number) {\n  const days = Math.floor(seconds / (24 * 3600))\n  seconds %= 24 * 3600\n  const hours = Math.floor(seconds / 3600)\n  seconds %= 3600\n  const minutes = Math.floor(seconds / 60)\n  seconds = Math.floor(seconds % 60)\n\n  if (days > 0) return `${days}d `\n  if (hours > 0) return `${hours}h `\n  if (minutes > 0) return `${minutes}m `\n  return `${seconds}s`\n}\n\nexport const getFileType = (file: Blob | null): FileType => {\n  if (!file) return FileType.Unknown\n  if (file.type.startsWith('audio/')) return FileType.Audio\n  if (file.type.startsWith('text/')) return FileType.Text\n  if (file.type.startsWith('image/')) return FileType.Image\n  if (file.type.startsWith('video/')) return FileType.Video\n  if (file.type.startsWith('application/pdf')) return FileType.Pdf\n  return FileType.Unknown\n}\n\nexport const handleAttachment = ({ e, setAttachmentsState }: HandleAttachmentProps) => {\n  const files = e.currentTarget.files\n\n  if (!files) return toast.error('Please select a file')\n\n  const newAttachments: AttachmentType[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i]\n\n    // if (file.size > 10 * 1024 * 1024) {\n    //   toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`)\n    //   continue // Skip this file and continue with the next\n    // }\n\n    const attachment: AttachmentType = {\n      id: uuidv7(),\n      file: file,\n      name: file.name,\n      url: null,\n      type: file.type,\n      size: file.size.toString(),\n    }\n\n    newAttachments.push(attachment)\n  }\n\n  console.log(newAttachments)\n  setAttachmentsState(prev => [...prev, ...newAttachments])\n  e.currentTarget.value = ''\n}\n\nexport const handleAdvancedAttachment = ({ e, setAttachmentsState }: HandleAttachmentProps) => {\n  const files = e.currentTarget.files\n\n  if (!files) return toast.error('Please select a file')\n\n  const newAttachments: AttachmentType[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i]\n\n    // if (file.size > 10 * 1024 * 1024) {\n    //   toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`)\n    //   continue // Skip this file and continue with the next\n    // }\n\n    const attachment: AttachmentType = {\n      id: uuidv7(),\n      file: file,\n      name: file.name,\n      url: null,\n      type: file.type,\n      size: file.size.toString(),\n    }\n\n    newAttachments.push(attachment)\n  }\n\n  console.log(newAttachments)\n  setAttachmentsState(prev => [...prev, ...newAttachments])\n  e.currentTarget.value = ''\n}\n\n/**\n * Deep merge two objects, recursively merging properties.\n * - Handles arrays, objects, and primitive values.\n * - Ensures immutability by not mutating the original target object.\n *\n * @param target - The target object.\n * @param source - The source object.\n * @returns A new object with merged properties.\n */\nexport const deepMerge = <T extends Record<string, any>>(target: T, source: Partial<T>): T => {\n  // Create a new object to avoid mutating the original target\n  const output = { ...target }\n\n  for (const key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      const targetValue = target[key]\n      const sourceValue = source[key]\n\n      // Check if both target and source are objects, and not null\n      if (isObject(targetValue) && isObject(sourceValue)) {\n        // Recursively merge the objects\n        output[key] = deepMerge(targetValue, sourceValue as Partial<T[Extract<keyof T, string>] & Record<string, any>>)\n      } else {\n        // Otherwise, directly assign the source value (includes arrays and primitives)\n        output[key] = sourceValue as T[Extract<keyof T, string>]\n      }\n    }\n  }\n\n  return output\n}\n\n/**\n * Helper function to check if a value is a plain object (and not an array or null).\n *\n * @param value - The value to check.\n * @returns Whether the value is a plain object.\n */\nconst isObject = (value: any): value is Record<string, any> => {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport {\n  AlertDialogSheet,\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n  DropdownMenuView,\n  Progress,\n} from '@/registry/default/ui'\nimport { ContextMenu, ContextMenuTrigger } from '@/registry/default/ui'\nimport { Input } from '@/registry/default/ui'\nimport { ScrollArea } from '@/registry/default/ui'\nimport { filesize } from 'filesize'\nimport { Button, buttonVariants } from '../button'\nimport { CircleCheck, Download, Ellipsis, Loader, Trash, Upload as UploadIcon } from 'lucide-react'\nimport {\n  AttachmentType,\n  FolderType,\n  SelectedFolderType,\n  UploadAdvancedContextType,\n  UploadContentProps,\n  UploadContextType,\n  UploadInputProps,\n  UploadItemProps,\n  UploadProps,\n  UploadtItemRemoveProps,\n  UploadTriggerProps,\n} from './upload.types'\nimport { fileTypeIcons } from './upload.constants'\nimport { formatTime, getFileType, handleAttachment, uploadFiles } from './upload.lib'\nimport { cn } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport { downloadAttachment } from '@/registry/default/ui/comment'\nimport { uuidv7 } from 'uuidv7'\n\nconst UploadContext = React.createContext<UploadContextType<AttachmentType> | null>(null)\n\nexport const useUploadContext = () => {\n  const context = React.useContext(UploadContext)\n  if (!context) {\n    throw new Error('useUploadContext must be used within an UploadProvider')\n  }\n  return context\n}\n\nexport const UploadProvider = ({ children }: { children: React.ReactNode }) => {\n  const [attachments, setAttachments] = React.useState<AttachmentType[]>([])\n  const [attachmentsState, setAttachmentsState] = React.useState<AttachmentType[]>([])\n\n  return (\n    <UploadContext.Provider\n      value={{\n        attachments,\n        setAttachments,\n        attachmentsState,\n        setAttachmentsState,\n      }}\n    >\n      {children}\n    </UploadContext.Provider>\n  )\n}\n\nconst UploadAdvancedContext = React.createContext<UploadAdvancedContextType<AttachmentType | FolderType> | null>(null)\n\nexport const useUploadAdvancedContext = () => {\n  const context = React.useContext(UploadAdvancedContext)\n  if (!context) {\n    throw new Error('useUploadContext must be used within an UploadProvider')\n  }\n  return context\n}\n\nexport const UploadAdvancedProvider = ({ children }: { children: React.ReactNode }) => {\n  const [selectedFolder, setSelectedFolder] = React.useState<SelectedFolderType[]>([])\n  const [attachments, setAttachments] = React.useState<(AttachmentType | FolderType)[]>([\n    {\n      id: '20e93625-a645-4cdd-baf1-c01ced27a85b',\n      name: 'wilduck-1.png',\n      size: '5MB',\n      file: new File([], ''),\n      url: '',\n      type: 'image/png',\n      treeLevel: 1,\n    },\n    {\n      id: 'hi',\n      name: 'duck-ui',\n      files: 1,\n      content: [\n        {\n          id: '20e93625-a645-4cdd-baf1-c01ced27a85b',\n          name: 'wilduck-2.png',\n          size: '1MB',\n          file: new File([], ''),\n          url: '',\n          type: 'image/png',\n          treeLevel: 2,\n        },\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      treeLevel: 1,\n    },\n  ])\n  const [attachmentsState, setAttachmentsState] = React.useState<(AttachmentType | FolderType)[]>([])\n\n  return (\n    <UploadAdvancedContext.Provider\n      value={{\n        attachments,\n        setAttachments,\n        attachmentsState,\n        setAttachmentsState,\n        selectedFolder,\n        setSelectedFolder,\n      }}\n    >\n      {children}\n    </UploadAdvancedContext.Provider>\n  )\n}\n\nexport const Upload = ({ children, trigger, content }: UploadProps) => {\n  const { setAttachments, attachmentsState, setAttachmentsState } = useUploadContext()\n  return (\n    <>\n      {children ? (\n        children\n      ) : (\n        <AlertDialogSheet\n          header={{\n            head: 'Upload',\n            description: 'upload your attahment here and submit.',\n          }}\n          actions={{\n            continue: () => {\n              setAttachments([])\n              setAttachmentsState([])\n            },\n          }}\n          footer={{\n            submit: {\n              children: (\n                <Button\n                  disabled={attachmentsState.length === 0}\n                  className=\"px-6\"\n                  onClick={() => {\n                    setAttachments(prev => [...prev, ...attachmentsState])\n                    setAttachmentsState([])\n                  }}\n                >\n                  Submit\n                </Button>\n              ),\n            },\n            cancel: {\n              children: (\n                <Button\n                  variant=\"outline\"\n                  className=\"px-6\"\n                >\n                  Cancel\n                </Button>\n              ),\n            },\n          }}\n          state={attachmentsState.length > 0}\n          trigger={{ children: trigger }}\n          content={{ children: content }}\n        />\n      )}\n    </>\n  )\n}\n\nexport const UploadTrigger = React.forwardRef<HTMLDivElement, UploadTriggerProps>(\n  ({ className, children, ...props }, ref) => (\n    <div\n      className={cn(className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n)\n\nexport const UploadInput = React.forwardRef<HTMLDivElement, UploadInputProps>(\n  ({ className, children, ...props }, ref) => {\n    const { setAttachmentsState } = useUploadContext()\n\n    return (\n      <div\n        className={cn(className)}\n        ref={ref}\n        {...props}\n      >\n        <ContextMenu>\n          <ContextMenuTrigger className=\"relative flex flex-col items-center justify-center w-full h-64 rounded-md border border-dashed border-border text-sm leading-5 transition-colors duration-100 ease-in-out hover:bg-muted/10\">\n            <div className=\"grid place-items-center gap-4\">\n              <UploadIcon className=\"size-[30px]\" />\n              <span>Click or Drag to Upload</span>\n            </div>\n            <Input\n              placeholder=\"Filter files...\"\n              type=\"file\"\n              className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n              multiple={true}\n              onChange={e => handleAttachment({ e, setAttachmentsState })}\n            />\n          </ContextMenuTrigger>\n        </ContextMenu>\n        <p className=\"mt-2 text-muted-foreground text-[.9rem]\">supports all types of files.</p>\n      </div>\n    )\n  }\n)\n\nexport const UploadContent = React.forwardRef<HTMLDivElement, UploadContentProps>(\n  ({ className, children, ...props }, ref) => {\n    const { attachmentsState, setAttachmentsState } = useUploadContext()\n\n    return (\n      <ScrollArea\n        className={cn('flex flex-col gap-2 max-h-[39ch] md:max-h-[43ch]', className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n        <div className=\"flex flex-col gap-2\">\n          {attachmentsState.map(attachment => {\n            return (\n              <UploadItem\n                key={attachment.id}\n                attachment={attachment}\n              >\n                <UploadtItemRemove\n                  className=\"absolute top-1/2 -translate-y-1/2 right-2\"\n                  onClick={() => {\n                    setAttachmentsState(prev => prev.filter(item => item.id !== attachment.id))\n                  }}\n                />\n              </UploadItem>\n            )\n          })}\n        </div>\n      </ScrollArea>\n    )\n  }\n)\n\nexport const UploadItem = React.forwardRef<HTMLDivElement, UploadItemProps>(\n  ({ attachment, children, className, ...props }, ref) => {\n    const fileType = getFileType(attachment.file)\n    return (\n      <div\n        className={cn('relative flex items-center gap-4 bg-secondary/20 rounded-md p-2', className)}\n        ref={ref}\n        {...props}\n      >\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative\">{fileTypeIcons[fileType]}</div>\n          <div className=\"grid items-start\">\n            <h3 className=\"inline-block text-[.9rem] truncate max-w-[200px]\">{attachment.name || 'Empty File'}</h3>\n            <p className=\"inline-block truncate text-semibold text-[.8rem] max-w-[300px]\">\n              {filesize(attachment.file ? +attachment.file.size : 0, {\n                round: 0,\n              })}\n            </p>\n          </div>\n        </div>\n        {children}\n      </div>\n    )\n  }\n)\n\nexport const UploadtItemRemove = React.forwardRef<HTMLDivElement, UploadtItemRemoveProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        className={cn(\n          'size-4 rounded-md focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 cursor-pointer',\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        <X className=\"w-4 h-4\" />\n      </div>\n    )\n  }\n)\n\nexport const UploadItemsPreview = () => {\n  const { attachments } = useUploadContext()\n\n  return attachments.length > 0 ? (\n    <div className=\"grid grid-cols-6 justify-start items-start place-content-start gap-2 w-full border border-border min-h-[400px] p-4 rounded-lg\">\n      {attachments.map(attachment => {\n        const fileType = getFileType(attachment.file)\n\n        // If the file is a File object, generate a URL for preview\n        const src = typeof attachment.file === 'string' ? attachment.file : URL.createObjectURL(attachment.file as Blob)\n\n        return (\n          <div\n            className={cn(\n              'relative bg-secondary/20 rounded-md overflow-hidden w-full flex flex-col place-content-center gap-4 h-[100px] border border-border'\n            )}\n          >\n            <div>\n              <div className=\"relative [&_svg]:size-12 [&_svg]:mx-auto w-full\">{fileTypeIcons[fileType]}</div>\n            </div>\n            <DropdownMenuView\n              trigger={{\n                icon: { children: Ellipsis, className: 'h-4 w-4 rounded' },\n                variant: 'outline',\n                size: 'icon',\n                className: 'h-4 w-6 absolute bottom-2 right-2',\n              }}\n              content={{\n                options: {\n                  itemType: 'label',\n                  optionsData: [\n                    {\n                      children: 'Download',\n                      icon: { children: Download, className: 'h-4 w-4 rounded' },\n                      onClick: () => {\n                        downloadAttachment({ attachment: attachment! })\n                      },\n                    },\n                    {\n                      children: 'Delete',\n                      className: 'text-red-500 bg-red-500/10',\n                      icon: { children: Trash, className: 'h-4 w-4 rounded' },\n                      onClick: () => {},\n                    },\n                  ],\n                },\n              }}\n            />\n          </div>\n        )\n      })}\n    </div>\n  ) : (\n    <div className=\"flex items-center w-full border border-border min-h-[400px] p-4 rounded-lg\">\n      <p className=\"text-center w-full\">There's not Attachments yet uploaded.</p>\n    </div>\n  )\n}\n\nexport const UploadProfile = () => {\n  const { attachments, setAttachments } = useUploadContext() ?? {}\n  const src =\n    attachments.length > 0\n      ? typeof attachments[0].file === 'string'\n        ? attachments[0].file\n        : URL.createObjectURL(attachments[0].file as Blob)\n      : null\n\n  return (\n    <Button\n      className=\"relative cursor-pointer w-16 h-16 rounded-full\"\n      variant={'outline'}\n    >\n      <Input\n        placeholder=\"Filter files...\"\n        type=\"file\"\n        className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n        multiple={false}\n        onChange={e => {\n          const file = e.currentTarget.files?.[0]\n          if (file) {\n            setAttachments([\n              {\n                id: uuidv7(),\n                file: file,\n                name: file.name,\n                url: null,\n                type: file.type,\n                size: file.size.toString(),\n              },\n            ])\n          }\n        }}\n      />\n\n      <Avatar className=\"w-16 h-16 pointer-events-none\">\n        <AvatarImage\n          src={src ?? ''}\n          className=\"object-cover\"\n        />\n        <AvatarFallback>\n          <img src=\"/avatars/02.png\" />\n        </AvatarFallback>\n      </Avatar>\n      <span\n        className={cn(\n          buttonVariants({ variant: 'outline' }),\n          'absolute rounded-full p-2 -bottom-1 -left-1 hover:bg-background h-fit pointer-events-none'\n        )}\n      >\n        <UploadIcon className=\"!size-3\" />\n      </span>\n    </Button>\n  )\n}\n\nexport const UploadDirectButton = () => {\n  const { setAttachments } = useUploadContext() ?? {}\n\n  return (\n    <Button\n      className=\"relative\"\n      variant={'outline'}\n      size={'sm'}\n      icon={{ children: UploadIcon }}\n    >\n      <Input\n        placeholder=\"Filter files...\"\n        type=\"file\"\n        className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n        multiple={true}\n        onChange={e => handleAttachment({ e, setAttachmentsState: setAttachments })}\n      />\n      Upload file\n    </Button>\n  )\n}\n\nexport const UploadAdvancedButton = () => {\n  const { setAttachments, selectedFolder, setSelectedFolder } = useUploadAdvancedContext() ?? {}\n\n  return (\n    <>\n      <Button\n        className=\"relative h-[35px]\"\n        variant={'default'}\n        size={'sm'}\n        icon={{ children: UploadIcon }}\n      >\n        <Input\n          placeholder=\"Filter files...\"\n          type=\"file\"\n          className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n          multiple={true}\n          onChange={e => uploadFiles({ e, selectedFolder, setSelectedFolder, setAttachments })}\n        />\n        Upload file\n      </Button>\n    </>\n  )\n}\n\nexport const UploadSonnerContent = ({\n  progress,\n  files,\n  remainingTime,\n}: {\n  progress: number\n  files: number\n  remainingTime?: number\n}) => (\n  <div className=\"flex gap-3 w-full\">\n    {progress >= 100 ? (\n      <CircleCheck className=\"fill-primary [&_path]:stroke-primary-foreground mt-2 !size-[18px]\" />\n    ) : (\n      <Loader className=\"animate-spin text-foreground-muted mt-2 opacity-70 !size-[18px]\" />\n    )}\n    <div className=\"flex flex-col gap-2 w-full\">\n      <div className=\"flex w-full justify-between\">\n        <p className=\"text-foreground text-sm\">\n          {progress >= 100\n            ? `Upload complete`\n            : files\n              ? `Uploading ${files} file${files > 1 ? 's' : ''}...`\n              : `Uploading...`}\n        </p>\n        <div className=\"flex items-center gap-2\">\n          {remainingTime && (\n            <p className=\"text-foreground-light text-sm font-mono\">{`${remainingTime && !isNaN(remainingTime) && isFinite(remainingTime) && remainingTime !== 0 ? `${formatTime(remainingTime)} remaining – ` : ''}`}</p>\n          )}\n          <p className=\"text-foreground-light text-sm font-mono\">{`${progress}%`}</p>\n        </div>\n      </div>\n      <Progress\n        value={progress}\n        className=\"w-full h-1\"\n      />\n      <div className=\"flex items-center justify-between gap-2 w-full\">\n        <small className=\"text-foreground-muted text-xs\">Please do not close the browser until completed</small>\n\n        {progress >= 100 && (\n          <Button\n            variant=\"default\"\n            size=\"xs\"\n          >\n            Cancel\n          </Button>\n        )}\n      </div>\n    </div>\n  </div>\n)\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.types.ts",
      "content": "import { ScrollArea } from '@/registry/default/ui'\nimport { SelectedFolderType } from './upload'\n\nexport interface AttachmentType {\n  id: string\n  file: Blob | null\n  url: string | null\n  type: string\n  name: string\n  size: string\n}\n\nexport interface UploadContextType<T extends Record<string, any>> {\n  attachments: T[]\n  setAttachments: React.Dispatch<React.SetStateAction<T[]>>\n  attachmentsState: T[]\n  setAttachmentsState: React.Dispatch<React.SetStateAction<T[]>>\n}\n\nexport interface UploadAdvancedContextType<T extends Record<string, any>> extends UploadContextType<T> {\n  selectedFolder: SelectedFolderType[]\n  setSelectedFolder: React.Dispatch<React.SetStateAction<SelectedFolderType[]>>\n}\n\nexport interface UploadProps extends Omit<React.HTMLProps<HTMLDivElement>, 'content'> {\n  trigger: React.ReactNode\n  content: React.ReactNode\n}\n\nexport interface UploadTriggerProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport interface UploadInputProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport interface UploadContentProps extends React.ComponentPropsWithoutRef<typeof ScrollArea> {}\n\nexport interface UploadItemProps extends React.HTMLProps<HTMLDivElement> {\n  attachment: AttachmentType\n}\n\nexport interface UploadtItemRemoveProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport interface HandleAttachmentProps {\n  e: React.ChangeEvent<HTMLInputElement>\n  setAttachmentsState: React.Dispatch<React.SetStateAction<AttachmentType[]>>\n}\n\nexport type FolderType = {\n  id: string\n  name: string\n  content: (AttachmentType | FolderType)[]\n  files: number\n  createdAt: Date\n  updatedAt: Date\n  treeLevel: number\n}\n\nexport type SelectedFolderType = FolderType & {}\n\nexport type UploadFilesArgs = {\n  e: React.ChangeEvent<HTMLInputElement>\n  selectedFolder: FolderType[]\n  setSelectedFolder: React.Dispatch<React.SetStateAction<FolderType[]>>\n  setAttachments: React.Dispatch<React.SetStateAction<(AttachmentType | FolderType)[]>>\n}\n\nexport type UploadPromiseArgs = {\n  files: number\n  toastId: number\n}\n\nexport type UploadPromiseReturn = { files: number; progress: number; remainingTime: number }\n",
      "type": "registry:ui"
    }
  ]
}