{
  "name": "upload",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "alert-dialog",
    "input",
    "context-menu",
    "scroll-area",
    "button"
  ],
  "root_folder": "registry-ui-components/upload",
  "files": [
    {
      "path": "registry-ui-components/upload/index.ts",
      "content": "export * from \"./upload\";\nexport * from \"./upload.lib\";\nexport * from \"./upload.constants\";\nexport * from \"./upload.types\";\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload-sonner.tsx",
      "content": "import { Progress } from '@/registry/default/ui'\nimport { Check, CheckCircle, CheckCircleIcon, CircleCheck, Loader, Loader2 } from 'lucide-react'\nimport { toast } from 'sonner'\nimport { Button } from '../button'\n\nexport default function SonnerUpload() {\n  const uploadPromise = (files: number, toastId: number) => {\n    toast.loading(\n      <UploadContent\n        progress={0}\n        files={files}\n      />,\n      {\n        duration: 400000,\n        id: toastId,\n      }\n    )\n\n    return new Promise(resolve => {\n      let currentProgress = 0\n\n      toast.loading(\n        <UploadContent\n          progress={currentProgress}\n          files={files}\n        />,\n        {\n          duration: 400000,\n          id: toastId,\n        }\n      )\n\n      const intervalId = setInterval(() => {\n        currentProgress += Math.floor(Math.random() * 10) + 1 // Increment progress by a random value\n        if (currentProgress > 100) currentProgress = 100 // Ensure progress does not exceed 100%\n\n        if (currentProgress >= 100) {\n          clearInterval(intervalId) // Clear the interval once upload is complete\n          resolve({ progress: currentProgress, message: 'Upload complete', files: 3, toastId }) // Resolve the promise when progress reaches 100\n        }\n\n        toast.loading(\n          <UploadContent\n            progress={currentProgress}\n            files={files}\n          />,\n          {\n            id: toastId,\n          }\n        )\n      }, 20) // Adjust the interval time as needed\n    })\n  }\n\n  const UploadContent = ({ progress, files }: { progress: number; files: number }) => (\n    <div className=\"flex gap-3 w-full\">\n      {progress >= 100 ? (\n        <CircleCheck\n          className=\"fill-foreground [&_path]:fill-red-500\"\n          size={16}\n        />\n      ) : (\n        <Loader\n          className=\"animate-spin text-foreground-muted mt-0.5 \"\n          size={16}\n        />\n      )}\n      <div className=\"flex flex-col gap-2 w-full\">\n        <div className=\"flex w-full justify-between\">\n          <p className=\"text-foreground text-sm\">\n            {progress >= 100 ? `Upload complete` : files ? `Uploading ${files} files...` : `Uploading...`}\n          </p>\n          <p className=\"text-foreground-light text-sm font-mono\">{`${progress}%`}</p>\n        </div>\n        <Progress\n          value={progress}\n          className=\"w-full h-1\"\n        />\n        <small className=\"text-foreground-muted text-xs\">Please do not close the browser until completed</small>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Button\n        variant=\"default\"\n        onClick={async () => {\n          // random id\n          const toastId = Math.random()\n          const max = 20 // specify the maximum value\n          const files = Math.floor(Math.random() * max)\n          try {\n            const promise = await uploadPromise(files, toastId)\n            toast.success(\n              <UploadContent\n                progress={promise.progress}\n                files={promise.files}\n              />,\n              {\n                duration: 2000,\n                id: toastId,\n              }\n            )\n          } catch (error) {}\n        }}\n      >\n        Start upload\n      </Button>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.constants.tsx",
      "content": "import { File, FileAudio, FileImage, FileText, FileVideo } from 'lucide-react'\n\nexport enum FileType {\n  Audio = 'audio',\n  Text = 'text',\n  Image = 'image',\n  Video = 'video',\n  Pdf = 'pdf',\n  Unknown = 'unknown',\n}\n\nexport const fileTypeIcons = {\n  [FileType.Audio]: <FileAudio className=\"w-8 h-8\" />,\n  [FileType.Text]: <FileText className=\"w-8 h-8\" />,\n  [FileType.Image]: <FileImage className=\"w-8 h-8\" />,\n  [FileType.Video]: <FileVideo className=\"w-8 h-8\" />,\n  [FileType.Pdf]: <FileText className=\"w-8 h-8\" />,\n  [FileType.Unknown]: <File className=\"w-8 h-8\" />,\n}\n\n// NOTE: 10MB\nexport const MAX_SIZE = 10 * 1024 * 1024\n\n//NOTE: BOX SVG\nexport const UploadOrDragSvg = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"107px\"\n      height=\"112px\"\n      viewBox=\"0 0 107 112\"\n      version=\"1.1\"\n      className={className}\n    >\n      <title>Group</title>\n      <desc>Created with Sketch.</desc>\n      <defs>\n        <rect\n          id=\"path-1\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-3\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-5\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-7\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-9\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n      </defs>\n      <g\n        id=\"Page-1\"\n        stroke=\"none\"\n        strokeWidth=\"1\"\n        fill=\"none\"\n        fillRule=\"evenodd\"\n      >\n        <g\n          id=\"Group\"\n          transform=\"translate(0.725557, -11.000000)\"\n        >\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#404040\"\n            points=\"17.2744429 66 54.2744429 53.2768099 91.2744429 66 54.2744429 78.4696017\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#404040\"\n            points=\"17.2744429 66 54.2744429 53.2768099 54.2744429 78.4696017\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#9A9A9A\"\n            points=\"-1.6795256e-13 51.6636125 38.5238299 39.4235592 54.2744429 53.2768099 17.2744429 65.8732058\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#8B8B8B\"\n            points=\"69.6714788 41.0959162 105.129824 52.6483825 91.2744429 65.8732058 54.5488858 53.4496466\"\n          />\n          <g\n            id=\"image-filled\"\n            transform=\"translate(35.774443, 64.750000) rotate(-13.000000) translate(-35.774443, -64.750000) translate(18.274443, 49.000000)\"\n            fillRule=\"nonzero\"\n          >\n            <rect\n              id=\"Rectangle\"\n              stroke=\"#727272\"\n              fill=\"#888888\"\n              x=\"0\"\n              y=\"0\"\n              width=\"35\"\n              height=\"30.625\"\n              rx=\"2\"\n            />\n            <path\n              d=\"M29.716563,12.2570055 L35,17.0602671 L35,17.0602671 L35,27.7083333 C35,29.3191639 33.6941639,30.625 32.0833333,30.625 L3.09610653,30.625 L3.09610653,30.625 L11.8121678,19.1480546 C12.713849,17.9607584 14.3657745,17.6445878 15.6421544,18.4150136 L18.9583333,20.4166667 L18.9583333,20.4166667 L25.5136882,12.5482153 C26.5447601,11.3106105 28.383886,11.1431825 29.6214908,12.1742544 C29.6537739,12.20115 29.6854721,12.2287402 29.716563,12.2570055 Z\"\n              id=\"Rectangle\"\n              fill=\"#727272\"\n            />\n            <circle\n              id=\"Oval\"\n              fill=\"#727272\"\n              cx=\"10.2083333\"\n              cy=\"10.2083333\"\n              r=\"4.375\"\n            />\n          </g>\n          <g\n            id=\"video-filled\"\n            transform=\"translate(49.774443, 75.312500) rotate(-7.000000) translate(-49.774443, -75.312500) translate(32.274443, 60.000000)\"\n            fillRule=\"nonzero\"\n          >\n            <rect\n              id=\"Rectangle\"\n              fill=\"#888888\"\n              x=\"0\"\n              y=\"0\"\n              width=\"35\"\n              height=\"30.625\"\n              rx=\"2\"\n            />\n            <path\n              d=\"M19.3614068,11.9160992 L22.8351072,18.8635001 C23.1952999,19.5838854 22.903306,20.4598668 22.1829207,20.8200596 C21.9804232,20.9213083 21.7571333,20.9740199 21.5307342,20.9740199 L14.5833333,20.9740199 C13.777918,20.9740199 13.125,20.3211018 13.125,19.5156866 C13.125,19.2892875 13.1777116,19.0659975 13.2789603,18.8635001 L16.7526608,11.9160992 C17.1128535,11.1957139 17.9888349,10.9037201 18.7092203,11.2639127 C18.9914477,11.4050265 19.220293,11.6338718 19.3614068,11.9160992 Z\"\n              id=\"Triangle\"\n              fill=\"#727272\"\n              transform=\"translate(18.057193, 16.041826) rotate(90.000000) translate(-18.057193, -16.041826) \"\n            />\n            <path\n              d=\"M32.0833333,0 C33.6941639,0 35,1.30583615 35,2.91666667 L35,27.7083333 C35,29.3191639 33.6941639,30.625 32.0833333,30.625 L2.91666667,30.625 C1.30583615,30.625 0,29.3191639 0,27.7083333 L0,2.91666667 C0,1.30583615 1.30583615,0 2.91666667,0 L32.0833333,0 Z M26.25,1.45833333 L8.75,1.45833333 C7.21238904,1.45833333 5.95267587,2.64815511 5.84133337,4.15732575 L5.83333333,4.375 L5.83333333,26.25 C5.83333333,27.787611 7.02315511,29.0473241 8.53232575,29.1586667 L8.75,29.1666667 L26.25,29.1666667 C27.787611,29.1666667 29.0473241,27.9768449 29.1586667,26.4676742 L29.1666667,26.25 L29.1666667,4.375 C29.1666667,2.76416948 27.8608305,1.45833333 26.25,1.45833333 Z M3.64583333,23.3333333 L2.1875,23.3333333 C1.78479238,23.3333333 1.45833333,23.6597923 1.45833333,24.0625 L1.45833333,24.0625 L1.45833333,28.4375 C1.45833333,28.8402077 1.78479238,29.1666667 2.1875,29.1666667 L2.1875,29.1666667 L3.64583333,29.1666667 C4.04854096,29.1666667 4.375,28.8402077 4.375,28.4375 L4.375,28.4375 L4.375,24.0625 C4.375,23.6597923 4.04854096,23.3333333 3.64583333,23.3333333 L3.64583333,23.3333333 Z M32.8125,23.3333333 L31.3541667,23.3333333 C30.951459,23.3333333 30.625,23.6597923 30.625,24.0625 L30.625,24.0625 L30.625,28.4375 C30.625,28.8402077 30.951459,29.1666667 31.3541667,29.1666667 L31.3541667,29.1666667 L32.8125,29.1666667 C33.2152077,29.1666667 33.5416667,28.8402077 33.5416667,28.4375 L33.5416667,28.4375 L33.5416667,24.0625 C33.5416667,23.6597923 33.2152077,23.3333333 32.8125,23.3333333 L32.8125,23.3333333 Z M3.64583333,16.0416667 L2.1875,16.0416667 C1.78479238,16.0416667 1.45833333,16.3681257 1.45833333,16.7708333 L1.45833333,16.7708333 L1.45833333,21.1458333 C1.45833333,21.548541 1.78479238,21.875 2.1875,21.875 L2.1875,21.875 L3.64583333,21.875 C4.04854096,21.875 4.375,21.548541 4.375,21.1458333 L4.375,21.1458333 L4.375,16.7708333 C4.375,16.3681257 4.04854096,16.0416667 3.64583333,16.0416667 L3.64583333,16.0416667 Z M32.8125,16.0416667 L31.3541667,16.0416667 C30.951459,16.0416667 30.625,16.3681257 30.625,16.7708333 L30.625,16.7708333 L30.625,21.1458333 C30.625,21.548541 30.951459,21.875 31.3541667,21.875 L31.3541667,21.875 L32.8125,21.875 C33.2152077,21.875 33.5416667,21.548541 33.5416667,21.1458333 L33.5416667,21.1458333 L33.5416667,16.7708333 C33.5416667,16.3681257 33.2152077,16.0416667 32.8125,16.0416667 L32.8125,16.0416667 Z M3.64583333,8.75 L2.1875,8.75 C1.78479238,8.75 1.45833333,9.07645904 1.45833333,9.47916667 L1.45833333,9.47916667 L1.45833333,13.8541667 C1.45833333,14.2568743 1.78479238,14.5833333 2.1875,14.5833333 L2.1875,14.5833333 L3.64583333,14.5833333 C4.04854096,14.5833333 4.375,14.2568743 4.375,13.8541667 L4.375,13.8541667 L4.375,9.47916667 C4.375,9.07645904 4.04854096,8.75 3.64583333,8.75 L3.64583333,8.75 Z M32.8125,8.75 L31.3541667,8.75 C30.951459,8.75 30.625,9.07645904 30.625,9.47916667 L30.625,9.47916667 L30.625,13.8541667 C30.625,14.2568743 30.951459,14.5833333 31.3541667,14.5833333 L31.3541667,14.5833333 L32.8125,14.5833333 C33.2152077,14.5833333 33.5416667,14.2568743 33.5416667,13.8541667 L33.5416667,13.8541667 L33.5416667,9.47916667 C33.5416667,9.07645904 33.2152077,8.75 32.8125,8.75 L32.8125,8.75 Z M3.64583333,1.45833333 L2.1875,1.45833333 C1.78479238,1.45833333 1.45833333,1.78479238 1.45833333,2.1875 L1.45833333,2.1875 L1.45833333,6.5625 C1.45833333,6.96520762 1.78479238,7.29166667 2.1875,7.29166667 L2.1875,7.29166667 L3.64583333,7.29166667 C4.04854096,7.29166667 4.375,6.96520762 4.375,6.5625 L4.375,6.5625 L4.375,2.1875 C4.375,1.78479238 4.04854096,1.45833333 3.64583333,1.45833333 L3.64583333,1.45833333 Z M32.8125,1.45833333 L31.3541667,1.45833333 C30.951459,1.45833333 30.625,1.78479238 30.625,2.1875 L30.625,2.1875 L30.625,6.5625 C30.625,6.96520762 30.951459,7.29166667 31.3541667,7.29166667 L31.3541667,7.29166667 L32.8125,7.29166667 C33.2152077,7.29166667 33.5416667,6.96520762 33.5416667,6.5625 L33.5416667,6.5625 L33.5416667,2.1875 C33.5416667,1.78479238 33.2152077,1.45833333 32.8125,1.45833333 L32.8125,1.45833333 Z\"\n              id=\"Combined-Shape\"\n              fill=\"#727272\"\n            />\n          </g>\n          <g\n            id=\"audio-filled\"\n            transform=\"translate(67.774443, 66.500000) rotate(11.000000) translate(-67.774443, -66.500000) translate(52.274443, 51.000000)\"\n            fill=\"#888888\"\n            fillRule=\"nonzero\"\n            stroke=\"#6F6F6F\"\n          >\n            <path\n              d=\"M30.4926751,2.15980127 L30.4926751,3.5883727 L30.4916751,3.60816221 L30.4926751,23.5883727 C30.4926751,26.6708922 28.0519127,29.1833412 24.9975752,29.2985321 L24.7783894,29.3026584 C21.6224766,29.3026584 19.0641037,26.7442856 19.0641037,23.5883727 C19.0641037,20.4324598 21.6224766,17.874087 24.7783894,17.874087 C25.2717358,17.874087 25.7504798,17.9366068 26.2071309,18.0541557 L26.2066751,5.28916221 L11.9206751,6.19716221 L11.9212466,25.4455156 C11.9212466,25.5507127 11.9050029,25.6521158 11.874887,25.7473538 C11.5164582,28.5582509 9.11547274,30.7312298 6.20696085,30.7312298 C3.05104799,30.7312298 0.492675137,28.172857 0.492675137,25.0169441 C0.492675137,21.8610313 3.05104799,19.3026584 6.20696085,19.3026584 C6.70020715,19.3026584 7.17885708,19.3651529 7.63542453,19.4826557 L7.63553228,3.15980127 C7.63553228,2.60751652 8.08324753,2.15980127 8.63553228,2.15980127 L8.71874605,2.15826839 C8.82933837,2.12377779 8.94501944,2.10184869 9.06410371,2.09427389 L29.0641037,0.822099447 C29.8530819,0.771913551 30.4926751,1.37082306 30.4926751,2.15980127 Z\"\n              id=\"Combined-Shape\"\n            />\n          </g>\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#9A9A9A\"\n            points=\"17.2744429 66 54.2744429 78.4696017 54.2744429 122.469602 17.2744429 110\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#B0B0B0\"\n            transform=\"translate(72.774443, 94.234801) scale(-1, 1) translate(-72.774443, -94.234801) \"\n            points=\"54.2744429 66 91.2744429 78.4696017 91.2744429 122.469602 54.2744429 110\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#8B8B8B\"\n            points=\"17.2744429 66 54.2744429 78.4696017 37.3329548 93.2446257 1.31450406e-13 80.3759293\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#9A9A9A\"\n            points=\"54.2744429 78.4696017 91.2744429 66 106.345958 79.6223129 68.2965835 92.098224\"\n          />\n          <g\n            id=\"file-filled\"\n            transform=\"translate(54.274443, 16.000000)\"\n            fillRule=\"nonzero\"\n          >\n            <path\n              d=\"M2.94117647,0 L14.7058824,0 L14.7058824,0 L25,10.2941176 L25,27.9411765 C25,29.5655434 23.6831904,30.8823529 22.0588235,30.8823529 L2.94117647,30.8823529 C1.31680956,30.8823529 0,29.5655434 0,27.9411765 L0,2.94117647 C0,1.31680956 1.31680956,0 2.94117647,0 Z\"\n              id=\"Rectangle\"\n              stroke=\"#6F6F6F\"\n              fill=\"#888888\"\n            />\n            <path\n              d=\"M14.7058824,0 L25,10.2941176 L17.6470588,10.2941176 C16.0226919,10.2941176 14.7058824,8.97730809 14.7058824,7.35294118 L14.7058824,0 L14.7058824,0 Z\"\n              id=\"Triangle\"\n              fill=\"#727272\"\n            />\n          </g>\n          <g\n            id=\"closedhand\"\n            transform=\"translate(57.274443, 0.000000)\"\n          >\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-2\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <path\n                d=\"M12.6,13 C13.1,12.8 14,12.9 14.3,13.5 C14.5,14 14.7,14.7 14.7,14.6 C14.7,14.2 14.7,13.4 14.8,13 C14.9,12.7 15.1,12.4 15.5,12.3 C15.8,12.2 16.1,12.2 16.4,12.2 C16.7,12.3 17,12.5 17.2,12.7 C17.6,13.3 17.6,14.6 17.6,14.5 C17.7,14.2 17.7,13.3 17.9,12.9 C18,12.7 18.4,12.5 18.6,12.4 C18.9,12.3 19.3,12.3 19.6,12.4 C19.8,12.4 20.2,12.7 20.3,12.9 C20.5,13.2 20.6,14.2 20.7,14.6 C20.7,14.7 20.8,14.2 21,13.9 C21.4,13.3 22.8,13.1 22.9,14.5 C22.9,15.2 22.9,15.1 22.9,15.6 C22.9,16.1 22.9,16.4 22.9,16.8 C22.9,17.2 22.8,18.1 22.7,18.5 C22.6,18.8 22.3,19.5 22,19.9 C22,19.9 20.9,21.1 20.8,21.7 C20.7,22.3 20.7,22.3 20.7,22.7 C20.7,23.1 20.8,23.6 20.8,23.6 C20.8,23.6 20,23.7 19.6,23.6 C19.2,23.5 18.7,22.8 18.6,22.5 C18.4,22.2 18.1,22.2 17.9,22.5 C17.7,22.9 17.2,23.6 16.9,23.6 C16.2,23.7 14.8,23.6 13.8,23.6 C13.8,23.6 14,22.6 13.6,22.2 C13.3,21.9 12.8,21.4 12.5,21.1 L11.7,20.2 C11.4,19.8 10.7,19.3 10.5,18.2 C10.3,17.3 10.3,16.8 10.5,16.4 C10.7,16 11.2,15.8 11.4,15.8 C11.6,15.8 12.1,15.8 12.3,15.9 C12.5,16 12.6,16.1 12.8,16.3 C13,16.6 13.1,16.8 13,16.4 C12.9,16.1 12.7,15.8 12.6,15.4 C12.5,15 12.2,14.5 12.2,13.9 C11.7,13.9 11.8,13.3 12.6,13\"\n                id=\"Path\"\n                fill=\"#FFFFFF\"\n                fillRule=\"nonzero\"\n                mask=\"url(#mask-2)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-4\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <path\n                d=\"M12.6,13 C13.1,12.8 14,12.9 14.3,13.5 C14.5,14 14.7,14.7 14.7,14.6 C14.7,14.2 14.7,13.4 14.8,13 C14.9,12.7 15.1,12.4 15.5,12.3 C15.8,12.2 16.1,12.2 16.4,12.2 C16.7,12.3 17,12.5 17.2,12.7 C17.6,13.3 17.6,14.6 17.6,14.5 C17.7,14.2 17.7,13.3 17.9,12.9 C18,12.7 18.4,12.5 18.6,12.4 C18.9,12.3 19.3,12.3 19.6,12.4 C19.8,12.4 20.2,12.7 20.3,12.9 C20.5,13.2 20.6,14.2 20.7,14.6 C20.7,14.7 20.8,14.2 21,13.9 C21.4,13.3 22.8,13.1 22.9,14.5 C22.9,15.2 22.9,15.1 22.9,15.6 C22.9,16.1 22.9,16.4 22.9,16.8 C22.9,17.2 22.8,18.1 22.7,18.5 C22.6,18.8 22.3,19.5 22,19.9 C22,19.9 20.9,21.1 20.8,21.7 C20.7,22.3 20.7,22.3 20.7,22.7 C20.7,23.1 20.8,23.6 20.8,23.6 C20.8,23.6 20,23.7 19.6,23.6 C19.2,23.5 18.7,22.8 18.6,22.5 C18.4,22.2 18.1,22.2 17.9,22.5 C17.7,22.9 17.2,23.6 16.9,23.6 C16.2,23.7 14.8,23.6 13.8,23.6 C13.8,23.6 14,22.6 13.6,22.2 C13.3,21.9 12.8,21.4 12.5,21.1 L11.7,20.2 C11.4,19.8 10.7,19.3 10.5,18.2 C10.3,17.3 10.3,16.8 10.5,16.4 C10.7,16 11.2,15.8 11.4,15.8 C11.6,15.8 12.1,15.8 12.3,15.9 C12.5,16 12.6,16.1 12.8,16.3 C13,16.6 13.1,16.8 13,16.4 C12.9,16.1 12.7,15.8 12.6,15.4 C12.5,15 12.2,14.5 12.2,13.9 C11.7,13.9 11.8,13.3 12.6,13 Z\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinejoin=\"round\"\n                mask=\"url(#mask-4)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-6\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <line\n                x1=\"19.6\"\n                y1=\"20.7\"\n                x2=\"19.6\"\n                y2=\"17.3\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinecap=\"round\"\n                mask=\"url(#mask-6)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-8\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <line\n                x1=\"17.6\"\n                y1=\"20.7\"\n                x2=\"17.5\"\n                y2=\"17.3\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinecap=\"round\"\n                mask=\"url(#mask-8)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-10\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <line\n                x1=\"15.6\"\n                y1=\"17.3\"\n                x2=\"15.6\"\n                y2=\"20.7\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinecap=\"round\"\n                mask=\"url(#mask-10)\"\n              />\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.lib.tsx",
      "content": "import { toast } from 'sonner'\nimport { FileType, MAX_SIZE } from './upload.constants'\nimport {\n  AttachmentType,\n  FolderType,\n  HandleAttachmentProps,\n  UploadFilesArgs,\n  UploadPromiseArgs,\n  UploadPromiseReturn,\n} from './upload.types'\nimport { uuidv7 } from 'uuidv7'\nimport { UploadSonnerContentMemo } from './upload'\nimport React from 'react'\n\nexport const uploadPromise = ({ files, toastId }: UploadPromiseArgs): Promise<UploadPromiseReturn> => {\n  return new Promise(resolve => {\n    let currentProgress = 0\n    const remainingTime = getRemainingTime(currentProgress, 100)\n\n    // Show initial toast loading message\n    toast.loading(\n      <UploadSonnerContentMemo\n        progress={currentProgress}\n        remainingTime={remainingTime}\n        files={files}\n      />,\n      { id: toastId }\n    )\n\n    // Simulate progress update with interval\n    const intervalId = setInterval(() => {\n      currentProgress += Math.floor(Math.random() * 10) + 1\n      if (currentProgress > 100) currentProgress = 100\n\n      // Update toast content with the new progress and remaining time\n      toast.loading(\n        <UploadSonnerContentMemo\n          progress={currentProgress}\n          remainingTime={remainingTime}\n          files={files}\n        />,\n        { id: toastId }\n      )\n\n      // Resolve the promise once progress reaches 100%\n      if (currentProgress >= 100) {\n        clearInterval(intervalId)\n        resolve({ progress: currentProgress, files, remainingTime })\n      }\n    }, 200)\n  })\n}\n\n// Helper function to calculate remaining time\nexport function getRemainingTime(currentProgress: number, maxProgress: number) {\n  const progressPercentage = (currentProgress / maxProgress) * 100\n  const calculatedRemainingTime = 200 - progressPercentage * 2\n  return calculatedRemainingTime > 0 ? calculatedRemainingTime : 0\n}\n\nexport async function uploadFiles(props: UploadFilesArgs) {\n  const { e, selectedFolder, setSelectedFolder, setAttachments } = props\n\n  try {\n    const files = e.currentTarget.files\n\n    if (!files?.length)\n      return toast.error('Please select a file', {\n        position: 'top-right',\n      })\n\n    const newAttachments: AttachmentType[] = []\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n\n      if (file.size > MAX_SIZE) {\n        toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`, { position: 'top-right' })\n        continue // Skip this file and continue with the next\n      }\n\n      const attachment: AttachmentType = {\n        id: uuidv7(),\n        file: file,\n        name: file.name,\n        url: null,\n        type: file.type,\n        size: file.size.toString(),\n      }\n\n      newAttachments.push(attachment)\n    }\n\n    // random id\n    const toastId = Math.random()\n\n    // Upload promise\n    const promise = await uploadPromise({ files: files.length, toastId })\n\n    // Show upload progress toast\n    promise &&\n      toast.success(`Successfully Uploaded ${files.length} file${files.length > 1 ? 's' : ''}`, {\n        duration: 2000,\n        position: 'top-right',\n        id: toastId,\n      })\n\n    // After the upload is done, update the state\n    if (selectedFolder.length > 0) {\n      return setSelectedFolder(old => {\n        return old.map(item =>\n          item.id === selectedFolder[selectedFolder.length - 1].id\n            ? {\n                ...item,\n                files: (item as FolderType).files + newAttachments.length,\n                content: [...selectedFolder[selectedFolder.length - 1]?.content, ...newAttachments],\n              }\n            : item\n        )\n      })\n    }\n\n    setAttachments(old => {\n      if (selectedFolder.length > 0) {\n        return old.map(item =>\n          item.id === selectedFolder[selectedFolder.length - 1].id\n            ? {\n                ...item,\n                files: (item as FolderType).files + newAttachments.length,\n                content: [...selectedFolder[selectedFolder.length - 1]?.content, ...newAttachments],\n              }\n            : item\n        )\n      }\n      return [...old, ...newAttachments]\n    })\n\n    // Clear the input\n    e.target.value = ''\n  } catch (error) {\n    console.log(error)\n    toast.error('Upload failed. Please try again.', { position: 'top-right' })\n  }\n}\n\nexport function formatTime(seconds: number) {\n  const days = Math.floor(seconds / (24 * 3600))\n  seconds %= 24 * 3600\n  const hours = Math.floor(seconds / 3600)\n  seconds %= 3600\n  const minutes = Math.floor(seconds / 60)\n  seconds = Math.floor(seconds % 60)\n\n  if (days > 0) return `${days}d `\n  if (hours > 0) return `${hours}h `\n  if (minutes > 0) return `${minutes}m `\n  return `${seconds}s`\n}\n\nexport const getFileType = (file: Blob | null): FileType => {\n  if (!file) return FileType.Unknown\n  if (file.type.startsWith('audio/')) return FileType.Audio\n  if (file.type.startsWith('text/')) return FileType.Text\n  if (file.type.startsWith('image/')) return FileType.Image\n  if (file.type.startsWith('video/')) return FileType.Video\n  if (file.type.startsWith('application/pdf')) return FileType.Pdf\n  return FileType.Unknown\n}\n\nexport const handleAttachment = ({ e, setAttachmentsState }: HandleAttachmentProps) => {\n  const files = e.currentTarget.files\n\n  if (!files) return toast.error('Please select a file')\n\n  const newAttachments: AttachmentType[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i]\n\n    // if (file.size > 10 * 1024 * 1024) {\n    //   toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`)\n    //   continue // Skip this file and continue with the next\n    // }\n\n    const attachment: AttachmentType = {\n      id: uuidv7(),\n      file: file,\n      name: file.name,\n      url: null,\n      type: file.type,\n      size: file.size.toString(),\n    }\n\n    newAttachments.push(attachment)\n  }\n\n  setAttachmentsState(prev => [...prev, ...newAttachments])\n  e.currentTarget.value = ''\n}\n\nexport const handleAdvancedAttachment = ({ e, setAttachmentsState }: HandleAttachmentProps) => {\n  const files = e.currentTarget.files\n\n  if (!files)\n    return toast.error('Please select a file', {\n      position: 'top-right',\n    })\n\n  const newAttachments: AttachmentType[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i]\n\n    // if (file.size > 10 * 1024 * 1024) {\n    //   toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`)\n    //   continue // Skip this file and continue with the next\n    // }\n\n    const attachment: AttachmentType = {\n      id: uuidv7(),\n      file: file,\n      name: file.name,\n      url: null,\n      type: file.type,\n      size: file.size.toString(),\n    }\n\n    newAttachments.push(attachment)\n  }\n\n  setAttachmentsState(prev => [...prev, ...newAttachments])\n  e.currentTarget.value = ''\n}\n\n/**\n * Deep merge two objects, recursively merging properties.\n * - Handles arrays, objects, and primitive values.\n * - Ensures immutability by not mutating the original target object.\n *\n * @param target - The target object.\n * @param source - The source object.\n * @returns A new object with merged properties.\n */\nexport const deepMerge = <T extends Record<string, any>>(target: T, source: Partial<T>): T => {\n  // Create a new object to avoid mutating the original target\n  const output = { ...target }\n\n  for (const key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      const targetValue = target[key]\n      const sourceValue = source[key]\n\n      // Check if both target and source are objects, and not null\n      if (isObject(targetValue) && isObject(sourceValue)) {\n        // Recursively merge the objects\n        output[key] = deepMerge(targetValue, sourceValue as Partial<T[Extract<keyof T, string>] & Record<string, any>>)\n      } else {\n        // Otherwise, directly assign the source value (includes arrays and primitives)\n        output[key] = sourceValue as T[Extract<keyof T, string>]\n      }\n    }\n  }\n\n  return output\n}\n\n/**\n * Helper function to check if a value is a plain object (and not an array or null).\n *\n * @param value - The value to check.\n * @returns Whether the value is a plain object.\n */\nconst isObject = (value: any): value is Record<string, any> => {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport {\n  AlertDialogSheet,\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n  DropdownMenuView,\n  Progress,\n} from '@/registry/default/ui'\nimport { ContextMenu, ContextMenuTrigger } from '@/registry/default/ui'\nimport { Input } from '@/registry/default/ui'\nimport { ScrollArea } from '@/registry/default/ui'\nimport { filesize } from 'filesize'\nimport { Button, buttonVariants } from '../button'\nimport { CircleCheck, Download, Ellipsis, Loader, Trash, Upload as UploadIcon } from 'lucide-react'\nimport {\n  AttachmentType,\n  FolderType,\n  SelectedFolderType,\n  UploadAdvancedContextType,\n  UploadContentProps,\n  UploadContextType,\n  UploadInputProps,\n  UploadItemProps,\n  UploadProps,\n  UploadtItemRemoveProps,\n  UploadTriggerProps,\n} from './upload.types'\nimport { fileTypeIcons } from './upload.constants'\nimport { formatTime, getFileType, handleAttachment, uploadFiles } from './upload.lib'\nimport { cn } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport { downloadAttachment } from '@/registry/default/ui/comment'\nimport { uuidv7 } from 'uuidv7'\n\nconst UploadContext = React.createContext<UploadContextType<AttachmentType> | null>(null)\n\nexport const useUploadContext = () => {\n  const context = React.useContext(UploadContext)\n  if (!context) {\n    throw new Error('useUploadContext must be used within an UploadProvider')\n  }\n  return context\n}\n\nexport const UploadProvider = ({ children }: { children: React.ReactNode }) => {\n  const [attachments, setAttachments] = React.useState<AttachmentType[]>([])\n  const [attachmentsState, setAttachmentsState] = React.useState<AttachmentType[]>([])\n\n  return (\n    <UploadContext.Provider\n      value={{\n        attachments,\n        setAttachments,\n        attachmentsState,\n        setAttachmentsState,\n      }}\n    >\n      {children}\n    </UploadContext.Provider>\n  )\n}\n\nconst UploadAdvancedContext = React.createContext<UploadAdvancedContextType<AttachmentType | FolderType> | null>(null)\n\nexport const useUploadAdvancedContext = () => {\n  const context = React.useContext(UploadAdvancedContext)\n  if (!context) {\n    throw new Error('useUploadContext must be used within an UploadProvider')\n  }\n  return context\n}\n\nexport const UploadAdvancedProvider = ({ children }: { children: React.ReactNode }) => {\n  const [selectedFolder, setSelectedFolder] = React.useState<SelectedFolderType[]>([])\n  const [attachments, setAttachments] = React.useState<(AttachmentType | FolderType)[]>([\n    {\n      id: 'ed2da76d-5a24-4e35-9542-e92ca2e49c34',\n      name: 'gentelduck',\n      files: 1,\n      content: [\n        {\n          id: 'ed2da76d-5a24-4e35-9542-e92ca2e49c35',\n          name: 'duck-ui',\n          files: 1,\n          content: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          treeLevel: 2,\n        },\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      treeLevel: 1,\n    },\n    {\n      id: '9c8f7a19-1752-4bd2-b308-90c553ef5b98',\n      name: 'Download',\n      files: 1,\n      content: [\n        {\n          id: '20e93625-a645-4cdd-baf1-c01ced27a85b',\n          name: 'wilduck-2.png',\n          size: '1MB',\n          file: new File([], ''),\n          url: '',\n          type: 'image/png',\n          treeLevel: 2,\n        },\n        {\n          id: 'b23574f5-4aa0-4a89-8236-bd5699ac483f',\n          name: 'duck-scripts',\n          files: 1,\n          content: [\n            {\n              id: '20e93625-a645-4cdd-baf1-c01ced27a85b',\n              name: 'wilduck-2.png',\n              size: '1MB',\n              file: new File([], ''),\n              url: '',\n              type: 'image/png',\n              treeLevel: 2,\n            },\n          ],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          treeLevel: 1,\n        },\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      treeLevel: 1,\n    },\n  ])\n  const [attachmentsState, setAttachmentsState] = React.useState<(AttachmentType | FolderType)[]>([])\n\n  return (\n    <UploadAdvancedContext.Provider\n      value={{\n        attachments,\n        setAttachments,\n        attachmentsState,\n        setAttachmentsState,\n        selectedFolder,\n        setSelectedFolder,\n      }}\n    >\n      {children}\n    </UploadAdvancedContext.Provider>\n  )\n}\n\nexport const Upload = ({ children, trigger, content }: UploadProps) => {\n  const { setAttachments, attachmentsState, setAttachmentsState } = useUploadContext()\n  return (\n    <>\n      {children ? (\n        children\n      ) : (\n        <AlertDialogSheet\n          header={{\n            head: 'Upload',\n            description: 'upload your attahment here and submit.',\n          }}\n          actions={{\n            continue: () => {\n              setAttachments([])\n              setAttachmentsState([])\n            },\n          }}\n          footer={{\n            submit: {\n              children: (\n                <Button\n                  disabled={attachmentsState.length === 0}\n                  className=\"px-6\"\n                  onClick={() => {\n                    setAttachments(prev => [...prev, ...attachmentsState])\n                    setAttachmentsState([])\n                  }}\n                >\n                  Submit\n                </Button>\n              ),\n            },\n            cancel: {\n              children: (\n                <Button\n                  variant=\"outline\"\n                  className=\"px-6\"\n                >\n                  Cancel\n                </Button>\n              ),\n            },\n          }}\n          state={attachmentsState.length > 0}\n          trigger={{ children: trigger }}\n          content={{ children: content }}\n        />\n      )}\n    </>\n  )\n}\n\nexport const UploadTrigger = React.forwardRef<HTMLDivElement, UploadTriggerProps>(\n  ({ className, children, ...props }, ref) => (\n    <div\n      className={cn(className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n)\n\nexport const UploadInput = React.forwardRef<HTMLDivElement, UploadInputProps>(\n  ({ className, children, ...props }, ref) => {\n    const { setAttachmentsState } = useUploadContext()\n\n    return (\n      <div\n        className={cn(className)}\n        ref={ref}\n        {...props}\n      >\n        <ContextMenu>\n          <ContextMenuTrigger className=\"relative flex flex-col items-center justify-center w-full h-64 rounded-md border border-dashed border-border text-sm leading-5 transition-colors duration-100 ease-in-out hover:bg-muted/10\">\n            <div className=\"grid place-items-center gap-4\">\n              <UploadIcon className=\"size-[30px]\" />\n              <span>Click or Drag to Upload</span>\n            </div>\n            <Input\n              placeholder=\"Filter files...\"\n              type=\"file\"\n              className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n              multiple={true}\n              onChange={e => handleAttachment({ e, setAttachmentsState })}\n            />\n          </ContextMenuTrigger>\n        </ContextMenu>\n        <p className=\"mt-2 text-muted-foreground text-[.9rem]\">supports all types of files.</p>\n      </div>\n    )\n  }\n)\n\nexport const UploadContent = React.forwardRef<HTMLDivElement, UploadContentProps>(\n  ({ className, children, ...props }, ref) => {\n    const { attachmentsState, setAttachmentsState } = useUploadContext()\n\n    return (\n      <ScrollArea\n        className={cn('flex flex-col gap-2 max-h-[39ch] md:max-h-[43ch]', className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n        <div className=\"flex flex-col gap-2\">\n          {attachmentsState.map(attachment => {\n            return (\n              <UploadItem\n                key={attachment.id}\n                attachment={attachment}\n              >\n                <UploadtItemRemove\n                  className=\"absolute top-1/2 -translate-y-1/2 right-2\"\n                  onClick={() => {\n                    setAttachmentsState(prev => prev.filter(item => item.id !== attachment.id))\n                  }}\n                />\n              </UploadItem>\n            )\n          })}\n        </div>\n      </ScrollArea>\n    )\n  }\n)\n\nexport const UploadItem = React.forwardRef<HTMLDivElement, UploadItemProps>(\n  ({ attachment, children, className, ...props }, ref) => {\n    const fileType = getFileType(attachment.file)\n    return (\n      <div\n        className={cn('relative flex items-center gap-4 bg-secondary/20 rounded-md p-2', className)}\n        ref={ref}\n        {...props}\n      >\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative\">{fileTypeIcons[fileType]}</div>\n          <div className=\"grid items-start\">\n            <h3 className=\"inline-block text-[.9rem] truncate max-w-[200px]\">{attachment.name || 'Empty File'}</h3>\n            <p className=\"inline-block truncate text-semibold text-[.8rem] max-w-[300px]\">\n              {filesize(attachment.file ? +attachment.file.size : 0, {\n                round: 0,\n              })}\n            </p>\n          </div>\n        </div>\n        {children}\n      </div>\n    )\n  }\n)\n\nexport const UploadtItemRemove = React.forwardRef<HTMLDivElement, UploadtItemRemoveProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        className={cn(\n          'size-4 rounded-md focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 cursor-pointer',\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        <X className=\"w-4 h-4\" />\n      </div>\n    )\n  }\n)\n\nexport const UploadItemsPreview = () => {\n  const { attachments } = useUploadContext()\n\n  return attachments.length > 0 ? (\n    <div className=\"grid grid-cols-6 justify-start items-start place-content-start gap-2 w-full border border-border min-h-[400px] p-4 rounded-lg\">\n      {attachments.map(attachment => {\n        const fileType = getFileType(attachment.file)\n\n        // If the file is a File object, generate a URL for preview\n        const src = typeof attachment.file === 'string' ? attachment.file : URL.createObjectURL(attachment.file as Blob)\n\n        return (\n          <div\n            className={cn(\n              'relative bg-secondary/20 rounded-md overflow-hidden w-full flex flex-col place-content-center gap-4 h-[100px] border border-border'\n            )}\n          >\n            <div>\n              <div className=\"relative [&_svg]:size-12 [&_svg]:mx-auto w-full\">{fileTypeIcons[fileType]}</div>\n            </div>\n            <DropdownMenuView\n              trigger={{\n                icon: { children: Ellipsis, className: 'h-4 w-4 rounded' },\n                variant: 'outline',\n                size: 'icon',\n                className: 'h-4 w-6 absolute bottom-2 right-2',\n              }}\n              content={{\n                options: {\n                  itemType: 'label',\n                  optionsData: [\n                    {\n                      children: 'Download',\n                      icon: { children: Download, className: 'h-4 w-4 rounded' },\n                      onClick: () => {\n                        downloadAttachment({ attachment: attachment! })\n                      },\n                    },\n                    {\n                      children: 'Delete',\n                      className: 'text-red-500 bg-red-500/10',\n                      icon: { children: Trash, className: 'h-4 w-4 rounded' },\n                      onClick: () => {},\n                    },\n                  ],\n                },\n              }}\n            />\n          </div>\n        )\n      })}\n    </div>\n  ) : (\n    <div className=\"flex items-center w-full border border-border min-h-[400px] p-4 rounded-lg\">\n      <p className=\"text-center w-full\">There's not Attachments yet uploaded.</p>\n    </div>\n  )\n}\n\nexport const UploadProfile = () => {\n  const { attachments, setAttachments } = useUploadContext() ?? {}\n  const src =\n    attachments.length > 0\n      ? typeof attachments[0].file === 'string'\n        ? attachments[0].file\n        : URL.createObjectURL(attachments[0].file as Blob)\n      : null\n\n  return (\n    <Button\n      className=\"relative cursor-pointer w-16 h-16 rounded-full\"\n      variant={'outline'}\n    >\n      <Input\n        placeholder=\"Filter files...\"\n        type=\"file\"\n        className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n        multiple={false}\n        onChange={e => {\n          const file = e.currentTarget.files?.[0]\n          if (file) {\n            setAttachments([\n              {\n                id: uuidv7(),\n                file: file,\n                name: file.name,\n                url: null,\n                type: file.type,\n                size: file.size.toString(),\n              },\n            ])\n          }\n        }}\n      />\n\n      <Avatar className=\"w-16 h-16 pointer-events-none\">\n        <AvatarImage\n          src={src ?? ''}\n          className=\"object-cover\"\n        />\n        <AvatarFallback>\n          <img src=\"/avatars/02.png\" />\n        </AvatarFallback>\n      </Avatar>\n      <span\n        className={cn(\n          buttonVariants({ variant: 'outline' }),\n          'absolute rounded-full p-2 -bottom-1 -left-1 hover:bg-background h-fit pointer-events-none'\n        )}\n      >\n        <UploadIcon className=\"!size-3\" />\n      </span>\n    </Button>\n  )\n}\n\nexport const UploadDirectButton = () => {\n  const { setAttachments } = useUploadContext() ?? {}\n\n  return (\n    <Button\n      className=\"relative\"\n      variant={'outline'}\n      size={'sm'}\n      icon={{ children: UploadIcon }}\n    >\n      <Input\n        placeholder=\"Filter files...\"\n        type=\"file\"\n        className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n        multiple={true}\n        onChange={e => handleAttachment({ e, setAttachmentsState: setAttachments })}\n      />\n      Upload file\n    </Button>\n  )\n}\n\nexport const UploadAdvancedButton = () => {\n  const { setAttachments, selectedFolder, setSelectedFolder } = useUploadAdvancedContext() ?? {}\n\n  return (\n    <>\n      <Button\n        className=\"relative \"\n        variant={'default'}\n        size={'xs'}\n        icon={{ children: UploadIcon }}\n      >\n        <Input\n          placeholder=\"Filter files...\"\n          type=\"file\"\n          className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n          multiple={true}\n          onChange={e => uploadFiles({ e, selectedFolder, setSelectedFolder, setAttachments })}\n        />\n        Upload file\n      </Button>\n    </>\n  )\n}\n\nexport const UploadSonnerContent = ({\n  progress,\n  files,\n  remainingTime,\n}: {\n  progress: number\n  files: number\n  remainingTime?: number\n}) => (\n  <div className=\"flex gap-3 w-full\">\n    {progress >= 100 ? (\n      <CircleCheck className=\"fill-primary [&_path]:stroke-primary-foreground mt-2 !size-[18px]\" />\n    ) : (\n      <Loader className=\"animate-spin text-foreground-muted mt-2 opacity-70 !size-[18px]\" />\n    )}\n    <div className=\"flex flex-col gap-2 w-full\">\n      <div className=\"flex w-full justify-between\">\n        <p className=\"text-foreground text-sm\">\n          {progress >= 100\n            ? `Upload complete`\n            : files\n              ? `Uploading ${files} file${files > 1 ? 's' : ''}...`\n              : `Uploading...`}\n        </p>\n        <div className=\"flex items-center gap-2\">\n          {remainingTime && (\n            <p className=\"text-foreground-light text-sm font-mono\">{`${remainingTime && !isNaN(remainingTime) && isFinite(remainingTime) && remainingTime !== 0 ? `${formatTime(remainingTime)} remaining – ` : ''}`}</p>\n          )}\n          <p className=\"text-foreground-light text-sm font-mono\">{`${progress}%`}</p>\n        </div>\n      </div>\n      <Progress\n        value={progress}\n        className=\"w-full h-1\"\n      />\n      <div className=\"flex items-center justify-between gap-2 w-full\">\n        <small className=\"text-foreground-muted text-xs\">Please do not close the browser until completed</small>\n\n        {progress >= 100 && (\n          <Button\n            variant=\"default\"\n            size=\"xs\"\n          >\n            Cancel\n          </Button>\n        )}\n      </div>\n    </div>\n  </div>\n)\n\nexport const UploadSonnerContentMemo = React.memo(UploadSonnerContent)\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.types.ts",
      "content": "import { ScrollArea } from '@/registry/default/ui'\nimport { SelectedFolderType } from './upload'\n\nexport interface AttachmentType {\n  id: string\n  file: Blob | null\n  url: string | null\n  type: string\n  name: string\n  size: string\n}\n\nexport interface UploadContextType<T extends Record<string, any>> {\n  attachments: T[]\n  setAttachments: React.Dispatch<React.SetStateAction<T[]>>\n  attachmentsState: T[]\n  setAttachmentsState: React.Dispatch<React.SetStateAction<T[]>>\n}\n\nexport interface UploadAdvancedContextType<T extends Record<string, any>> extends UploadContextType<T> {\n  selectedFolder: SelectedFolderType[]\n  setSelectedFolder: React.Dispatch<React.SetStateAction<SelectedFolderType[]>>\n}\n\nexport interface UploadProps extends Omit<React.HTMLProps<HTMLDivElement>, 'content'> {\n  trigger: React.ReactNode\n  content: React.ReactNode\n}\n\nexport interface UploadTriggerProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport interface UploadInputProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport interface UploadContentProps extends React.ComponentPropsWithoutRef<typeof ScrollArea> {}\n\nexport interface UploadItemProps extends React.HTMLProps<HTMLDivElement> {\n  attachment: AttachmentType\n}\n\nexport interface UploadtItemRemoveProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport interface HandleAttachmentProps {\n  e: React.ChangeEvent<HTMLInputElement>\n  setAttachmentsState: React.Dispatch<React.SetStateAction<AttachmentType[]>>\n}\n\nexport type FolderType = {\n  id: string\n  name: string\n  content: (AttachmentType | FolderType)[]\n  files: number\n  createdAt: Date\n  updatedAt: Date\n  treeLevel: number\n}\n\nexport type SelectedFolderType = FolderType & {}\n\nexport type UploadFilesArgs = {\n  e: React.ChangeEvent<HTMLInputElement>\n  selectedFolder: FolderType[]\n  setSelectedFolder: React.Dispatch<React.SetStateAction<FolderType[]>>\n  setAttachments: React.Dispatch<React.SetStateAction<(AttachmentType | FolderType)[]>>\n}\n\nexport type UploadPromiseArgs = {\n  files: number\n  toastId: number\n}\n\nexport type UploadPromiseReturn = { files: number; progress: number; remainingTime: number }\n",
      "type": "registry:ui"
    }
  ]
}