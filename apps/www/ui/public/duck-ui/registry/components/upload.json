{
  "name": "upload",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "alert-dialog",
    "input",
    "context-menu",
    "scroll-area",
    "button"
  ],
  "root_folder": "registry-ui-components/upload",
  "files": [
    {
      "path": "registry-ui-components/upload/index.ts",
      "content": "export * from './upload'\nexport * from './upload-advanced'\nexport * from './upload-chunks'\nexport * from './upload-sonner'\nexport * from './upload.lib'\nexport * from './upload.assets'\nexport * from './upload.constants'\nexport * from './upload.types'\nexport * from './upload.dto'\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload-advanced.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport { ScrollBar, Separator } from '@/registry/default/ui'\nimport { ScrollArea } from '@/registry/default/ui'\nimport { Button, buttonVariants } from '../button'\nimport { Clipboard, X } from 'lucide-react'\nimport {\n  FileType,\n  FolderType,\n  SelectedFolderType,\n  UploadAdvancedContextType,\n  UploadAdvancedProviderProps,\n} from './upload.types'\n// import { UploadManager } from './upload.lib'\nimport {\n  UploadAddFolderButton,\n  UploadAdvancedButton,\n  UploadAlertDeleteAttachments,\n  UploadAlertMoveAction,\n  UploadAttachmentsTreeItem,\n  UploadDownloadAttachments,\n  UploadReloadButton,\n  UploadSearchButton,\n  UploadViewButton,\n} from './upload-chunks'\nimport { format } from 'date-fns'\nimport { filesize } from 'filesize'\nimport { cn } from '@/lib'\nimport { CONTENT_WIDTH_PREVIEW_OPEN, PREVIEW_WIDTH, TREE_HEIGHT } from './upload.constants'\nimport { searchAttachmentsByKey } from './upload.lib'\n\nconst UploadAdvancedContext = React.createContext<UploadAdvancedContextType<FileType | FolderType> | null>(null)\n\n/**\n * Hook for accessing the context of the UploadAdvancedProvider.\n *\n * @returns {UploadAdvancedContextType<FileType | FolderType> | null} The context object.\n * @throws {Error} If the hook is used outside of an UploadAdvancedProvider.\n */\nexport const useUploadAdvancedContext = (): UploadAdvancedContextType<FileType | FolderType> => {\n  const context = React.useContext(UploadAdvancedContext)\n  if (!context) {\n    throw new Error('useUploadContext must be used within an UploadProvider')\n  }\n  return context\n}\n\n/**\n * The UploadAdvancedProvider component provides the context for all the other components in the\n * UploadAdvanced layout. It wraps the components in a context provider and provides the state and\n * functions to manage the attachments and folders.\n *\n * @param {UploadAdvancedProviderProps} props - The props for the component.\n * @returns {JSX.Element} The rendered component.\n */\nexport const UploadAdvancedProvider = ({\n  selectedFolder,\n  attachments,\n  className,\n  currentBucket,\n  children,\n  ...props\n}: UploadAdvancedProviderProps): JSX.Element => {\n  const [_selectedFolder, setSelectedFolder] = React.useState<SelectedFolderType[]>(selectedFolder ?? [])\n  const [_attachments, setAttachments] = React.useState<(FileType | FolderType)[]>(attachments ?? [])\n  const [attachmentsState, setAttachmentsState] = React.useState<(FileType | FolderType)[]>([])\n  const [previewFile, setPreviewFile] = React.useState<FileType | null>(null)\n  const [uploadQuery, setUploadQuery] = React.useState<string>('')\n  const [selectedAttachments, setSelectedAttachments] = React.useState<FileType[]>([])\n\n  return (\n    <UploadAdvancedContext.Provider\n      value={{\n        attachments: _attachments,\n        setAttachments,\n        attachmentsState,\n        setAttachmentsState,\n        selectedFolder: _selectedFolder,\n        setSelectedFolder,\n        previewFile,\n        setPreviewFile,\n        uploadQuery,\n        setUploadQuery,\n        selectedAttachments,\n        setSelectedAttachments,\n        currentBucket,\n      }}\n    >\n      <div\n        className={cn('flex flex-col w-full rounded-md bg-muted/10 border-border border overflow-hidden', className)}\n        {...props}\n      >\n        {children}\n      </div>\n    </UploadAdvancedContext.Provider>\n  )\n}\n\n/**\n * A component that renders the top bar of the advanced upload component.\n * Contains the upload actions and the multiple select layout.\n *\n * @returns A JSX.Element\n */\nexport const UploadAdvancedHeader = () => {\n  return (\n    <div className=\"w-full h-[45px] overflow-hidden relative\">\n      <UploadAdvancedActionsLayout />\n      <UploadAdvancedMultiSelectLayout />\n      <Separator />\n    </div>\n  )\n}\n\n/**\n * A component that renders the actions layout of the advanced upload component.\n * Contains the reload, view, upload file, add folder, and search buttons.\n *\n * @returns A JSX.Element\n */\nexport const UploadAdvancedActionsLayout = () => {\n  const { selectedAttachments } = useUploadAdvancedContext()\n\n  return (\n    <>\n      <div\n        className={cn(\n          'space-x-2 flex items-center place-content-end w-full m-0 p-2 transition-all duration-300 ease-in-out',\n          selectedAttachments.length > 0 ? 'translate-y-[-42px]' : 'translate-y-0'\n        )}\n      >\n        <UploadReloadButton />\n        <UploadViewButton />\n        <Separator\n          orientation=\"vertical\"\n          className=\"h-6\"\n        />\n        <UploadAdvancedButton />\n        <UploadAddFolderButton />\n        <Separator\n          orientation=\"vertical\"\n          className=\"h-6\"\n        />\n        <UploadSearchButton />\n      </div>\n    </>\n  )\n}\n\n/**\n * A layout component for multi-select actions in the advanced upload interface.\n *\n * Displays a floating action bar when one or more attachments are selected,\n * providing options to download, move, or delete the selected attachments.\n *\n * The bar includes a close button to clear the selection and shows the count\n * of selected attachments. It appears with a smooth transition effect and hides\n * when no attachments are selected.\n */\n\nexport const UploadAdvancedMultiSelectLayout = () => {\n  const { selectedAttachments, setSelectedAttachments } = useUploadAdvancedContext()\n\n  return (\n    <>\n      <div\n        className={cn(\n          'absolute top-1/2 -translate-y-1/2 space-x-2 flex items-center w-full m-0 p-2 transition-all duration-300 ease-in-out bg-background pointer-events-all',\n          selectedAttachments.length > 0 ? '' : 'opacity-0 t anslate-y-[-42px] pointer-events-none'\n        )}\n      >\n        <Button\n          size={'xs'}\n          variant={'ghost'}\n          className=\"p-1 h-auto\"\n          onClick={() => setSelectedAttachments([])}\n          icon={{ children: X }}\n        />\n        <div className=\"flex items-center gap-3\">\n          <span className=\"text-xs text-muted-foreground\">\n            {selectedAttachments.length} Attachment\n            {selectedAttachments.length === 1 ? ' is' : 's are'} selected\n          </span>\n          <Separator\n            orientation=\"vertical\"\n            className=\"h-6\"\n          />\n          <UploadDownloadAttachments itemsName={[...selectedAttachments.map(item => item.name)]} />\n          <Separator\n            orientation=\"vertical\"\n            className=\"h-6\"\n          />\n          <UploadAlertMoveAction itemsName={[...selectedAttachments.map(item => item.name)]} />\n          <UploadAlertDeleteAttachments\n            itemsName={[...selectedAttachments.map(item => item.name)]}\n            className={cn(\n              buttonVariants({\n                className: 'w-fit',\n                size: 'xs',\n                variant: 'destructive',\n                border: 'destructive',\n              })\n            )}\n            itemsToDelete={[...selectedAttachments.map(item => item.id)]}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\n/**\n * Component that displays the advanced content for file upload, including a preview of the uploaded file,\n * a scrollable area containing the file/folder tree, and tree extender elements for enhanced interaction.\n *\n * @returns {React.Element} The rendered component containing the file preview, tree, and scrollable area.\n */\nexport const UploadAdnvacedContent = React.memo(() => {\n  const { previewFile } = useUploadAdvancedContext() ?? {}\n  return (\n    <div className=\"h-full relative\">\n      <UploadFilePreview />\n      <ScrollArea className={cn(TREE_HEIGHT, previewFile && CONTENT_WIDTH_PREVIEW_OPEN)}>\n        <div className=\"flex items-center h-full rounded-md relative overflow-hidden\">\n          <UploadAttachmentsTreeItem />\n          <UploadTreeExtender />\n        </div>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n    </div>\n  )\n})\n\n/**\n * A component that extends the upload tree by rendering the contents of the selected folders.\n * It retrieves the folder content from the attachments and filters it based on the upload query.\n * Each folder's content is rendered as an UploadAttachmentsTreeItem component.\n *\n * @returns {JSX.Element | null} The rendered upload tree extender component, or null if no folders are selected.\n */\n\nexport const UploadTreeExtender = (): JSX.Element => {\n  const { selectedFolder, attachments, uploadQuery } = useUploadAdvancedContext()\n\n  return (\n    <>\n      {selectedFolder.length > 0 &&\n        selectedFolder.map((folderContent, idx) => {\n          const item = searchAttachmentsByKey(attachments, folder => folder.id === folderContent?.id, 'content')\n          const filtered = !uploadQuery\n            ? (item as FolderType)?.content\n            : (item as FolderType)?.content.filter(item => item.name.toLowerCase().includes(uploadQuery.toLowerCase()))\n          return (\n            item && (\n              <div\n                key={item.id}\n                className=\"flex items-center h-full rounded-md\"\n              >\n                <UploadAttachmentsTreeItem\n                  attachments={filtered}\n                  key={item.id}\n                />\n                {idx !== selectedFolder.length - 1 && <Separator orientation=\"vertical\" />}\n              </div>\n            )\n          )\n        })}\n    </>\n  )\n}\n\n/**\n * A component that renders a preview of the selected file.\n *\n * When a file is selected, the preview appears with a smooth transition effect and displays the file's name, type, size, created and updated at information.\n * The preview also includes a download button, a button to copy the file's URL to the clipboard, and a delete button.\n *\n * @returns {JSX.Element} The rendered file preview component.\n */\nexport const UploadFilePreview = (): JSX.Element => {\n  const { previewFile, setPreviewFile } = useUploadAdvancedContext() ?? {}\n\n  return (\n    <>\n      <div\n        className={cn(\n          PREVIEW_WIDTH,\n          'absolute top-0 right-0 h-full duration-300 ease-in-out translate-x-[100%] z-10 dark:bg-[#121212] bg-card',\n          previewFile && 'translate-x-0'\n        )}\n      >\n        <ScrollArea className=\"h-full\">\n          <Button\n            size={'xs'}\n            variant={'nothing'}\n            className=\"absolute top-2 right-4 p-0\"\n            icon={{ children: X }}\n            onClick={() => setPreviewFile(null)}\n          />\n          <div className=\"border-l border-l-border bg-muted/10 w-full h-full px-4 py-8\">\n            <div className=\"border border-border w-full h-[180px] flex items-center justify-center rounded-md overflow-hidden\">\n              <img\n                // src={URL.createObjectURL((previewFile?.file as Blob) ?? new Blob())}\n                src={previewFile?.url}\n                className=\"object-contain size-full\"\n                alt={previewFile?.name}\n              />\n            </div>\n            <div className=\"my-4 flex flex-col gap-1\">\n              <h6 className=\"text-sm font-medium truncate max-w-[70%]\">{previewFile?.name}</h6>\n              <p className=\"text-accent-foreground/70 text-xs flex items-center gap-1 fno\">\n                <span>{previewFile?.type}</span>-\n                <span>\n                  {filesize(previewFile?.file ? +previewFile?.file.size : 0, {\n                    round: 0,\n                  })}\n                </span>\n              </p>\n            </div>\n            <div className=\"my-4 flex flex-col gap-1\">\n              <h6 className=\"text-xs font-medium text-accent-foreground/90\">Created at</h6>\n              <p className=\"text-accent-foreground/70 text-xs flex items-center gap-1 fno\">\n                {previewFile ? format(new Date(previewFile?.createdAt ?? Date.now()), 'dd/MM/yyyy hh:mm:ss a') : ''}\n              </p>\n            </div>\n            <div className=\"my-4 flex flex-col gap-1\">\n              <h6 className=\"text-xs font-medium text-accent-foreground/90\">Updated at</h6>\n              <p className=\"text-accent-foreground/70 text-xs flex items-center gap-1 fno\">\n                {previewFile ? format(new Date(previewFile?.updatedAt ?? Date.now()), 'dd/MM/yyyy hh:mm:ss a') : ''}\n              </p>\n            </div>\n            <div className=\"flex flex-row gap-2 [&_button]:px-3 mt-4 mb-2 \">\n              <UploadDownloadAttachments itemsName={[previewFile?.name ?? '']} />\n              <Button\n                size={'xs'}\n                // variant={'secondary'}\n                icon={{ children: Clipboard }}\n              >\n                Get URL\n              </Button>\n            </div>\n            <Separator />\n            <div className=\"my-2 flex flex-row gap-2 [&_button]:px-3\">\n              <UploadAlertDeleteAttachments\n                itemsName={[previewFile?.name ?? '']}\n                className={cn(\n                  buttonVariants({\n                    className: 'w-fit',\n                    size: 'xs',\n                    variant: 'destructive',\n                    border: 'destructive',\n                  })\n                )}\n                itemsToDelete={[previewFile?.id ?? '']}\n              />\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n    </>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload-chunks.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/registry/default/ui/dropdown-menu'\nimport { Input } from '@/registry/default/ui/input'\nimport { ScrollArea } from '@/registry/default/ui/scroll-area'\nimport { Button, buttonVariants } from '../button'\nimport {\n  FileType,\n  FolderType,\n  SelectedFolderType,\n  UploadAlertDeleteActionProps,\n  UploadAlertMoveActionProps,\n  UploadAttachmentsTreeItemProps,\n  UploadDownloadAttachmentsProps,\n  UploadRenameAttachmentButtonProps,\n} from './upload.types'\nimport { CONTENT_POILERPLATE, FILE_TYPE_ICONS, TREE_HEIGHT, TREE_WIDTH } from './upload.constants'\nimport {\n  addFolderToPath,\n  advancedUploadAttachments,\n  deleteAttachmentById,\n  folderOpen,\n  getFileType,\n  moveAttachmentsToPath,\n  renameAttachmentById,\n  selectAttachmentFromFolderContent,\n} from './upload.lib'\nimport {\n  Alert,\n  AlertDescription,\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n  AlertTitle,\n  DialogClose,\n  DialogDescription,\n  DialogTitle,\n} from '@/registry/default/ui'\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTrigger } from '@/registry/default/ui'\nimport { DuckDropdownMenuItem } from '../dropdown-menu'\nimport { useUploadAdvancedContext } from './upload-advanced'\nimport { UploadOrDragSvg } from './upload.assets'\nimport { cn } from '@/lib/utils'\nimport {\n  X,\n  Download,\n  Ellipsis,\n  Folder,\n  FolderOpen,\n  Rows2,\n  Search,\n  FolderPlusIcon,\n  AlertCircle,\n  Trash,\n  Move,\n  RefreshCw,\n  UploadIcon,\n  Pencil,\n} from 'lucide-react'\nimport { Checkbox, Separator } from '@/registry/default/ui'\nimport { debounceCallback } from '@/hooks'\n\n/**\n * A button to reload the upload view.\n *\n * TODO: Implement reload functionality.\n * @returns {JSX.Element} The reload button.\n */\nexport const UploadReloadButton = (): JSX.Element => {\n  // TODO: Implement reload functionality.\n  return (\n    <Button\n      size={'xs'}\n      icon={{ children: RefreshCw }}\n      onClick={() => {}}\n    >\n      Reload\n    </Button>\n  )\n}\n\n/**\n * A dropdown menu button to view and sort the uploads.\n *\n * This component will render a dropdown menu with three sub-items:\n * - View: A radio button group to select the view type.\n * - Sort By: A radio button group to sort the uploads by a specific column.\n * - Sort Order: A radio button group to sort the uploads in ascending or descending order.\n *\n * @returns {JSX.Element} The dropdown menu button.\n */\nexport const UploadViewButton = (): JSX.Element => {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          size={'xs'}\n          icon={{ children: Rows2 }}\n        >\n          View\n        </Button>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent>\n        <DuckDropdownMenuItem\n          title=\"View\"\n          content={CONTENT_POILERPLATE.view}\n        />\n        <DuckDropdownMenuItem\n          title=\"Sort By\"\n          subgroup={true}\n          content={CONTENT_POILERPLATE.sort}\n        />\n        <DuckDropdownMenuItem\n          title=\"Sort Order\"\n          subgroup={true}\n          content={CONTENT_POILERPLATE.order}\n        />\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\n/**\n * A button component for advanced file uploads.\n *\n * Provides a file input for uploading multiple files with advanced handling.\n * Utilizes the `UploadManager.advancedUploadAttachments` function to manage\n * the upload process, including file validation and attachment state updates.\n *\n * @returns {JSX.Element} The upload button component.\n */\n\nexport const UploadAdvancedButton = (): JSX.Element => {\n  const { setAttachments, selectedFolder, setSelectedFolder } = useUploadAdvancedContext() ?? {}\n\n  const memoizedUploadFiles = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      advancedUploadAttachments({ e, selectedFolder, setSelectedFolder, setAttachments })\n    },\n    [selectedFolder, setSelectedFolder, setAttachments]\n  )\n\n  return (\n    <Button\n      className=\"relative\"\n      variant={'default'}\n      size={'xs'}\n      icon={{ children: UploadIcon }}\n    >\n      <Input\n        placeholder=\"Filter files...\"\n        type=\"file\"\n        className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n        multiple={true}\n        onChange={e => memoizedUploadFiles(e)}\n      />\n      Upload file\n    </Button>\n  )\n}\n\n/**\n * A button component for creating a new folder.\n *\n * Provides a button and a dialog with an input field for creating a new folder.\n * Utilizes the `UploadManager.addFolderToPath` function to create the folder\n * and add it to the specified path.\n *\n * @returns {JSX.Element} The upload folder button component.\n */\nexport const UploadAddFolderButton = (): JSX.Element => {\n  const { selectedFolder, setAttachments, setSelectedFolder } = useUploadAdvancedContext()\n  const inputRef = React.useRef<HTMLInputElement | null>(null)\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button\n          className=\"relative w-[1.625rem]\"\n          size={'xs'}\n          icon={{ children: FolderPlusIcon }}\n        >\n          <span className=\"sr-only\">Upload attachments</span>\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <div>\n          <DialogHeader className=\"p-2\">\n            <DialogTitle className=\"text-lg font-medium pb-0\">Create a new folder</DialogTitle>\n            <DialogDescription className=\"text-sm text-muted-foreground\">\n              Enter the name of the folder you'd like to create.\n            </DialogDescription>\n          </DialogHeader>\n          <Input\n            placeholder=\"Enter folder name...\"\n            defaultValue={'New_folder' + Math.random().toString(36).slice(2)}\n            className=\"h-[35px]\"\n            ref={inputRef}\n          />\n        </div>\n        <DialogFooter>\n          <DialogClose\n            className={cn(buttonVariants({ className: 'px-8', size: 'sm', variant: 'outline' }))}\n            onClick={() => inputRef.current && (inputRef.current.value = '')}\n          >\n            Cancel\n          </DialogClose>\n          <DialogClose\n            className={cn(buttonVariants({ className: 'px-8', size: 'sm' }))}\n            onClick={() =>\n              addFolderToPath({\n                selectedFolder,\n                setAttachments,\n                setSelectedFolder,\n                folderName: inputRef.current?.value,\n              })\n            }\n          >\n            Submit\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\n/**\n * @description A component to rename a single attachment.\n * @param {{ attachment: FileType | FolderType }} props\n * @returns {JSX.Element} The rename attachment button component.\n */\nexport const UploadRenameAttachments = ({ attachment }: UploadRenameAttachmentButtonProps): JSX.Element => {\n  const { setAttachments } = useUploadAdvancedContext()\n  const inputRef = React.useRef<HTMLInputElement | null>(null)\n\n  return (\n    <Dialog modal={true}>\n      <DialogTrigger asChild>\n        <Button\n          className=\"relative w-[1.625rem]\"\n          size={'xs'}\n          variant={'ghost'}\n          icon={{ children: Pencil }}\n        >\n          <span className=\"\">Rename </span>\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <div>\n          <DialogHeader className=\"p-2\">\n            <DialogTitle className=\"text-lg font-medium pb-0\">Rename the attachment</DialogTitle>\n            <DialogDescription className=\"text-sm text-muted-foreground\">\n              Enter the name of the attachment you'd like to rename.\n            </DialogDescription>\n          </DialogHeader>\n          <Input\n            placeholder=\"Enter attachment name...\"\n            defaultValue={attachment.name}\n            className=\"h-[35px]\"\n            ref={inputRef}\n          />\n        </div>\n        <DialogFooter>\n          <DialogClose\n            className={cn(buttonVariants({ className: 'px-8', size: 'sm', variant: 'outline' }))}\n            onClick={() => inputRef.current && (inputRef.current.value = '')}\n          >\n            Cancel\n          </DialogClose>\n          <DialogClose\n            className={cn(buttonVariants({ className: 'px-8', size: 'sm' }))}\n            onClick={() => renameAttachmentById(setAttachments, [attachment.id], inputRef.current?.value ?? '')}\n          >\n            Submit\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\n/**\n * @description\n * A button that allows you to search for attachments in the current folder.\n * When clicked, it opens a text input to enter the search query.\n * The search query is debounced for 1000 milliseconds.\n * The search query is cleared when the button is clicked again.\n * @returns A JSX.Element\n */\nexport const UploadSearchButton = (): JSX.Element => {\n  const [open, setOpen] = React.useState<boolean>(false)\n  const { setUploadQuery } = useUploadAdvancedContext()\n  const inputRef = React.useRef<HTMLInputElement | null>(null)\n\n  React.useEffect(() => {\n    inputRef.current?.focus()\n  }, [open])\n\n  const debounceSearch = debounceCallback(() => {\n    inputRef.current?.value ? setUploadQuery(inputRef.current?.value) : setUploadQuery('')\n  }, 1000)\n\n  return (\n    <div className=\"flex items-center\">\n      <Button\n        size={'xs'}\n        variant={'secondary'}\n        border={'secondary'}\n        icon={{ children: Search }}\n        className={cn('relative w-[1.625rem] flex', open && 'hidden')}\n        onClick={() => {\n          setOpen(true)\n        }}\n      >\n        <span className=\"sr-only\">search</span>\n      </Button>\n      <div\n        className={cn(\n          buttonVariants({\n            variant: 'secondary',\n            border: 'secondary',\n            size: 'xs',\n            className: 'relative h-[1.625rem] overflow-hidden w-[200px] hidden [&_svg]:pointer-events-auto',\n          }),\n          open && 'flex'\n        )}\n      >\n        <Search className=\"absolute top-1/2 -translate-y-1/2 left-2 size-[0.875rem] z-10\" />\n        <Input\n          autoFocus={true}\n          onChange={_ => debounceSearch()}\n          className=\"pl-6 w-[200px] h-[1.625rem] text-xs text-accent-foreground/50 bg-transparent placeholder:text-xs placeholder:text-accent-foreground/50\"\n          placeholder=\"Search file or folder...\"\n          ref={inputRef}\n        />\n        <X\n          className=\"absolute top-1/2 -translate-y-1/2 right-2 size-[0.875rem] stroke-[2px] cursor-pointer z-10 pointer-events-auto\"\n          onClick={() => {\n            setUploadQuery('')\n            inputRef.current && (inputRef.current.value = '')\n            setOpen(false)\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const UploadDownloadAttachments = React.memo(\n  ({ itemsName, size, withinDropdown = false, ...props }: UploadDownloadAttachmentsProps): JSX.Element => {\n    const { currentBucket } = useUploadAdvancedContext()\n\n    const ButtonSubmit = (\n      <AlertDialogAction\n        className={cn(buttonVariants({ className: 'px-8', size: 'sm' }))}\n        onClick={() => {}}\n      >\n        Download\n      </AlertDialogAction>\n    )\n\n    return (\n      <AlertDialog>\n        <AlertDialogTrigger asChild>\n          <Button\n            size={size ?? 'xs'}\n            icon={{ children: Download }}\n            onClick={() => {}}\n            {...props}\n          >\n            Download\n          </Button>\n        </AlertDialogTrigger>\n        <AlertDialogContent className=\"p-2\">\n          <AlertDialogHeader>\n            <h5 className=\"text-lg font-medium p-4 pb-0\">\n              Download\n              <Button\n                variant={'nothing'}\n                className=\"py-0 px-2 text-lg\"\n                label={{\n                  children: (\n                    <div className=\"flex flex-col sapce-y-2 p-1\">\n                      {itemsName.map((item, index) => (\n                        <span key={index}>{item}</span>\n                      ))}\n                    </div>\n                  ),\n                  side: 'top',\n                  showLabel: true,\n                }}\n              >\n                <span className=\"font-mono italic underline underline-offset-4\">\n                  {itemsName.length > 1\n                    ? `${itemsName.length} file${itemsName[0].length > 1 ? 's' : ''}`\n                    : `${itemsName[0]?.slice(0, 15)}${itemsName[0]?.length > 15 ? '... ' : ''}`}\n                </span>\n              </Button>\n              from\n              <Button\n                variant={'nothing'}\n                className=\"py-0 px-2 text-lg\"\n                label={{\n                  children: currentBucket ? currentBucket : 'the bucket',\n                  showLabel: currentBucket.length > 5 ? true : false,\n                  side: 'top',\n                }}\n              >\n                <span className=\"font-mono italic underline underline-offset-4\">\n                  {currentBucket\n                    ? `${currentBucket.length > 5 ? `${currentBucket.slice(0, 5)}...` : currentBucket}`\n                    : 'the bucket'}\n                </span>\n              </Button>\n            </h5>\n            <p className=\"text-sm text-muted-foreground px-4 !mt-0\">Select the items you'd like to download.</p>\n\n            <Separator />\n          </AlertDialogHeader>\n\n          <AlertDialogFooter>\n            <AlertDialogCancel className={cn(buttonVariants({ variant: 'outline', className: 'px-8', size: 'sm' }))}>\n              Cancel\n            </AlertDialogCancel>\n            {withinDropdown ? <DropdownMenuItem className=\"p-0\">{ButtonSubmit}</DropdownMenuItem> : ButtonSubmit}\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    )\n  }\n)\n\nexport const UploadAlertMoveAction = React.memo(\n  ({ itemsName: itemName, ...props }: UploadAlertMoveActionProps): JSX.Element => {\n    const { currentBucket, selectedAttachments, setSelectedAttachments, setAttachments } = useUploadAdvancedContext()\n    const inputRef = React.useRef<HTMLInputElement | null>(null)\n\n    return (\n      <AlertDialog>\n        <AlertDialogTrigger asChild>\n          <Button\n            size={'xs'}\n            icon={{ children: Move }}\n            {...props}\n          >\n            Move\n          </Button>\n        </AlertDialogTrigger>\n        <AlertDialogContent className=\"p-0\">\n          <AlertDialogHeader>\n            <h5 className=\"text-lg font-medium p-4 pb-0\">\n              Moving\n              <Button\n                variant={'nothing'}\n                className=\"py-0 px-2 text-lg\"\n                label={{\n                  children: (\n                    <div className=\"flex flex-col sapce-y-2 p-1\">\n                      {itemName.map((item, index) => (\n                        <span key={index}>{item}</span>\n                      ))}\n                    </div>\n                  ),\n                  side: 'top',\n                  showLabel: true,\n                }}\n              >\n                <span className=\"font-mono italic underline underline-offset-4\">\n                  {itemName.length > 1\n                    ? `${itemName.length} file${itemName[0].length > 1 ? 's' : ''}`\n                    : `${itemName[0]?.slice(0, 15)}${itemName[0]?.length > 15 ? '... ' : ''}`}\n                </span>\n              </Button>\n              within\n              <Button\n                variant={'nothing'}\n                className=\"py-0 px-2 text-lg\"\n                label={{\n                  children: currentBucket ? currentBucket : 'the bucket',\n                  showLabel: currentBucket.length > 5 ? true : false,\n                  side: 'top',\n                }}\n              >\n                <span className=\"font-mono italic underline underline-offset-4\">\n                  {currentBucket\n                    ? `${currentBucket.length > 5 ? `${currentBucket.slice(0, 5)}...` : currentBucket}`\n                    : 'the bucket'}\n                </span>\n              </Button>\n            </h5>\n            <p className=\"text-sm text-muted-foreground px-4 !mt-0\">\n              Enter the path to where you'd like to move the files to.\n            </p>\n\n            <Separator />\n            <div className=\"p-4\">\n              <Alert\n                variant={'default'}\n                className=\"space-y-2 [&>svg]:left-6 [&>svg]:top-6 [&>svg~*]:pl-12 bg-muted/50\"\n              >\n                <AlertTitle className=\"text-accent-foreground/70 flex iems-center gap-1\">\n                  Path to new directory in\n                  <span className=\"font-mono italic underline underline-offset-4\">{currentBucket}</span>\n                </AlertTitle>\n                <Input\n                  className=\"bg-transparent h-[35px] border-muted-foreground/20\"\n                  placeholder=\"Enter path here...\"\n                  ref={inputRef}\n                />\n                <AlertDescription className=\"text-muted-foreground/70\">\n                  Leave blank to move items to the root of the bucket.\n                </AlertDescription>\n              </Alert>\n            </div>\n            <Separator />\n          </AlertDialogHeader>\n\n          <AlertDialogFooter className=\"px-4 pb-4\">\n            <AlertDialogCancel className={cn(buttonVariants({ variant: 'outline', className: 'px-8', size: 'sm' }))}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              className={cn(buttonVariants({ className: 'px-8', size: 'sm' }))}\n              onClick={_ =>\n                moveAttachmentsToPath({\n                  setAttachments,\n                  setSelectedAttachment: setSelectedAttachments,\n                  selectedAttachments,\n                  path: inputRef.current?.value ?? '',\n                })\n              }\n            >\n              Move\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    )\n  }\n)\n\nexport const UploadAlertDeleteAttachments = React.memo(\n  ({\n    itemsName: itemName,\n    className,\n    variant,\n    size,\n    itemsToDelete,\n    ...props\n  }: UploadAlertDeleteActionProps): JSX.Element => {\n    const { setAttachments, currentBucket } = useUploadAdvancedContext()\n\n    return (\n      <AlertDialog>\n        <AlertDialogTrigger asChild>\n          <Button\n            size={size ?? 'xs'}\n            className={cn('justify-between w-full rounded-sm', className)}\n            variant={variant ?? 'destructive'}\n            icon={{ children: Trash }}\n            {...props}\n          >\n            Delete\n          </Button>\n        </AlertDialogTrigger>\n        <AlertDialogContent className=\"p-0\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"p-4 pb-0\">\n              Confirm deletion of\n              <Button\n                variant={'nothing'}\n                className=\"py-0 px-2 text-lg\"\n                label={{\n                  children: (\n                    <div className=\"flex flex-col sapce-y-2 p-1\">\n                      {itemName.map((item, index) => (\n                        <span key={index}>{item}</span>\n                      ))}\n                    </div>\n                  ),\n                  side: 'top',\n                  showLabel: true,\n                }}\n              >\n                <span className=\"font-mono italic underline underline-offset-4\">\n                  {itemName.length > 1\n                    ? `${itemName.length} file${itemName[0].length > 1 ? 's' : ''}`\n                    : `${itemName[0]?.slice(0, 10)}${itemName[0]?.length > 10 ? '... ' : ''}`}\n                </span>\n              </Button>\n              from\n              <Button\n                variant={'nothing'}\n                className=\"py-0 px-2 text-lg\"\n                label={{\n                  children: currentBucket ? currentBucket : 'the bucket',\n                  showLabel: currentBucket.length > 5 ? true : false,\n                  side: 'top',\n                }}\n              >\n                <span className=\"font-mono italic underline underline-offset-4\">\n                  {currentBucket\n                    ? `${currentBucket.length > 5 ? `${currentBucket.slice(0, 5)}...` : currentBucket}`\n                    : 'the bucket'}\n                </span>\n              </Button>\n            </AlertDialogTitle>\n            <Separator />\n          </AlertDialogHeader>\n\n          <div className=\"px-4\">\n            <Alert\n              variant=\"destructive\"\n              className=\"space-y-2 [&>svg]:left-6 [&>svg]:top-6 [&>svg~*]:pl-12\"\n            >\n              <AlertCircle />\n              <AlertTitle>This action cannot be undone.</AlertTitle>\n              <AlertDescription>Are you sure you want to delete the selected items?</AlertDescription>\n            </Alert>\n          </div>\n\n          <Separator />\n\n          <AlertDialogFooter className=\"px-4 pb-4\">\n            <AlertDialogCancel className={cn(buttonVariants({ variant: 'outline', className: 'px-8', size: 'sm' }))}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              className={cn(\n                buttonVariants({ variant: 'destructive', border: 'destructive', className: 'px-8', size: 'sm' })\n              )}\n              onClick={() => setAttachments(old => deleteAttachmentById(old, itemsToDelete))}\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    )\n  }\n)\n\n/**\n * Component for rendering the upload attachments tree item.\n * @param {UploadAttachmentsTreeItemProps} props - The props for the component.\n * @returns {JSX.Element}\n */\nexport const UploadAttachmentsTreeItem = React.memo(({ attachments }: UploadAttachmentsTreeItemProps) => {\n  const { selectedFolder, setSelectedFolder, attachments: _attachments, uploadQuery } = useUploadAdvancedContext()\n\n  const filtered = (\n    uploadQuery\n      ? (attachments ?? _attachments)?.filter(item => item.name.toLowerCase().includes(uploadQuery.toLowerCase()))\n      : (attachments ?? _attachments)\n  ) as (FileType | FolderType)[]\n\n  return (filtered ?? _attachments)?.length > 0 ? (\n    <div className=\"flex items-start h-full rounded-md\">\n      <div className=\"flex flex-col h-full rounded-md\">\n        <UploadSelectAll attachments={attachments ?? _attachments} />\n        <ScrollArea className={cn('rounded-md p-2 bg-muted/10', TREE_WIDTH, TREE_HEIGHT)}>\n          <div className=\"flex flex-col gap-1 h-full\">\n            {filtered.map(attachment => {\n              if ((attachment as FileType).file) {\n                return (\n                  <UploadAttachmentFile\n                    attachmentFile={attachment as FileType}\n                    key={attachment.id}\n                  />\n                )\n              }\n              return (\n                <UploadAttachmentFolder\n                  key={attachment.id}\n                  attachmentFolder={attachment as FolderType}\n                  selected={selectedFolder}\n                  setSelected={setSelectedFolder}\n                />\n              )\n            })}\n          </div>\n        </ScrollArea>\n      </div>\n      <Separator orientation=\"vertical\" />\n    </div>\n  ) : (\n    <EmptyFolder />\n  )\n})\n\n/**\n * Component for selecting all attachments in the current tree.\n * @param {Object} props - The props for the component.\n * @param {(FileType | FolderType)[]} props.attachments - The list of attachments.\n * @returns {JSX.Element}\n */\nexport const UploadSelectAll = React.memo((props: { attachments: (FileType | FolderType)[] }) => {\n  const { attachments } = props\n  const { setSelectedAttachments: setSelectedAttachment, selectedAttachments: selecttedAttachment } =\n    useUploadAdvancedContext()\n  const currentTreeLevel = attachments?.[0]?.treeLevel\n\n  // Get all selected folders in the current tree\n  const selectedInCurrentTree = selecttedAttachment.filter(attachment => attachment.treeLevel === currentTreeLevel)\n  const filesInCurrentTree = attachments.filter(item => !(item as FolderType)?.content)\n\n  // Determine the `isChecked` state\n  const isChecked =\n    selectedInCurrentTree.length === filesInCurrentTree?.length\n      ? true // All selected\n      : selectedInCurrentTree.length > 0\n        ? 'indeterminate' // Some selected\n        : false // None selected\n\n  return (\n    <div\n      className={cn(\n        'flex items-center gap-2 p-2 bg-muted rounded-md mx-2 mt-2 -mb-1 transition-all duration-300 ease-in-out',\n        (selecttedAttachment.length === 0 || filesInCurrentTree?.length === 0) && '-mt-10 mb-2'\n      )}\n    >\n      <Checkbox\n        className=\"w-[15px] h-[15px] border-muted-foreground/80\"\n        onCheckedChange={_ =>\n          selectAttachmentFromFolderContent({\n            filesInCurrentTree,\n            setSelectedAttachment,\n          })\n        }\n        checked={isChecked}\n      />\n      <span className=\"text-xs font-medium text-muted-foreground/80\">\n        {isChecked === true\n          ? `All ${filesInCurrentTree?.length} file${selectedInCurrentTree.length === 1 ? ' is' : 's are'} selected`\n          : isChecked === 'indeterminate'\n            ? `${selectedInCurrentTree.length} file${selectedInCurrentTree.length === 1 ? ' is' : 's are'} selected`\n            : `Select all ${filesInCurrentTree?.length} file${filesInCurrentTree.length === 1 ? '' : 's'}`}\n      </span>\n    </div>\n  )\n})\n\n/**\n * Component to display when there are no files in the folder.\n * @returns {JSX.Element}\n */\nexport const EmptyFolder = (): JSX.Element => {\n  return (\n    <div className=\"border-r border-r-border bg-muted/10 w-[250px] h-full p-4 flex items-center flex-col space-y-2 justify-center\">\n      <UploadOrDragSvg className=\"size-[100px]\" />\n      <p className=\"text-center w-full text-sm font-medium\">Drop your files here</p>\n      <p className=\"text-accent-foreground/70 text-center w-full text-xs max-w-[150px]\">\n        Or upload them via the \"Upload file\" button above\n      </p>\n    </div>\n  )\n}\n\n/**\n * Component representing a folder that contains attachments.\n * It displays the folder name and provides actions like renaming, downloading, and deleting.\n *\n * @param {Object} props - Component properties.\n * @param {FolderType} props.attachmentFolder - The folder object containing attachment details.\n * @param {SelectedFolderType[]} props.selected - The list of selected folders.\n * @param {React.Dispatch<React.SetStateAction<SelectedFolderType[]>>} props.setSelected - A function to update the selected folders list.\n *\n * @returns {React.Element} The rendered component.\n */\nexport const UploadAttachmentFolder = React.memo(\n  (props: {\n    attachmentFolder: FolderType\n    selected: SelectedFolderType[]\n    setSelected: React.Dispatch<React.SetStateAction<SelectedFolderType[]>>\n  }) => {\n    const { attachmentFolder, selected, setSelected } = props\n    const exist_in_tree = selected?.some(item => item.id === attachmentFolder.id)\n\n    return (\n      <div className=\"relative\">\n        <div\n          className={cn(\n            'relative bg-card-foreground/5 rounded-md overflow-hidden w-full flex items-center justify-start gap-2 p-2 hover:bg-card-foreground/15 transition-all cursor-pointer [&_*]:select-none',\n            exist_in_tree && 'bg-card-foreground/15'\n          )}\n          onClick={() => folderOpen({ attachmentFolder, setSelected, exist_in_tree })}\n        >\n          <div className=\"relative [&_svg]:size-4\">\n            {exist_in_tree ? <FolderOpen /> : <Folder className={cn(attachmentFolder.files > 0 && 'fill-white')} />}\n          </div>\n          <h6 className=\"text-xs font-medium truncate max-w-[70%]\">{attachmentFolder.name} </h6>\n        </div>\n\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              size={'xs'}\n              variant={'ghost'}\n              className=\"h-4 w-6 absolute top-1/2 right-2 -translate-y-1/2\"\n              icon={{ children: Ellipsis }}\n            />\n          </DropdownMenuTrigger>\n\n          <DropdownMenuContent className=\"\">\n            <div className=\"flex flex-col items-start justify-start [&_button]:justify-between [&_button]:w-full [&_button]:rounded-sm [&>div]:p-0 [&>div]:justify-between [&>div]:flex [&>div]:items-center [&>div]:w-full\">\n              <UploadRenameAttachments attachment={attachmentFolder} />\n              <UploadDownloadAttachments\n                withinDropdown={true}\n                itemsName={[attachmentFolder.name]}\n                variant={'ghost'}\n              />\n              <Separator />\n              <UploadAlertDeleteAttachments\n                itemsName={[attachmentFolder.name + ' folder']}\n                command={{\n                  label: 'Alt+D',\n                  key: 'Alt+d',\n                  variant: 'nothing',\n                  className: 'text-accent-foreground/40 w-full ml-6',\n                }}\n                itemsToDelete={[attachmentFolder.id]}\n              />\n            </div>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    )\n  }\n)\n\n/**\n * Component representing a single attachment file.\n * Displays the file name, type, and provides actions like renaming, downloading, and deleting.\n *\n * @param {Object} props - Component properties.\n * @param {FileType} props.attachmentFile - The file object containing attachment details.\n *\n * @returns {React.Element} The rendered component.\n */\nexport const UploadAttachmentFile = React.memo(({ attachmentFile }: { attachmentFile: FileType }) => {\n  const fileType = getFileType(attachmentFile.file)\n  const {\n    setPreviewFile,\n    selectedAttachments: selecttedAttachment,\n    setSelectedAttachments: setSelectedAttachment,\n  } = useUploadAdvancedContext()\n  const exist_in_selected = selecttedAttachment.some(attachment => attachment.id === attachmentFile.id)\n\n  return (\n    <div className=\"relative group/file\">\n      <div\n        className={cn(\n          'relative bg-card-foreground/5 rounded-md overflow-hidden w-full flex items-center justify-start gap-2 p-2 hover:bg-card-foreground/15 transition-all cursor-pointer'\n        )}\n        onClick={() => setPreviewFile(attachmentFile)}\n      >\n        <div\n          className={cn(\n            'relative [&_svg]:size-4 group-hover/file:opacity-0 opacity-100',\n            exist_in_selected && 'opacity-0'\n          )}\n        >\n          {FILE_TYPE_ICONS[fileType]}\n        </div>\n        <h6 className=\"text-xs font-medium truncate max-w-[70%]\">{attachmentFile.name}</h6>\n      </div>\n\n      <Checkbox\n        className={cn(\n          'absolute top-1/2 left-2 -translate-y-1/2 group-hover/file:opacity-100 opacity-0 w-[15px] h-[15px]',\n          exist_in_selected && '!opacity-100'\n        )}\n        checked={exist_in_selected}\n        onCheckedChange={e => {\n          if (e) return setSelectedAttachment(prev => [...prev, attachmentFile])\n          setSelectedAttachment(prev => prev.filter(attachment => attachment.id !== attachmentFile.id))\n        }}\n      />\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            size={'xs'}\n            variant={'ghost'}\n            className=\"h-4 w-6 absolute top-1/2 right-2 -translate-y-1/2\"\n            icon={{ children: Ellipsis }}\n          />\n        </DropdownMenuTrigger>\n\n        <DropdownMenuContent className=\"\">\n          <div className=\"flex flex-col items-start justify-start [&_button]:justify-between [&_button]:w-full [&_button]:rounded-sm [&>div]:p-0 [&>div]:justify-between [&>div]:flex [&>div]:items-center [&>div]:w-full space-y-1\">\n            <UploadRenameAttachments attachment={attachmentFile} />\n            <UploadDownloadAttachments\n              withinDropdown={true}\n              itemsName={[attachmentFile.name]}\n              variant={'ghost'}\n            />\n            <Separator />\n            <UploadAlertDeleteAttachments\n              itemsName={[attachmentFile.name]}\n              command={{\n                label: 'Alt+D',\n                key: 'Alt+d',\n                variant: 'nothing',\n                className: 'text-accent-foreground/40 w-full ml-6',\n              }}\n              itemsToDelete={[attachmentFile.id]}\n            />\n          </div>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n})\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload-sonner.tsx",
      "content": "import { Progress } from '@/registry/default/ui'\nimport { CircleCheck, Loader } from 'lucide-react'\nimport React from 'react'\nimport { Button } from '../button'\nimport { formatTime } from './upload.lib'\n// import { UploadManager } from './upload.lib'\n\n/**\n * A component that displays the progress of an upload. It includes a progress bar, number of files being uploaded, and a cancel button.\n * @param {number} progress - The current progress of the upload (0-100).\n * @param {number} files - The number of files being uploaded.\n * @param {number} [remainingTime] - The estimated remaining time in seconds for the upload to complete.\n * @returns {JSX.Element} The rendered upload progress component.\n */\nexport const UploadSonnerContent = ({\n  progress,\n  files,\n  remainingTime,\n}: {\n  progress: number\n  files: number\n  remainingTime?: number\n}): JSX.Element => (\n  <div className=\"flex gap-3 w-full\">\n    {progress >= 100 ? (\n      <CircleCheck className=\"fill-primary [&_path]:stroke-primary-foreground mt-2 !size-[18px]\" />\n    ) : (\n      <Loader className=\"animate-spin text-foreground-muted mt-2 opacity-70 !size-[18px]\" />\n    )}\n    <div className=\"flex flex-col gap-2 w-full\">\n      <div className=\"flex w-full justify-between\">\n        <p className=\"text-foreground text-sm\">\n          {progress >= 100\n            ? `Upload complete`\n            : files\n              ? `Uploading ${files} file${files > 1 ? 's' : ''}...`\n              : `Uploading...`}\n        </p>\n        <div className=\"flex items-center gap-2\">\n          {remainingTime && (\n            <p className=\"text-foreground-light text-sm font-mono\">{`${remainingTime && !isNaN(remainingTime) && isFinite(remainingTime) && remainingTime !== 0 ? `${formatTime(remainingTime)} remaining – ` : ''}`}</p>\n          )}\n          <p className=\"text-foreground-light text-sm font-mono\">{`${progress}%`}</p>\n        </div>\n      </div>\n      <Progress\n        value={progress}\n        className=\"w-full h-1\"\n      />\n      <div className=\"flex items-center justify-between gap-2 w-full\">\n        <small className=\"text-foreground-muted text-xs\">Please do not close the browser until completed</small>\n\n        {progress >= 100 && (\n          <Button\n            variant=\"default\"\n            size=\"xs\"\n          >\n            Cancel\n          </Button>\n        )}\n      </div>\n    </div>\n  </div>\n)\n\nexport const UploadSonnerContentMemo = React.memo(UploadSonnerContent)\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.assets.tsx",
      "content": "export const UploadOrDragSvg = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"107px\"\n      height=\"112px\"\n      viewBox=\"0 0 107 112\"\n      version=\"1.1\"\n      className={className}\n    >\n      <title>Group</title>\n      <desc>Created with Sketch.</desc>\n      <defs>\n        <rect\n          id=\"path-1\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-3\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-5\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-7\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n        <rect\n          id=\"path-9\"\n          x=\"0\"\n          y=\"0\"\n          width=\"32\"\n          height=\"32\"\n        />\n      </defs>\n      <g\n        id=\"Page-1\"\n        stroke=\"none\"\n        strokeWidth=\"1\"\n        fill=\"none\"\n        fillRule=\"evenodd\"\n      >\n        <g\n          id=\"Group\"\n          transform=\"translate(0.725557, -11.000000)\"\n        >\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#404040\"\n            points=\"17.2744429 66 54.2744429 53.2768099 91.2744429 66 54.2744429 78.4696017\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#404040\"\n            points=\"17.2744429 66 54.2744429 53.2768099 54.2744429 78.4696017\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#9A9A9A\"\n            points=\"-1.6795256e-13 51.6636125 38.5238299 39.4235592 54.2744429 53.2768099 17.2744429 65.8732058\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#8B8B8B\"\n            points=\"69.6714788 41.0959162 105.129824 52.6483825 91.2744429 65.8732058 54.5488858 53.4496466\"\n          />\n          <g\n            id=\"image-filled\"\n            transform=\"translate(35.774443, 64.750000) rotate(-13.000000) translate(-35.774443, -64.750000) translate(18.274443, 49.000000)\"\n            fillRule=\"nonzero\"\n          >\n            <rect\n              id=\"Rectangle\"\n              stroke=\"#727272\"\n              fill=\"#888888\"\n              x=\"0\"\n              y=\"0\"\n              width=\"35\"\n              height=\"30.625\"\n              rx=\"2\"\n            />\n            <path\n              d=\"M29.716563,12.2570055 L35,17.0602671 L35,17.0602671 L35,27.7083333 C35,29.3191639 33.6941639,30.625 32.0833333,30.625 L3.09610653,30.625 L3.09610653,30.625 L11.8121678,19.1480546 C12.713849,17.9607584 14.3657745,17.6445878 15.6421544,18.4150136 L18.9583333,20.4166667 L18.9583333,20.4166667 L25.5136882,12.5482153 C26.5447601,11.3106105 28.383886,11.1431825 29.6214908,12.1742544 C29.6537739,12.20115 29.6854721,12.2287402 29.716563,12.2570055 Z\"\n              id=\"Rectangle\"\n              fill=\"#727272\"\n            />\n            <circle\n              id=\"Oval\"\n              fill=\"#727272\"\n              cx=\"10.2083333\"\n              cy=\"10.2083333\"\n              r=\"4.375\"\n            />\n          </g>\n          <g\n            id=\"video-filled\"\n            transform=\"translate(49.774443, 75.312500) rotate(-7.000000) translate(-49.774443, -75.312500) translate(32.274443, 60.000000)\"\n            fillRule=\"nonzero\"\n          >\n            <rect\n              id=\"Rectangle\"\n              fill=\"#888888\"\n              x=\"0\"\n              y=\"0\"\n              width=\"35\"\n              height=\"30.625\"\n              rx=\"2\"\n            />\n            <path\n              d=\"M19.3614068,11.9160992 L22.8351072,18.8635001 C23.1952999,19.5838854 22.903306,20.4598668 22.1829207,20.8200596 C21.9804232,20.9213083 21.7571333,20.9740199 21.5307342,20.9740199 L14.5833333,20.9740199 C13.777918,20.9740199 13.125,20.3211018 13.125,19.5156866 C13.125,19.2892875 13.1777116,19.0659975 13.2789603,18.8635001 L16.7526608,11.9160992 C17.1128535,11.1957139 17.9888349,10.9037201 18.7092203,11.2639127 C18.9914477,11.4050265 19.220293,11.6338718 19.3614068,11.9160992 Z\"\n              id=\"Triangle\"\n              fill=\"#727272\"\n              transform=\"translate(18.057193, 16.041826) rotate(90.000000) translate(-18.057193, -16.041826) \"\n            />\n            <path\n              d=\"M32.0833333,0 C33.6941639,0 35,1.30583615 35,2.91666667 L35,27.7083333 C35,29.3191639 33.6941639,30.625 32.0833333,30.625 L2.91666667,30.625 C1.30583615,30.625 0,29.3191639 0,27.7083333 L0,2.91666667 C0,1.30583615 1.30583615,0 2.91666667,0 L32.0833333,0 Z M26.25,1.45833333 L8.75,1.45833333 C7.21238904,1.45833333 5.95267587,2.64815511 5.84133337,4.15732575 L5.83333333,4.375 L5.83333333,26.25 C5.83333333,27.787611 7.02315511,29.0473241 8.53232575,29.1586667 L8.75,29.1666667 L26.25,29.1666667 C27.787611,29.1666667 29.0473241,27.9768449 29.1586667,26.4676742 L29.1666667,26.25 L29.1666667,4.375 C29.1666667,2.76416948 27.8608305,1.45833333 26.25,1.45833333 Z M3.64583333,23.3333333 L2.1875,23.3333333 C1.78479238,23.3333333 1.45833333,23.6597923 1.45833333,24.0625 L1.45833333,24.0625 L1.45833333,28.4375 C1.45833333,28.8402077 1.78479238,29.1666667 2.1875,29.1666667 L2.1875,29.1666667 L3.64583333,29.1666667 C4.04854096,29.1666667 4.375,28.8402077 4.375,28.4375 L4.375,28.4375 L4.375,24.0625 C4.375,23.6597923 4.04854096,23.3333333 3.64583333,23.3333333 L3.64583333,23.3333333 Z M32.8125,23.3333333 L31.3541667,23.3333333 C30.951459,23.3333333 30.625,23.6597923 30.625,24.0625 L30.625,24.0625 L30.625,28.4375 C30.625,28.8402077 30.951459,29.1666667 31.3541667,29.1666667 L31.3541667,29.1666667 L32.8125,29.1666667 C33.2152077,29.1666667 33.5416667,28.8402077 33.5416667,28.4375 L33.5416667,28.4375 L33.5416667,24.0625 C33.5416667,23.6597923 33.2152077,23.3333333 32.8125,23.3333333 L32.8125,23.3333333 Z M3.64583333,16.0416667 L2.1875,16.0416667 C1.78479238,16.0416667 1.45833333,16.3681257 1.45833333,16.7708333 L1.45833333,16.7708333 L1.45833333,21.1458333 C1.45833333,21.548541 1.78479238,21.875 2.1875,21.875 L2.1875,21.875 L3.64583333,21.875 C4.04854096,21.875 4.375,21.548541 4.375,21.1458333 L4.375,21.1458333 L4.375,16.7708333 C4.375,16.3681257 4.04854096,16.0416667 3.64583333,16.0416667 L3.64583333,16.0416667 Z M32.8125,16.0416667 L31.3541667,16.0416667 C30.951459,16.0416667 30.625,16.3681257 30.625,16.7708333 L30.625,16.7708333 L30.625,21.1458333 C30.625,21.548541 30.951459,21.875 31.3541667,21.875 L31.3541667,21.875 L32.8125,21.875 C33.2152077,21.875 33.5416667,21.548541 33.5416667,21.1458333 L33.5416667,21.1458333 L33.5416667,16.7708333 C33.5416667,16.3681257 33.2152077,16.0416667 32.8125,16.0416667 L32.8125,16.0416667 Z M3.64583333,8.75 L2.1875,8.75 C1.78479238,8.75 1.45833333,9.07645904 1.45833333,9.47916667 L1.45833333,9.47916667 L1.45833333,13.8541667 C1.45833333,14.2568743 1.78479238,14.5833333 2.1875,14.5833333 L2.1875,14.5833333 L3.64583333,14.5833333 C4.04854096,14.5833333 4.375,14.2568743 4.375,13.8541667 L4.375,13.8541667 L4.375,9.47916667 C4.375,9.07645904 4.04854096,8.75 3.64583333,8.75 L3.64583333,8.75 Z M32.8125,8.75 L31.3541667,8.75 C30.951459,8.75 30.625,9.07645904 30.625,9.47916667 L30.625,9.47916667 L30.625,13.8541667 C30.625,14.2568743 30.951459,14.5833333 31.3541667,14.5833333 L31.3541667,14.5833333 L32.8125,14.5833333 C33.2152077,14.5833333 33.5416667,14.2568743 33.5416667,13.8541667 L33.5416667,13.8541667 L33.5416667,9.47916667 C33.5416667,9.07645904 33.2152077,8.75 32.8125,8.75 L32.8125,8.75 Z M3.64583333,1.45833333 L2.1875,1.45833333 C1.78479238,1.45833333 1.45833333,1.78479238 1.45833333,2.1875 L1.45833333,2.1875 L1.45833333,6.5625 C1.45833333,6.96520762 1.78479238,7.29166667 2.1875,7.29166667 L2.1875,7.29166667 L3.64583333,7.29166667 C4.04854096,7.29166667 4.375,6.96520762 4.375,6.5625 L4.375,6.5625 L4.375,2.1875 C4.375,1.78479238 4.04854096,1.45833333 3.64583333,1.45833333 L3.64583333,1.45833333 Z M32.8125,1.45833333 L31.3541667,1.45833333 C30.951459,1.45833333 30.625,1.78479238 30.625,2.1875 L30.625,2.1875 L30.625,6.5625 C30.625,6.96520762 30.951459,7.29166667 31.3541667,7.29166667 L31.3541667,7.29166667 L32.8125,7.29166667 C33.2152077,7.29166667 33.5416667,6.96520762 33.5416667,6.5625 L33.5416667,6.5625 L33.5416667,2.1875 C33.5416667,1.78479238 33.2152077,1.45833333 32.8125,1.45833333 L32.8125,1.45833333 Z\"\n              id=\"Combined-Shape\"\n              fill=\"#727272\"\n            />\n          </g>\n          <g\n            id=\"audio-filled\"\n            transform=\"translate(67.774443, 66.500000) rotate(11.000000) translate(-67.774443, -66.500000) translate(52.274443, 51.000000)\"\n            fill=\"#888888\"\n            fillRule=\"nonzero\"\n            stroke=\"#6F6F6F\"\n          >\n            <path\n              d=\"M30.4926751,2.15980127 L30.4926751,3.5883727 L30.4916751,3.60816221 L30.4926751,23.5883727 C30.4926751,26.6708922 28.0519127,29.1833412 24.9975752,29.2985321 L24.7783894,29.3026584 C21.6224766,29.3026584 19.0641037,26.7442856 19.0641037,23.5883727 C19.0641037,20.4324598 21.6224766,17.874087 24.7783894,17.874087 C25.2717358,17.874087 25.7504798,17.9366068 26.2071309,18.0541557 L26.2066751,5.28916221 L11.9206751,6.19716221 L11.9212466,25.4455156 C11.9212466,25.5507127 11.9050029,25.6521158 11.874887,25.7473538 C11.5164582,28.5582509 9.11547274,30.7312298 6.20696085,30.7312298 C3.05104799,30.7312298 0.492675137,28.172857 0.492675137,25.0169441 C0.492675137,21.8610313 3.05104799,19.3026584 6.20696085,19.3026584 C6.70020715,19.3026584 7.17885708,19.3651529 7.63542453,19.4826557 L7.63553228,3.15980127 C7.63553228,2.60751652 8.08324753,2.15980127 8.63553228,2.15980127 L8.71874605,2.15826839 C8.82933837,2.12377779 8.94501944,2.10184869 9.06410371,2.09427389 L29.0641037,0.822099447 C29.8530819,0.771913551 30.4926751,1.37082306 30.4926751,2.15980127 Z\"\n              id=\"Combined-Shape\"\n            />\n          </g>\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#9A9A9A\"\n            points=\"17.2744429 66 54.2744429 78.4696017 54.2744429 122.469602 17.2744429 110\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#B0B0B0\"\n            transform=\"translate(72.774443, 94.234801) scale(-1, 1) translate(-72.774443, -94.234801) \"\n            points=\"54.2744429 66 91.2744429 78.4696017 91.2744429 122.469602 54.2744429 110\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#8B8B8B\"\n            points=\"17.2744429 66 54.2744429 78.4696017 37.3329548 93.2446257 1.31450406e-13 80.3759293\"\n          />\n          <polygon\n            id=\"Rectangle\"\n            fill=\"#9A9A9A\"\n            points=\"54.2744429 78.4696017 91.2744429 66 106.345958 79.6223129 68.2965835 92.098224\"\n          />\n          <g\n            id=\"file-filled\"\n            transform=\"translate(54.274443, 16.000000)\"\n            fillRule=\"nonzero\"\n          >\n            <path\n              d=\"M2.94117647,0 L14.7058824,0 L14.7058824,0 L25,10.2941176 L25,27.9411765 C25,29.5655434 23.6831904,30.8823529 22.0588235,30.8823529 L2.94117647,30.8823529 C1.31680956,30.8823529 0,29.5655434 0,27.9411765 L0,2.94117647 C0,1.31680956 1.31680956,0 2.94117647,0 Z\"\n              id=\"Rectangle\"\n              stroke=\"#6F6F6F\"\n              fill=\"#888888\"\n            />\n            <path\n              d=\"M14.7058824,0 L25,10.2941176 L17.6470588,10.2941176 C16.0226919,10.2941176 14.7058824,8.97730809 14.7058824,7.35294118 L14.7058824,0 L14.7058824,0 Z\"\n              id=\"Triangle\"\n              fill=\"#727272\"\n            />\n          </g>\n          <g\n            id=\"closedhand\"\n            transform=\"translate(57.274443, 0.000000)\"\n          >\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-2\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <path\n                d=\"M12.6,13 C13.1,12.8 14,12.9 14.3,13.5 C14.5,14 14.7,14.7 14.7,14.6 C14.7,14.2 14.7,13.4 14.8,13 C14.9,12.7 15.1,12.4 15.5,12.3 C15.8,12.2 16.1,12.2 16.4,12.2 C16.7,12.3 17,12.5 17.2,12.7 C17.6,13.3 17.6,14.6 17.6,14.5 C17.7,14.2 17.7,13.3 17.9,12.9 C18,12.7 18.4,12.5 18.6,12.4 C18.9,12.3 19.3,12.3 19.6,12.4 C19.8,12.4 20.2,12.7 20.3,12.9 C20.5,13.2 20.6,14.2 20.7,14.6 C20.7,14.7 20.8,14.2 21,13.9 C21.4,13.3 22.8,13.1 22.9,14.5 C22.9,15.2 22.9,15.1 22.9,15.6 C22.9,16.1 22.9,16.4 22.9,16.8 C22.9,17.2 22.8,18.1 22.7,18.5 C22.6,18.8 22.3,19.5 22,19.9 C22,19.9 20.9,21.1 20.8,21.7 C20.7,22.3 20.7,22.3 20.7,22.7 C20.7,23.1 20.8,23.6 20.8,23.6 C20.8,23.6 20,23.7 19.6,23.6 C19.2,23.5 18.7,22.8 18.6,22.5 C18.4,22.2 18.1,22.2 17.9,22.5 C17.7,22.9 17.2,23.6 16.9,23.6 C16.2,23.7 14.8,23.6 13.8,23.6 C13.8,23.6 14,22.6 13.6,22.2 C13.3,21.9 12.8,21.4 12.5,21.1 L11.7,20.2 C11.4,19.8 10.7,19.3 10.5,18.2 C10.3,17.3 10.3,16.8 10.5,16.4 C10.7,16 11.2,15.8 11.4,15.8 C11.6,15.8 12.1,15.8 12.3,15.9 C12.5,16 12.6,16.1 12.8,16.3 C13,16.6 13.1,16.8 13,16.4 C12.9,16.1 12.7,15.8 12.6,15.4 C12.5,15 12.2,14.5 12.2,13.9 C11.7,13.9 11.8,13.3 12.6,13\"\n                id=\"Path\"\n                fill=\"#FFFFFF\"\n                fillRule=\"nonzero\"\n                mask=\"url(#mask-2)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-4\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <path\n                d=\"M12.6,13 C13.1,12.8 14,12.9 14.3,13.5 C14.5,14 14.7,14.7 14.7,14.6 C14.7,14.2 14.7,13.4 14.8,13 C14.9,12.7 15.1,12.4 15.5,12.3 C15.8,12.2 16.1,12.2 16.4,12.2 C16.7,12.3 17,12.5 17.2,12.7 C17.6,13.3 17.6,14.6 17.6,14.5 C17.7,14.2 17.7,13.3 17.9,12.9 C18,12.7 18.4,12.5 18.6,12.4 C18.9,12.3 19.3,12.3 19.6,12.4 C19.8,12.4 20.2,12.7 20.3,12.9 C20.5,13.2 20.6,14.2 20.7,14.6 C20.7,14.7 20.8,14.2 21,13.9 C21.4,13.3 22.8,13.1 22.9,14.5 C22.9,15.2 22.9,15.1 22.9,15.6 C22.9,16.1 22.9,16.4 22.9,16.8 C22.9,17.2 22.8,18.1 22.7,18.5 C22.6,18.8 22.3,19.5 22,19.9 C22,19.9 20.9,21.1 20.8,21.7 C20.7,22.3 20.7,22.3 20.7,22.7 C20.7,23.1 20.8,23.6 20.8,23.6 C20.8,23.6 20,23.7 19.6,23.6 C19.2,23.5 18.7,22.8 18.6,22.5 C18.4,22.2 18.1,22.2 17.9,22.5 C17.7,22.9 17.2,23.6 16.9,23.6 C16.2,23.7 14.8,23.6 13.8,23.6 C13.8,23.6 14,22.6 13.6,22.2 C13.3,21.9 12.8,21.4 12.5,21.1 L11.7,20.2 C11.4,19.8 10.7,19.3 10.5,18.2 C10.3,17.3 10.3,16.8 10.5,16.4 C10.7,16 11.2,15.8 11.4,15.8 C11.6,15.8 12.1,15.8 12.3,15.9 C12.5,16 12.6,16.1 12.8,16.3 C13,16.6 13.1,16.8 13,16.4 C12.9,16.1 12.7,15.8 12.6,15.4 C12.5,15 12.2,14.5 12.2,13.9 C11.7,13.9 11.8,13.3 12.6,13 Z\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinejoin=\"round\"\n                mask=\"url(#mask-4)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-6\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <line\n                x1=\"19.6\"\n                y1=\"20.7\"\n                x2=\"19.6\"\n                y2=\"17.3\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinecap=\"round\"\n                mask=\"url(#mask-6)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-8\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <line\n                x1=\"17.6\"\n                y1=\"20.7\"\n                x2=\"17.5\"\n                y2=\"17.3\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinecap=\"round\"\n                mask=\"url(#mask-8)\"\n              />\n            </g>\n            <g id=\"Clipped\">\n              <mask\n                id=\"mask-10\"\n                fill=\"white\"\n              >\n                <use />\n              </mask>\n              <g id=\"SVGID_1_\" />\n              <line\n                x1=\"15.6\"\n                y1=\"17.3\"\n                x2=\"15.6\"\n                y2=\"20.7\"\n                id=\"Path\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.75\"\n                strokeLinecap=\"round\"\n                mask=\"url(#mask-10)\"\n              />\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.constants.tsx",
      "content": "import { Columns2, File, FileAudio, FileImage, FileText, FileVideo, Rows2 } from 'lucide-react'\nimport { DuckDropdownMenuRadioGroupProps } from '../dropdown-menu'\n\n/**\n * Enum representing different file types.\n * @enum {string}\n */\nexport enum FileTypeEnum {\n  Audio = 'audio',\n  Text = 'text',\n  Image = 'image',\n  Video = 'video',\n  Pdf = 'pdf',\n  Unknown = 'unknown',\n}\n\n/**\n * Mapping of file types to their corresponding icons.\n * @type {Record<FileTypeEnum, JSX.Element>}\n */\nexport const FILE_TYPE_ICONS: Record<FileTypeEnum, JSX.Element> = {\n  [FileTypeEnum.Audio]: <FileAudio className=\"w-8 h-8\" />,\n  [FileTypeEnum.Text]: <FileText className=\"w-8 h-8\" />,\n  [FileTypeEnum.Image]: <FileImage className=\"w-8 h-8\" />,\n  [FileTypeEnum.Video]: <FileVideo className=\"w-8 h-8\" />,\n  [FileTypeEnum.Pdf]: <FileText className=\"w-8 h-8\" />,\n  [FileTypeEnum.Unknown]: <File className=\"w-8 h-8\" />,\n}\n\n// Maximum file size allowed for uploads (10MB).\nexport const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10MB\n\n// CSS class for tree height.\nexport const TREE_HEIGHT = `h-[510px]`\n\n// CSS class for tree width.\nexport const TREE_WIDTH = `w-[250px]`\nexport const PREVIEW_WIDTH = `w-[400px]`\nexport const CONTENT_WIDTH_PREVIEW_OPEN = `w-[calc(100%-400px)]`\n\n/**\n * Content options for dropdown menus.\n * @type {Record<string, DuckDropdownMenuRadioGroupProps['content']>}\n */\nexport const CONTENT_POILERPLATE: Record<string, DuckDropdownMenuRadioGroupProps['content']> = {\n  view: [\n    { children: 'As Columns', value: 'As duck', icon: { children: Columns2 } },\n    { children: 'As Rows', value: 'duck', icon: { children: Rows2 } },\n  ],\n  sort: [\n    { children: 'Name', value: 'name' },\n    { children: 'Time created', value: 'time_created' },\n    { children: 'Time modified', value: 'time_modified' },\n    { children: 'Last time accessed', value: 'last_time_accessed' },\n  ],\n  order: [\n    { children: 'Ascending', value: 'asc' },\n    { children: 'Descending', value: 'desc' },\n  ],\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.dto.ts",
      "content": "import { z } from 'zod'\n\nexport const fileTypeSchema = z.object({\n  id: z.string().uuid(),\n  file: z.instanceof(File),\n  name: z.string(),\n  url: z.string().nullable(),\n  type: z.string(),\n  size: z.string(),\n  createdAt: z.instanceof(Date),\n  updatedAt: z.instanceof(Date),\n})\n\nexport type FileSchemaType = z.infer<typeof fileTypeSchema>\n\nexport const attachmentSchema = fileTypeSchema.extend({\n  treeLevel: z.number(),\n})\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.lib.tsx",
      "content": "import { toast } from 'sonner'\nimport {\n  FileType,\n  FolderType,\n  HandleAttachmentProps,\n  UploadFilesArgs,\n  UploadManagerClass,\n  UploadPromiseArgs,\n  UploadPromiseReturn,\n} from './upload.types'\nimport { uuidv7 } from 'uuidv7'\nimport React from 'react'\nimport { UploadSonnerContent, UploadSonnerContentMemo } from './upload-sonner'\nimport { FileTypeEnum, MAX_FILE_SIZE } from './upload.constants'\n\n/**\n * The `UploadManager` class is responsible for handling file upload and attachment management.\n * It provides methods to rename attachments, upload files, manage folder contents, and track the progress of file uploads.\n */\nclass UploadManager implements UploadManagerClass {\n  // -------------------------------------------------------------------------------------------\n  /**\n   * Handles the attachment process from a file input, validates the files, and updates the state with valid attachments.\n   *\n   * @param {HandleAttachmentProps} params - The input event and the function to set the attachments state.\n   * @returns {Promise<void>} - Returns a promise resolving to nothing.\n   */\n}\n\nexport const uploadPromise = ({ files, toastId }: UploadPromiseArgs): Promise<UploadPromiseReturn> => {\n  return new Promise(resolve => {\n    let currentProgress = 0\n    const remainingTime = getRemainingTime(currentProgress, 100)\n\n    // Show initial toast loading message\n    toast.loading(\n      <UploadSonnerContentMemo\n        progress={currentProgress}\n        remainingTime={remainingTime}\n        files={files}\n      />,\n      { id: toastId }\n    )\n\n    // Simulate progress update with interval\n    const intervalId = setInterval(() => {\n      currentProgress += Math.floor(Math.random() * 10) + 1\n      if (currentProgress > 100) currentProgress = 100\n\n      // Update toast content with the new progress and remaining time\n      toast.loading(\n        <UploadSonnerContentMemo\n          progress={currentProgress}\n          remainingTime={remainingTime}\n          files={files}\n        />,\n        { id: toastId }\n      )\n\n      // Resolve the promise once progress reaches 100%\n      if (currentProgress >= 100) {\n        clearInterval(intervalId)\n        resolve({ progress: currentProgress, files, remainingTime, message: 'Upload complete', toastId })\n      }\n    }, 20)\n  })\n}\n\nexport type FolderOpenArgs = {\n  attachmentFolder: FolderType\n  setSelected: React.Dispatch<React.SetStateAction<FolderType[]>>\n  exist_in_tree: boolean\n}\n\nexport function folderOpen({ attachmentFolder, setSelected, exist_in_tree }: FolderOpenArgs) {\n  setSelected(old => {\n    if (!exist_in_tree)\n      return [...old.filter(item => !(item.treeLevel >= attachmentFolder.treeLevel) && item), attachmentFolder]\n\n    return old.filter(item => !(item.treeLevel >= attachmentFolder.treeLevel))\n  })\n}\n\n// Helper function to calculate remaining time\nexport function getRemainingTime(currentProgress: number, maxProgress: number) {\n  const progressPercentage = (currentProgress / maxProgress) * 100\n  const calculatedRemainingTime = 200 - progressPercentage * 2\n  return calculatedRemainingTime > 0 ? calculatedRemainingTime : 0\n}\n\nexport async function advancedUploadAttachments(props: UploadFilesArgs) {\n  const { e, selectedFolder, setAttachments } = props\n\n  try {\n    const files = e.currentTarget.files\n\n    if (!files?.length)\n      return toast.error('Please select a file', {\n        position: 'top-right',\n      })\n\n    const newAttachments: FileType[] = []\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n\n      if (file.size > MAX_FILE_SIZE) {\n        toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`, { position: 'top-right' })\n        continue // Skip this file and continue with the next\n      }\n\n      const attachment: FileType = {\n        id: uuidv7(),\n        file: file,\n        name: file.name,\n        url: null,\n        type: file.type,\n        size: file.size.toString(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        treeLevel: selectedFolder.length ? selectedFolder[selectedFolder.length - 1].treeLevel + 1 : 1,\n      }\n\n      newAttachments.push(attachment)\n    }\n\n    // random id\n    const toastId = uuidv7()\n\n    // Upload promise\n    const promise = await uploadPromise({ files: files.length, toastId })\n\n    // Show upload progress toast\n    promise &&\n      toast.success(`Successfully Uploaded ${files.length} file${files.length > 1 ? 's' : ''}`, {\n        duration: 2000,\n        position: 'top-right',\n        id: toastId,\n      })\n\n    setAttachments(old => {\n      if (selectedFolder.length > 0) {\n        const selectedFolderId = selectedFolder[selectedFolder.length - 1].id\n        // Update the attachments recursively\n        return updateFolderContent(old, selectedFolderId, newAttachments)\n      }\n\n      // If no folder is selected, just add new attachments to the old attachments\n      return [...old, ...newAttachments]\n    })\n\n    // Clear the input\n    e.target.value = ''\n  } catch (error) {\n    console.log(error)\n    toast.error('Upload failed. Please try again.', { position: 'top-right' })\n  }\n}\n\nexport function updateFolderContent<T extends FileType | FolderType>(\n  array: T[],\n  folderId: string,\n  newAttachments: T[]\n): T[] {\n  return array.map(item => {\n    // If the current item is the folder we need to update\n    if (item.id === folderId) {\n      return {\n        ...item,\n        files: (item as FolderType).files + newAttachments.length,\n        content: [...(item as FolderType).content, ...newAttachments],\n      }\n    }\n\n    // If the current item contains nested folders, recursively call the function to go deeper\n    if (Array.isArray((item as FolderType).content)) {\n      return {\n        ...item,\n        content: updateFolderContent((item as FolderType).content, folderId, newAttachments),\n      }\n    }\n\n    // If the item is not the folder and doesn't have nested folders, return it unchanged\n    return item\n  })\n}\n\nexport function formatTime(seconds: number) {\n  const days = Math.floor(seconds / (24 * 3600))\n  seconds %= 24 * 3600\n  const hours = Math.floor(seconds / 3600)\n  seconds %= 3600\n  const minutes = Math.floor(seconds / 60)\n  seconds = Math.floor(seconds % 60)\n\n  if (days > 0) return `${days}d `\n  if (hours > 0) return `${hours}h `\n  if (minutes > 0) return `${minutes}m `\n  return `${seconds}s`\n}\n\nexport const getFileType = (file: Blob | null): FileTypeEnum => {\n  if (!file) return FileTypeEnum.Unknown\n  if (file.type.startsWith('audio/')) return FileTypeEnum.Audio\n  if (file.type.startsWith('text/')) return FileTypeEnum.Text\n  if (file.type.startsWith('image/')) return FileTypeEnum.Image\n  if (file.type.startsWith('video/')) return FileTypeEnum.Video\n  if (file.type.startsWith('application/pdf')) return FileTypeEnum.Pdf\n  return FileTypeEnum.Unknown\n}\n\nexport const getAttachmentsToState = ({ e, setAttachmentsState }: HandleAttachmentProps) => {\n  const files = e.currentTarget.files\n\n  if (!files) return toast.error('Please select a file')\n\n  const newAttachments: FileType[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i]\n\n    // if (file.size > 10 * 1024 * 1024) {\n    //   toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`)\n    //   continue // Skip this file and continue with the next\n    // }\n\n    const attachment: FileType = {\n      id: uuidv7(),\n      file: file,\n      name: file.name,\n      url: null,\n      type: file.type,\n      size: file.size.toString(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n\n    newAttachments.push(attachment)\n  }\n\n  setAttachmentsState(prev => [...prev, ...newAttachments])\n  e.currentTarget.value = ''\n}\n\nexport const handleAdvancedAttachment = ({ e, setAttachmentsState }: HandleAttachmentProps) => {\n  const files = e.currentTarget.files\n\n  if (!files)\n    return toast.error('Please select a file', {\n      position: 'top-right',\n    })\n\n  const newAttachments: FileType[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i]\n\n    // if (file.size > 10 * 1024 * 1024) {\n    //   toast.error(`File has exceeded the max size: ${file.name.slice(0, 15)}...`)\n    //   continue // Skip this file and continue with the next\n    // }\n\n    const attachment: FileType = {\n      id: uuidv7(),\n      file: file,\n      name: file.name,\n      url: null,\n      type: file.type,\n      size: file.size.toString(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      treeLevel: 1,\n    }\n\n    newAttachments.push(attachment)\n  }\n\n  setAttachmentsState(prev => [...prev, ...newAttachments])\n  e.currentTarget.value = ''\n}\n\n/**\n * Deep merge two objects, recursively merging properties.\n * - Handles arrays, objects, and primitive values.\n * - Ensures immutability by not mutating the original target object.\n *\n * @param target - The target object.\n * @param source - The source object.\n * @returns A new object with merged properties.\n */\nexport const deepMerge = <T extends Record<string, any>>(target: T, source: Partial<T>): T => {\n  // Create a new object to avoid mutating the original target\n  const output = { ...target }\n\n  for (const key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      const targetValue = target[key]\n      const sourceValue = source[key]\n\n      // Check if both target and source are objects, and not null\n      if (isObject(targetValue) && isObject(sourceValue)) {\n        // Recursively merge the objects\n        output[key] = deepMerge(targetValue, sourceValue as Partial<T[Extract<keyof T, string>] & Record<string, any>>)\n      } else {\n        // Otherwise, directly assign the source value (includes arrays and primitives)\n        output[key] = sourceValue as T[Extract<keyof T, string>]\n      }\n    }\n  }\n\n  return output\n}\n\n/**\n * Helper function to check if a value is a plain object (and not an array or null).\n *\n * @param value - The value to check.\n * @returns Whether the value is a plain object.\n */\nconst isObject = (value: any): value is Record<string, any> => {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\nexport function addFolderToPath({\n  selectedFolder,\n  setAttachments,\n  setSelectedFolder,\n  folderName,\n}: {\n  selectedFolder: FolderType[]\n  setSelectedFolder: React.Dispatch<React.SetStateAction<FolderType[]>>\n  setAttachments: React.Dispatch<React.SetStateAction<(FileType | FolderType)[]>>\n  folderName: string\n}) {\n  const emptyFolder: FolderType = {\n    id: Math.random().toString(36).slice(2),\n    name: folderName,\n    files: 0,\n    content: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    treeLevel: selectedFolder.length ? selectedFolder[selectedFolder.length - 1].treeLevel + 1 : 1,\n  }\n\n  const addToFolderTree = (items: (FileType | FolderType)[], selectedId: string): (FileType | FolderType)[] => {\n    return items.map(item => {\n      if ('content' in item && item.id === selectedId) {\n        return {\n          ...item,\n          content: [...item.content, emptyFolder],\n          files: item.files + 1,\n          updatedAt: new Date(),\n        }\n      } else if ('content' in item) {\n        return {\n          ...item,\n          content: addToFolderTree(item.content, selectedId),\n        }\n      }\n      return item\n    })\n  }\n\n  const updateSelectedFolder = (selectedFolder: FolderType[], emptyFolder: FolderType): FolderType[] => {\n    return selectedFolder.map((folder, index) => {\n      if (index === selectedFolder.length - 1) {\n        // Update the most deeply selected folder\n        return {\n          ...folder,\n          content: [...folder.content, emptyFolder],\n          files: folder.files + 1,\n          updatedAt: new Date(),\n        }\n      }\n      return folder\n    })\n  }\n\n  setAttachments(oldAttachments => {\n    if (!selectedFolder.length) {\n      // Add folder to root level if no folder is selected\n      return [...oldAttachments, emptyFolder]\n    }\n\n    // Use the ID of the most deeply selected folder\n    const selectedId = selectedFolder[selectedFolder.length - 1].id\n    return addToFolderTree(oldAttachments, selectedId)\n  })\n\n  setSelectedFolder(oldSelectedFolder => {\n    if (!selectedFolder.length) {\n      // If no folder is selected, keep the selected folder unchanged\n      return oldSelectedFolder\n    }\n    return updateSelectedFolder(oldSelectedFolder, emptyFolder)\n  })\n\n  toast.info('Folder added successfully!')\n}\n\nexport function searchAttachmentsByKey<T>(array: T[], predicate: (item: T) => boolean, key: string): T | null {\n  for (const item of array) {\n    // Check if the current item satisfies the predicate for the specified key\n    if (predicate(item)) {\n      return item // Return the item directly if the predicate matches\n    }\n\n    // If the item has the specified key and it's an array, search the nested array\n    if (Array.isArray(item[key as keyof T])) {\n      const nestedResult = searchAttachmentsByKey(item[key as keyof T] as T[], predicate, key)\n      if (nestedResult) {\n        return nestedResult // Return the exact object found within the nested structure\n      }\n    }\n  }\n\n  return null // Return null if no match is found\n}\n\n/**\n * Recursively deletes folders by an array of IDs, including all their nested content.\n * @param attachments The list of folders or attachments.\n * @param targetIds The array of IDs of the folders to delete.\n * @returns Updated folder structure with the target folders and their nested content removed.\n */\nexport function deleteAttachmentById<T extends FileType | FolderType>(attachments: T[], targetIds: string[]): T[] {\n  return attachments\n    .filter(attachment => !targetIds.includes(attachment.id)) // Remove target folders at this level\n    .map(attachment => {\n      if ((attachment as FolderType).content) {\n        // Recursively check and clean nested content\n        return {\n          ...attachment,\n          content: deleteAttachmentById((attachment as FolderType).content, targetIds),\n        }\n      }\n      return attachment // Return folder if no nested content\n    })\n}\n\n/**\n * Recursively renames folders or files by their IDs.\n * @param attachments The list of folders or attachments.\n * @param targetIds The array of IDs of the folders or files to rename.\n * @param newName The new name for the target folders or files.\n * @returns Updated folder structure with the renamed items.\n */\nexport function renameAttachmentById<T extends FileType | FolderType>(\n  attachments: T[],\n  targetIds: string[],\n  newName: string\n): T[] {\n  return attachments.map(attachment => {\n    if (targetIds.includes(attachment.id)) {\n      // Rename the folder or file\n      return { ...attachment, name: newName, updatedAt: new Date() }\n    }\n    if ((attachment as FolderType).content) {\n      // Recursively check and rename nested content\n      return {\n        ...attachment,\n        content: renameInFolderContent((attachment as FolderType).content, targetIds, newName),\n      }\n    }\n    return attachment // Return folder if no match\n  })\n}\n\nexport const moveAttachmentsToPath = ({\n  setAttachments,\n  setSelectedAttachment,\n  selectedAttachments,\n  path,\n}: {\n  setAttachments: React.Dispatch<React.SetStateAction<(FileType | FolderType)[]>>\n  setSelectedAttachment: React.Dispatch<React.SetStateAction<FileType[]>>\n  selectedAttachments: FileType[]\n  path: string\n}): void => {\n  const pathParts = path.split('/').filter(part => part.trim() !== '')\n\n  // Handle the state update for attachments\n  setAttachments(prevAttachments => {\n    const updatedAttachments = deleteAttachmentById(\n      prevAttachments,\n      selectedAttachments.map(attachment => attachment.id)\n    )\n\n    // Recursively process each part of the path\n    const processPath = (\n      attachments: (FileType | FolderType)[],\n      pathParts: string[],\n      treeLevel: number\n    ): (FileType | FolderType)[] => {\n      if (pathParts.length === 0) {\n        // If path is empty, add to root (main attachments array)\n        if (treeLevel === 1) {\n          attachments = [...attachments, ...selectedAttachments]\n        }\n        return attachments\n      }\n\n      const currentFolderName = pathParts[0]\n      const remainingPathParts = pathParts.slice(1)\n\n      // Check if the current part is a folder or file\n      let folder = attachments.find(attachment => 'name' in attachment && attachment.name === currentFolderName) as\n        | FolderType\n        | undefined\n\n      // If we are at the last path part and we are dealing with a file, add to the file content\n      if (remainingPathParts.length === 0 && folder) {\n        folder.content = [...folder.content, ...selectedAttachments] // Add new attachments to file's content\n        folder.updatedAt = new Date() // Update the file's last updated time\n        folder.files += selectedAttachments.length // Update the file count\n        return attachments\n      }\n\n      // If the folder doesn't exist, create it\n      if (!folder) {\n        folder = {\n          id: `${currentFolderName}-${Date.now()}`,\n          name: currentFolderName,\n          content: remainingPathParts.length > 0 ? [] : selectedAttachments, // Only add attachments if it's the last part\n          files: remainingPathParts.length > 0 ? 1 : selectedAttachments.length, // Set file count based on content\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          treeLevel,\n        }\n\n        // Add the new folder to the attachments array\n        attachments.push(folder)\n      } else {\n        // If folder exists, update it with new content at the last part\n        folder.updatedAt = new Date() // Update the folder's last updated time\n        folder.files += selectedAttachments.length // Update the files count\n      }\n\n      // Continue processing subfolders if there are more path parts\n      if ('content' in folder && remainingPathParts.length > 0) {\n        folder.content = processPath(folder.content, remainingPathParts, treeLevel + 1)\n      }\n\n      return attachments\n    }\n\n    // Process the path recursively and update the attachments\n    const updatedAttachmentsWithPath = processPath(updatedAttachments, pathParts, 1)\n\n    // Update the selected attachments state\n    setSelectedAttachment([])\n\n    // Return the updated attachments array to set it into the state\n    return updatedAttachmentsWithPath\n  })\n}\n\nexport function selectAttachmentFromFolderContent({\n  filesInCurrentTree,\n  setSelectedAttachment,\n}: {\n  filesInCurrentTree: (FileType | FolderType)[]\n  setSelectedAttachment: React.Dispatch<React.SetStateAction<FileType[]>>\n  checkState?: boolean\n}) {\n  setSelectedAttachment(prevSelected => {\n    const allFilesSelected = filesInCurrentTree.every(file =>\n      prevSelected.some(attachment => attachment.id === file.id)\n    )\n\n    // If all files are already selected, remove them\n    if (allFilesSelected)\n      return prevSelected.filter(attachment => !filesInCurrentTree.some(file => file.id === attachment.id))\n    // Otherwise, add the files that are not already selected\n    const newFiles = filesInCurrentTree.filter(file => !prevSelected.some(attachment => attachment.id === file.id))\n    return [...prevSelected, ...newFiles] as FileType[]\n  })\n}\n\nexport const uploadAttachmentPromise = (files: number, toastId: string): Promise<UploadPromiseReturn> => {\n  toast.loading(\n    <UploadSonnerContent\n      progress={0}\n      files={files}\n    />,\n    {\n      duration: 400000,\n      id: toastId,\n    }\n  )\n\n  return new Promise(resolve => {\n    let currentProgress = 0\n\n    toast.loading(\n      <UploadSonnerContent\n        progress={currentProgress}\n        files={files}\n      />,\n      {\n        duration: 400000,\n        id: toastId,\n      }\n    )\n\n    const intervalId = setInterval(() => {\n      currentProgress += Math.floor(Math.random() * 10) + 1 // Increment progress by a random value\n      if (currentProgress > 100) currentProgress = 100 // Ensure progress does not exceed 100%\n\n      if (currentProgress >= 100) {\n        clearInterval(intervalId) // Clear the interval once upload is complete\n        resolve({ progress: currentProgress, message: 'Upload complete', files: 3, toastId }) // Resolve the promise when progress reaches 100\n      }\n\n      toast.loading(\n        <UploadSonnerContent\n          progress={currentProgress}\n          files={files}\n        />,\n        {\n          id: toastId,\n        }\n      )\n    }, 20) // Adjust the interval time as needed\n  })\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport { AlertDialogSheet, Avatar, AvatarFallback, AvatarImage, DropdownMenuView } from '@/registry/default/ui'\nimport { ContextMenu, ContextMenuTrigger } from '@/registry/default/ui'\nimport { Input } from '@/registry/default/ui'\nimport { ScrollArea } from '@/registry/default/ui'\nimport { filesize } from 'filesize'\nimport { Button, buttonVariants } from '../button'\nimport { Download, Ellipsis, Trash, Upload as UploadIcon } from 'lucide-react'\nimport {\n  FileType,\n  UploadContentProps,\n  UploadContextType,\n  UploadInputProps,\n  UploadItemProps,\n  UploadProps,\n  UploadtItemRemoveProps,\n  UploadTriggerProps,\n} from './upload.types'\nimport { FILE_TYPE_ICONS } from './upload.constants'\nimport { UploadManager } from './upload.lib'\nimport { cn } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport { downloadAttachment } from '@/registry/default/ui/comment'\nimport { uuidv7 } from 'uuidv7'\n\nconst UploadContext = React.createContext<UploadContextType<FileType> | null>(null)\n\n/**\n * Hook for accessing the context of the UploadProvider.\n *\n * @returns {UploadContextType<FileType> | null} The context object.\n * @throws {Error} If the hook is used outside of an UploadProvider.\n */\nexport const useUploadContext = () => {\n  const context = React.useContext(UploadContext)\n  if (!context) {\n    throw new Error('useUploadContext must be used within an UploadProvider')\n  }\n  return context\n}\n\n/**\n * Provides the context for managing attachments.\n *\n * @example\n * <UploadProvider>\n *   <Upload />\n * </UploadProvider>\n *\n * @param {React.ReactNode} children The children components.\n * @returns {JSX.Element} The rendered component.\n */\nexport const UploadProvider = ({ children }: { children: React.ReactNode }) => {\n  const [attachments, setAttachments] = React.useState<FileType[]>([])\n  const [attachmentsState, setAttachmentsState] = React.useState<FileType[]>([])\n\n  return (\n    <UploadContext.Provider\n      value={{\n        attachments,\n        setAttachments,\n        attachmentsState,\n        setAttachmentsState,\n      }}\n    >\n      {children}\n    </UploadContext.Provider>\n  )\n}\n\n/**\n * The Upload component provides a user interface for uploading attachments.\n * It utilizes the UploadProvider context to manage the state of attachments\n * and allows users to submit their selected files.\n *\n * @param {UploadProps} props - The props for the Upload component.\n * @param {React.ReactNode} [props.children] - Optional children to render within the component.\n * @param {React.ReactNode} [props.trigger] - The UI element that triggers the upload dialog.\n * @param {React.ReactNode} [props.content] - The content to be displayed inside the upload dialog.\n *\n * @returns {JSX.Element} The rendered Upload component.\n */\nexport const Upload = ({ children, trigger, content }: UploadProps) => {\n  const { setAttachments, attachmentsState, setAttachmentsState } = useUploadContext()\n  return (\n    <>\n      {children ? (\n        children\n      ) : (\n        <AlertDialogSheet\n          header={{\n            head: 'Upload',\n            description: 'upload your attahment here and submit.',\n          }}\n          actions={{\n            continue: () => {\n              setAttachments([])\n              setAttachmentsState([])\n            },\n          }}\n          footer={{\n            submit: {\n              children: (\n                <Button\n                  disabled={attachmentsState.length === 0}\n                  className=\"px-6\"\n                  onClick={() => {\n                    setAttachments(prev => [...prev, ...attachmentsState])\n                    setAttachmentsState([])\n                  }}\n                >\n                  Submit\n                </Button>\n              ),\n            },\n            cancel: {\n              children: (\n                <Button\n                  variant=\"outline\"\n                  className=\"px-6\"\n                >\n                  Cancel\n                </Button>\n              ),\n            },\n          }}\n          state={attachmentsState.length > 0}\n          trigger={{ children: trigger }}\n          content={{ children: content }}\n        />\n      )}\n    </>\n  )\n}\n\n/**\n * UploadTrigger component renders a trigger for the upload action.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {string} [props.className] - Optional additional class names.\n * @param {React.ReactNode} props.children - The children elements to be rendered inside the trigger.\n * @param {React.Ref} ref - The ref forwarded to the underlying div element.\n *\n * @returns {React.Element} The rendered component.\n */\nexport const UploadTrigger = React.forwardRef<HTMLDivElement, UploadTriggerProps>(\n  ({ className, children, ...props }, ref) => (\n    <div\n      className={cn(className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n)\n\n/**\n * UploadInput component renders an input area where users can drag or click to upload files.\n * It also includes a file filter and context menu for options.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {string} [props.className] - Optional additional class names.\n * @param {React.ReactNode} props.children - The children elements to be rendered inside the input.\n * @param {React.Ref} ref - The ref forwarded to the underlying div element.\n *\n * @returns {React.Element} The rendered component.\n */\nexport const UploadInput = React.forwardRef<HTMLDivElement, UploadInputProps>(\n  ({ className, children, ...props }, ref) => {\n    const { setAttachmentsState } = useUploadContext()\n\n    return (\n      <div\n        className={cn(className)}\n        ref={ref}\n        {...props}\n      >\n        <ContextMenu>\n          <ContextMenuTrigger className=\"relative flex flex-col items-center justify-center w-full h-64 rounded-md border border-dashed border-border text-sm leading-5 transition-colors duration-100 ease-in-out hover:bg-muted/10\">\n            <div className=\"grid place-items-center gap-4\">\n              <UploadIcon className=\"size-[30px]\" />\n              <span>Click or Drag to Upload</span>\n            </div>\n            <Input\n              placeholder=\"Filter files...\"\n              type=\"file\"\n              className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n              multiple={true}\n              onChange={e => UploadManager.getAttachmentsToState({ e, setAttachmentsState })}\n            />\n          </ContextMenuTrigger>\n        </ContextMenu>\n        <p className=\"mt-2 text-muted-foreground text-[.9rem]\">supports all types of files.</p>\n      </div>\n    )\n  }\n)\n\n/**\n * UploadContent component renders the content area for the uploaded files,\n * showing a scrollable list of uploaded items with an option to remove them.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {string} [props.className] - Optional additional class names.\n * @param {React.ReactNode} props.children - The children elements to be rendered inside the content area.\n * @param {React.Ref} ref - The ref forwarded to the underlying div element.\n *\n * @returns {React.Element} The rendered component.\n */\nexport const UploadContent = React.forwardRef<HTMLDivElement, UploadContentProps>(\n  ({ className, children, ...props }, ref) => {\n    const { attachmentsState, setAttachmentsState } = useUploadContext()\n\n    return (\n      <ScrollArea\n        className={cn('flex flex-col gap-2 max-h-[39ch] md:max-h-[43ch]', className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n        <div className=\"flex flex-col gap-2\">\n          {attachmentsState.map(attachment => {\n            return (\n              <UploadItem\n                key={attachment.id}\n                attachment={attachment}\n              >\n                <UploadtItemRemove\n                  className=\"absolute top-1/2 -translate-y-1/2 right-2\"\n                  onClick={() => {\n                    setAttachmentsState(prev => prev.filter(item => item.id !== attachment.id))\n                  }}\n                />\n              </UploadItem>\n            )\n          })}\n        </div>\n      </ScrollArea>\n    )\n  }\n)\n\n/**\n * UploadItem component represents an individual file in the upload list.\n * It displays the file's name, type, size, and provides an option to remove it.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {Attachment} props.attachment - The attachment object containing file details.\n * @param {string} [props.className] - Optional additional class names.\n * @param {React.ReactNode} props.children - The children elements to be rendered inside the item.\n * @param {React.Ref} ref - The ref forwarded to the underlying div element.\n *\n * @returns {React.Element} The rendered component.\n */\nexport const UploadItem = React.forwardRef<HTMLDivElement, UploadItemProps>(\n  ({ attachment, children, className, ...props }, ref) => {\n    const fileType = UploadManager.getFileType(attachment.file)\n\n    return (\n      <div\n        className={cn('relative flex items-center gap-4 bg-secondary/20 rounded-md p-2', className)}\n        ref={ref}\n        {...props}\n      >\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative\">{FILE_TYPE_ICONS[fileType]}</div>\n          <div className=\"grid items-start\">\n            <h3 className=\"inline-block text-[.9rem] truncate max-w-[200px]\">{attachment.name || 'Empty File'}</h3>\n            <p className=\"inline-block truncate text-semibold text-[.8rem] max-w-[300px]\">\n              {filesize(attachment.file ? +attachment.file.size : 0, {\n                round: 0,\n              })}\n            </p>\n          </div>\n        </div>\n        {children}\n      </div>\n    )\n  }\n)\n\n/**\n * UploadtItemRemove component represents a remove button for an uploaded file item.\n * It is typically used for removing a file from the upload list.\n *\n * @param {Object} props - The properties passed to the component.\n * @param {string} [props.className] - Optional additional class names.\n * @param {React.Ref} ref - The ref forwarded to the underlying div element.\n *\n * @returns {React.Element} The rendered component.\n */\nexport const UploadtItemRemove = React.forwardRef<HTMLDivElement, UploadtItemRemoveProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        className={cn(\n          'size-4 rounded-md focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 cursor-pointer',\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        <X className=\"w-4 h-4\" />\n      </div>\n    )\n  }\n)\n\n/**\n * UploadItemsPreview component displays a preview of all uploaded items.\n * If there are no items uploaded, a message will be shown instead.\n *\n * @returns {React.Element} The rendered component, showing uploaded items or a message if none are uploaded.\n */\nexport const UploadItemsPreview = () => {\n  const { attachments } = useUploadContext()\n\n  return attachments.length > 0 ? (\n    <div className=\"grid grid-cols-6 justify-start items-start place-content-start gap-2 w-full border border-border min-h-[400px] p-4 rounded-lg\">\n      {attachments.map(attachment => {\n        const fileType = UploadManager.getFileType(attachment.file)\n\n        // If the file is a File object, generate a URL for preview\n        const src = typeof attachment.file === 'string' ? attachment.file : URL.createObjectURL(attachment.file as Blob)\n\n        return (\n          <div\n            className={cn(\n              'relative bg-secondary/20 rounded-md overflow-hidden w-full flex flex-col place-content-center gap-4 h-[100px] border border-border'\n            )}\n          >\n            <div>\n              <div className=\"relative [&_svg]:size-12 [&_svg]:mx-auto w-full\">{FILE_TYPE_ICONS[fileType]}</div>\n            </div>\n            <DropdownMenuView\n              trigger={{\n                icon: { children: Ellipsis, className: 'h-4 w-4 rounded' },\n                variant: 'outline',\n                size: 'icon',\n                className: 'h-4 w-6 absolute bottom-2 right-2',\n              }}\n              content={{\n                options: {\n                  itemType: 'label',\n                  optionsData: [\n                    {\n                      children: 'Download',\n                      icon: { children: Download, className: 'h-4 w-4 rounded' },\n                      onClick: () => {\n                        downloadAttachment({ attachment: attachment! })\n                      },\n                    },\n                    {\n                      children: 'Delete',\n                      className: 'text-red-500 bg-red-500/10',\n                      icon: { children: Trash, className: 'h-4 w-4 rounded' },\n                      onClick: () => {},\n                    },\n                  ],\n                },\n              }}\n            />\n          </div>\n        )\n      })}\n    </div>\n  ) : (\n    <div className=\"flex items-center w-full border border-border min-h-[400px] p-4 rounded-lg\">\n      <p className=\"text-center w-full\">There's no attachments yet uploaded.</p>\n    </div>\n  )\n}\n\n/**\n * UploadProfile component renders a profile avatar with the ability to upload a profile picture.\n *\n * @returns {React.Element} The rendered component, including the avatar and upload functionality.\n */\nexport const UploadProfile = () => {\n  const { attachments, setAttachments } = useUploadContext() ?? {}\n  const src =\n    attachments.length > 0\n      ? typeof attachments[0].file === 'string'\n        ? attachments[0].file\n        : URL.createObjectURL(attachments[0].file as Blob)\n      : null\n\n  return (\n    <Button\n      className=\"relative cursor-pointer w-16 h-16 rounded-full\"\n      variant={'outline'}\n    >\n      <Input\n        placeholder=\"Filter files...\"\n        type=\"file\"\n        className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n        multiple={false}\n        onChange={e => {\n          const file = e.currentTarget.files?.[0]\n          if (file) {\n            setAttachments([\n              {\n                id: uuidv7(),\n                file: file,\n                name: file.name,\n                url: null,\n                type: file.type,\n                size: file.size.toString(),\n                createdAt: new Date(),\n                updatedAt: new Date(),\n              },\n            ])\n          }\n        }}\n      />\n      <Avatar className=\"w-16 h-16 pointer-events-none\">\n        <AvatarImage\n          src={src ?? ''}\n          className=\"object-cover\"\n        />\n        <AvatarFallback>\n          <img src=\"/avatars/02.png\" />\n        </AvatarFallback>\n      </Avatar>\n      <span\n        className={cn(\n          buttonVariants({ variant: 'outline' }),\n          'absolute rounded-full p-2 -bottom-1 -left-1 hover:bg-background h-fit pointer-events-none'\n        )}\n      >\n        <UploadIcon className=\"!size-3\" />\n      </span>\n    </Button>\n  )\n}\n\n/**\n * UploadDirectButton component renders a button that triggers a file upload directly.\n *\n * @returns {React.Element} The rendered component, including the upload button and file input.\n */\nexport const UploadDirectButton = () => {\n  const { setAttachments } = useUploadContext() ?? {}\n\n  return (\n    <Button\n      className=\"relative\"\n      variant={'outline'}\n      size={'sm'}\n      icon={{ children: UploadIcon }}\n    >\n      <Input\n        placeholder=\"Filter files...\"\n        type=\"file\"\n        className=\"absolute w-full h-full opacity-0 cursor-pointer\"\n        multiple={true}\n        onChange={e => UploadManager.getAttachmentsToState({ e, setAttachmentsState: setAttachments })}\n      />\n      Upload file\n    </Button>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/upload/upload.types.ts",
      "content": "import { ScrollArea } from '@/registry/default/ui'\nimport { Button } from '../button'\n\n// NOTE: UPLOAD TYPES\n\n/**\n * Context type for managing uploads.\n * @template T - The type of attachments.\n */\nexport interface UploadContextType<T extends Record<string, any>> {\n  attachments: T[] // List of attachments\n  setAttachments: React.Dispatch<React.SetStateAction<T[]>> // Function to update attachments\n  attachmentsState: T[] // State of attachments\n  setAttachmentsState: React.Dispatch<React.SetStateAction<T[]>> // Function to update attachments state\n}\n\n/**\n * Props for the Upload component.\n * @extends {React.HTMLProps<HTMLDivElement>}\n */\nexport interface UploadProps extends Omit<React.HTMLProps<HTMLDivElement>, 'content'> {\n  trigger: React.ReactNode // Trigger element for the upload action\n  content: React.ReactNode // Content to display in the upload area\n}\n\n/**\n * Props for the UploadTrigger component.\n * @extends {React.HTMLProps<HTMLDivElement>}\n */\nexport interface UploadTriggerProps extends React.HTMLProps<HTMLDivElement> {}\n\n/**\n * Props for the UploadInput component.\n * @extends {React.HTMLProps<HTMLDivElement>}\n */\nexport interface UploadInputProps extends React.HTMLProps<HTMLDivElement> {}\n\n/**\n * Props for the UploadContent component.\n * @extends {React.ComponentPropsWithoutRef<typeof ScrollArea>}\n */\nexport interface UploadContentProps extends React.ComponentPropsWithoutRef<typeof ScrollArea> {}\n\n/**\n * Props for the UploadItem component.\n * @extends {React.HTMLProps<HTMLDivElement>}\n */\nexport interface UploadItemProps extends React.HTMLProps<HTMLDivElement> {\n  attachment: FileType // The attachment to display\n}\n\n/**\n * Props for the UploadItemRemove component.\n * @extends {React.HTMLProps<HTMLDivElement>}\n */\nexport interface UploadtItemRemoveProps extends React.HTMLProps<HTMLDivElement> {}\n\n// NOTE: SHARED TYPES\n\n/**\n * Type representing a file attachment.\n */\nexport interface FileType {\n  id: string // Unique identifier for the file\n  file: Blob | null // The file blob\n  url: string | null // URL of the file\n  type: string // MIME type of the file\n  name: string // Name of the file\n  size: string // Size of the file\n  createdAt: Date // Creation date of the file\n  updatedAt: Date // Last updated date of the file\n  treeLevel?: number // Level in the folder structure\n}\n\n/**\n * Type representing a folder containing attachments.\n */\nexport type FolderType = {\n  id: string // Unique identifier for the folder\n  name: string // Name of the folder\n  content: (FileType | FolderType)[] // Content of the folder (files and subfolders)\n  files: number // Number of files in the folder\n  createdAt: Date // Creation date of the folder\n  updatedAt: Date // Last updated date of the folder\n  treeLevel: number // Level in the folder structure\n}\n\n/**\n * Type representing a selected folder.\n */\nexport type SelectedFolderType = FolderType & {}\n\n// ------------------------------------------------------------------------------------------------\n// NOTE: ADVANCED TYPES\n\n/**\n * Context type for managing advanced upload features.\n * @template T - The type of attachments.\n */\nexport interface UploadAdvancedContextType<T extends Record<string, any>> extends UploadContextType<T> {\n  selectedFolder: SelectedFolderType[] // Currently selected folders\n  setSelectedFolder: React.Dispatch<React.SetStateAction<SelectedFolderType[]>> // Function to update selected folders\n  previewFile: FileType | null // Currently previewed file\n  setPreviewFile: React.Dispatch<React.SetStateAction<FileType | null>> // Function to update the previewed file\n  uploadQuery: string // Current search query for uploads\n  setUploadQuery: React.Dispatch<React.SetStateAction<string>> // Function to update the search query\n  selectedAttachments: FileType[] // Currently selected attachments\n  setSelectedAttachments: React.Dispatch<React.SetStateAction<FileType[]>> // Function to update selected attachments\n  currentBucket: string // Current bucket name\n}\n\n/**\n * Props for the UploadAdvancedProvider component.\n * @extends {React.HTMLProps<HTMLDivElement>}\n */\nexport interface UploadAdvancedProviderProps extends React.HTMLProps<HTMLDivElement> {\n  selectedFolder?: SelectedFolderType[] // Currently selected folders\n  attachments?: (FileType | FolderType)[] // List of attachments\n  currentBucket: string // Current bucket name\n}\n\n// ------------------------------------------------------------------------------------------------\n// NOTE: CHUNKS TYPES\n\n/**\n * Props fkjor the UploadDownloadAttachments component.  * @extends {React.ComponentPropsWithoutRef<typeof Button>}\n * @property {string[]} itemsName - Names of the items to download\n * @property {boolean} withinDropdown - Whether the button is within a dropdown\n */\nexport interface UploadDownloadAttachmentsProps extends React.ComponentPropsWithoutRef<typeof Button> {\n  itemsName: string[]\n  withinDropdown?: boolean\n}\n\n/**\n * Props for the UploadRenameAttachmentButton component.\n *\n * @typedef {Object} UploadRenameAttachmentButtonProps\n * @property {FileType|FolderType} attachment - The attachment to be uploaded or renamed.\n */\nexport type UploadRenameAttachmentButtonProps = {\n  attachment: FileType | FolderType\n}\n\n/**\n * Props for the UploadAttachmentsTreeItem component.\n */\nexport type UploadAttachmentsTreeItemProps = {\n  attachments?: (FileType | FolderType)[] // List of attachments to display\n}\n\n/**\n * Props for the UploadAlertMoveAction component.\n * @extends {React.ComponentPropsWithoutRef<typeof Button>}\n */\nexport interface UploadAlertMoveActionProps extends React.ComponentPropsWithoutRef<typeof Button> {\n  itemsName: string[] // Names of items to move\n}\n\n/**\n * Props for the UploadAlertDeleteAction component.\n * @extends {UploadAlertMoveActionProps}\n */\nexport interface UploadAlertDeleteActionProps extends UploadAlertMoveActionProps {\n  itemsToDelete: string[] // IDs of items to delete\n}\n\n// ------------------------------------------------------------------------------------------------\n// NOTE: UPLOAD SONNER COMPONENTS\n\n/**\n * Props for the UploadSonner component.\n */\nexport type UploadSonnerProps = {\n  progress: number // Current upload progress\n  files: number // Number of files being uploaded\n}\n\n// ------------------------------------------------------------------------------------------------\n// NOTE: UPLOAD LIBs\n\n/**\n * Type for the `UploadManager` class.\n * This class handles file upload, attachment management, and file/folder operations.\n */\nexport declare class UploadManagerClass {\n  /**\n   * Renames an attachment (file or folder) by its ID.\n   * Updates the name and modification timestamp of the target attachment.\n   * If the attachment is a folder, it recursively renames any matching attachments in its content.\n   *\n   * @param setAttachments - The function to update the attachments state.\n   * @param targetIds - An array of attachment IDs to target for renaming.\n   * @param newName - The new name to assign to the targeted attachment(s).\n   *\n   * @returns void\n   */\n  public static renameAttachmentById(\n    setAttachments: React.Dispatch<React.SetStateAction<(FileType | FolderType)[]>>,\n    targetIds: string[],\n    newName: string\n  ): void\n\n  /**\n   * Helper method to rename attachments recursively in a folder's content.\n   *\n   * @param attachments - The list of attachments to search through.\n   * @param targetIds - An array of attachment IDs to target for renaming.\n   * @param newName - The new name to assign to the targeted attachment(s).\n   *\n   * @returns A new list of attachments with the renamed attachment(s).\n   */\n  private static renameAttachmentRecursive(\n    attachments: (FileType | FolderType)[],\n    targetIds: string[],\n    newName: string\n  ): (FileType | FolderType)[]\n\n  /**\n   * Selects files from a folder and adds or removes them from the list of selected attachments.\n   * If all files are selected, they will be deselected; otherwise, new files will be selected.\n   *\n   * @param filesInCurrentTree - The list of files in the current folder.\n   * @param setSelectedAttachment - Function to update the selected attachments state.\n   *\n   * @returns void\n   */\n  public static selectAttachmentFromFolderContent({\n    filesInCurrentTree,\n    setSelectedAttachment,\n  }: SelectAttachmentFromFolderContentArgs): void\n\n  /**\n   * Uploads files with progress tracking and validation.\n   * It performs validation of files, tracks upload progress, and updates the state with new attachments.\n   *\n   * @param e - The event object containing the selected files.\n   * @param selectedFolder - The folder where the files will be uploaded.\n   * @param setAttachments - The function to update the attachments state.\n   *\n   * @returns void\n   */\n  public static advancedUploadAttachments({ e, selectedFolder, setAttachments }: UploadFilesArgs): Promise<void>\n\n  /**\n   * Simulates the file upload process and provides progress updates.\n   *\n   * @param files - The number of files to upload.\n   * @param toastId - The ID for the toast notification showing the upload progress.\n   *\n   * @returns A promise that resolves when the upload reaches 100% progress.\n   */\n  private static uploadPromise({ files, toastId }: UploadPromiseArgs): Promise<UploadPromiseReturn>\n\n  /**\n   * Opens a folder and updates the selected folder state.\n   * If the folder is not already in the tree, it is added to the selection.\n   *\n   * @param attachmentFolder - The folder to open.\n   * @param setSelected - The function to update the selected folders state.\n   * @param exist_in_tree - Flag to check if the folder already exists in the selection.\n   *\n   * @returns void\n   */\n  public static folderOpen({ attachmentFolder, setSelected, exist_in_tree }: FolderOpenArgs): void\n\n  /**\n   * Determines the file type based on the MIME type of the file.\n   *\n   * @param file - The file whose type is to be determined.\n   *\n   * @returns The type of the file (Audio, Text, Image, Video, Pdf, Unknown).\n   */\n  public static getFileType(file: Blob | null): FileTypeEnum\n\n  /**\n   * Calculates the remaining time for the file upload based on the current progress.\n   *\n   * @param currentProgress - The current upload progress (0-100).\n   * @param maxProgress - The maximum progress value (usually 100).\n   *\n   * @returns The estimated remaining time for the upload.\n   */\n  public static getRemainingTime(currentProgress: number, maxProgress: number): number\n\n  /**\n   * Formats the given time (in seconds) into a human-readable string (e.g., \"2h 30m\").\n   *\n   * @param seconds - The time in seconds to format.\n   *\n   * @returns The formatted time string.\n   */\n  public static formatTime(seconds: number): string\n}\n\n/**\n * Arguments for selecting attachments from folder content.\n */\nexport type SelectAttachmentFromFolderContentArgs = {\n  filesInCurrentTree: (FileType | FolderType)[] // Files in the current tree\n  setSelectedAttachment: React.Dispatch<React.SetStateAction<FileType[]>> // Function to set selected attachments\n  checkState?: boolean // Optional state check\n}\n\n/**\n * Arguments for adding a folder to the current path.\n */\nexport type addFolderToPathArgs = {\n  selectedFolder: FolderType[] // Currently selected folder\n  setSelectedFolder: React.Dispatch<React.SetStateAction<FolderType[]>> // Function to set selected folders\n  setAttachments: React.Dispatch<React.SetStateAction<(FileType | FolderType)[]>> // Function to set attachments\n  folderName: string | undefined // Name of the folder to add\n}\n\n/**\n * Arguments for moving attachments to a specified path.\n */\nexport type MoveAttachmentsToPath = {\n  setAttachments: React.Dispatch<React.SetStateAction<(FileType | FolderType)[]>> // Function to set attachments\n  setSelectedAttachment: React.Dispatch<React.SetStateAction<FileType[]>> // Function to set selected attachments\n  selectedAttachments: FileType[] // Currently selected attachments\n  path: string // Path to move the attachments to\n}\n\n/**\n * Arguments for opening a folder.\n */\nexport type FolderOpenArgs = {\n  attachmentFolder: FolderType // The folder to open\n  setSelected: React.Dispatch<React.SetStateAction<FolderType[]>> // Function to set selected folders\n  exist_in_tree: boolean // Whether the folder exists in the tree\n}\n\n/**\n * Props for handling attachments.\n */\nexport interface HandleAttachmentProps {\n  e: React.ChangeEvent<HTMLInputElement> // Change event from the input\n  setAttachmentsState: React.Dispatch<React.SetStateAction<FileType[]>> // Function to set attachments state\n}\n\n/**\n * Arguments for uploading files.\n */\nexport type UploadFilesArgs = {\n  e: React.ChangeEvent<HTMLInputElement> // Change event from the input\n  selectedFolder: FolderType[] // Currently selected folder\n  setSelectedFolder: React.Dispatch<React.SetStateAction<FolderType[]>> // Function to set selected folders\n  setAttachments: React.Dispatch<React.SetStateAction<(FileType | FolderType)[]>> // Function to set attachments\n}\n\n/**\n * Arguments for the upload promise.\n */\nexport type UploadPromiseArgs = {\n  files: number // Number of files to upload\n  toastId: string // ID for the toast notification\n}\n\n/**\n * Return type for the upload promise.\n */\nexport type UploadPromiseReturn = {\n  files: number // Number of files uploaded\n  progress: number // Current upload progress\n  remainingTime?: number | undefined // Optional remaining time for the upload\n  message: string // Message indicating the status of the upload\n  toastId: string // ID for the toast notification\n}\n",
      "type": "registry:ui"
    }
  ]
}