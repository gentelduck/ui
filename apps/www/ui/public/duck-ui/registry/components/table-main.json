{
  "name": "table-main",
  "type": "registry:example",
  "registryDependencies": [
    "table"
  ],
  "root_folder": "registry-examples-components/table",
  "files": [
    {
      "path": "registry-examples-components/table/table-1.tsx",
      "content": "import { cn } from '@/lib'\nimport { groupArrays } from '@/lib/utils'\nimport {\n  optionsData,\n  PriorityType,\n  StatusType,\n  TableDataType,\n  tableHeaderDropDown,\n} from '@/registry/default/example/TableAdvancedDemo'\nimport {\n  Checkbox,\n  ComboboxType,\n  ContextContent,\n  ContextMenuLabel,\n  ContextMenuOptionsType,\n  DropdownMenuOptionsDataType,\n  DropdownMenuView,\n} from '@/registry/default/ui'\nimport {\n  DuckTableFilter,\n  DuckTableBarRightSide,\n  DuckTableProvider,\n  DuckTableSearch,\n  TableBarViewButton,\n  TableHeaderType,\n  DuckTableBarLeftSide,\n  DuckTableHeader,\n  DuckTableBar,\n  DuckTable,\n  TableBody,\n  DuckTableBodyRow,\n  TableContentDataType,\n  TableCell,\n  TableHeaderOptionsType,\n  DuckTableBody,\n  DuckTableFooter,\n  FooterColumnType,\n  DuckTableDownBar,\n  DuckTablePagination,\n} from '@/registry/registry-ui-components/table'\nimport {\n  ArrowDownIcon,\n  ArrowRightIcon,\n  ArrowUpIcon,\n  Circle,\n  CircleCheck,\n  CircleHelp,\n  CircleX,\n  Clock12,\n  Ellipsis,\n} from 'lucide-react'\nimport React from 'react'\n\nexport default function Table1Demo() {\n  return (\n    <>\n      <DuckTableProvider>\n        <DuckTableBar>\n          <DuckTableBarRightSide>\n            <DuckTableSearch\n              input={{\n                trigger: {\n                  placeholder: 'Search...',\n                },\n              }}\n            />\n            <DuckTableFilter filter={combinedFiltersData} />\n          </DuckTableBarRightSide>\n          <DuckTableBarLeftSide>\n            <TableBarViewButton header={columns} />\n          </DuckTableBarLeftSide>\n        </DuckTableBar>\n        <DuckTable>\n          <DuckTableHeader\n            headers={columns}\n            selectable={true}\n          />\n\n          <DuckTableBody<typeof tableData> data={tableData}>\n            {data =>\n              data.map((row, idx) => {\n                return (\n                  <DuckTableRowWrapper\n                    key={idx}\n                    options={{\n                      group: [3, 1],\n                      optionsData: optionsData,\n                    }}\n                    row={row}\n                  />\n                )\n              })\n            }\n          </DuckTableBody>\n          <DuckTableFooter columns={footerColumns} />\n        </DuckTable>\n        <DuckTableDownBar>\n          <DuckTablePagination />\n        </DuckTableDownBar>\n      </DuckTableProvider>\n    </>\n  )\n}\n\nexport const DuckTableRowWrapper = ({\n  row,\n  options,\n}: {\n  row: TableContentDataType<TableDataType>\n  options: ContextMenuOptionsType<Record<string, unknown>> | undefined\n}) => {\n  return (\n    <DuckTableBodyRow\n      content={{\n        options,\n      }}\n      row={{\n        children: (\n          <>\n            {Object.values(row).map((item, idx) => {\n              const { children, icon, ...props } = item ?? {}\n              const { children: Icon, ...iconProps } = icon ?? {}\n\n              return (\n                <React.Fragment>\n                  {/*NOTE: Rendering Checkbox */}\n                  {idx === 0 && (\n                    <TableCell\n                      key={idx}\n                      {...props}\n                    >\n                      <Checkbox className=\"border-border\" />\n                    </TableCell>\n                  )}\n                  <TableCell\n                    key={idx}\n                    {...props}\n                  >\n                    <div className=\"flex items-center gap-4 justify-between\">\n                      {/*NOTE: Rendering Label */}\n\n                      {/*NOTE: Rendering the row column childrend */}\n                      <div className=\"grid [&_*]:text-ellipsis [&_*]:overflow-hidden [&_*]:whitespace-nowrap\">\n                        <span className={cn(Icon && 'flex items-center gap-2 [&_svg]:flex-shrink-0')}>\n                          {Icon && <Icon {...iconProps} />}\n                          {Icon ? <span> {children}</span> : children}\n                        </span>\n                      </div>\n                      {/*NOTE: Dropdown Menu */}\n                      {idx === Object.values(row).length - 1 && optionsData?.length && (\n                        <DropdownMenuView\n                          trigger={{\n                            className: 'flex h-8 w-8 p-0 data-[state=open]:bg-muted',\n                            children: <span className=\"sr-only\">Open menu</span>,\n                            variant: 'ghost',\n                            size: 'icon',\n                            icon: {\n                              children: Ellipsis,\n                              className: 'h-4 w-4',\n                            },\n                          }}\n                          content={{\n                            align: 'end',\n                            options,\n                          }}\n                        />\n                      )}\n                    </div>\n                  </TableCell>\n                </React.Fragment>\n              )\n            })}\n          </>\n        ),\n      }}\n    ></DuckTableBodyRow>\n  )\n}\n\nconst footerColumns: FooterColumnType[] = [\n  {\n    children: 'Total',\n    colSpan: 3,\n  },\n  {\n    children: '50000$',\n    colSpan: 3,\n    className: 'w-full text-end',\n  },\n]\n\nconst iconStyle = 'size-4 stroke-[1.5] text-muted-foreground'\n// Assuming you have separate filter arrays for StatusType and PriorityType\nconst filtersDataForStatusType: ComboboxType<keyof TableDataType, StatusType>[] = [\n  {\n    type: 'listbox',\n    trigger: {\n      children: 'status',\n      label: {\n        children: 'Filter Status',\n        showLabel: true,\n        showCommand: true,\n        side: 'top',\n      },\n      command: {\n        label: '⌃+⇧+S',\n        key: 'ctrl+shift+s',\n      },\n    },\n    content: {\n      showSearchInput: true,\n      data: [\n        {\n          label: 'Backlog',\n          element: {\n            icon: {\n              children: CircleHelp,\n              className: iconStyle,\n            },\n          },\n        },\n        {\n          label: 'Todo',\n          element: {\n            icon: {\n              children: Circle,\n              className: iconStyle,\n            },\n          },\n        },\n        {\n          label: 'In Progress',\n          element: {\n            icon: {\n              children: Clock12,\n              className: iconStyle,\n            },\n          },\n        },\n        {\n          label: 'Done',\n          element: {\n            icon: {\n              children: CircleCheck,\n              className: iconStyle,\n            },\n          },\n        },\n        {\n          label: 'Canceled',\n          element: {\n            icon: {\n              children: CircleX,\n              className: iconStyle,\n            },\n          },\n        },\n      ],\n    },\n  },\n]\n\nconst filtersDataForPriorityType: ComboboxType<keyof TableDataType, PriorityType>[] = [\n  {\n    type: 'listbox',\n    trigger: {\n      children: 'priority',\n      label: {\n        children: 'Filter Method',\n        showLabel: true,\n        showCommand: true,\n        side: 'top',\n      },\n      command: {\n        label: '⌃+⇧+M',\n        key: 'ctrl+shift+m',\n      },\n    },\n    content: {\n      showSearchInput: true,\n      data: [\n        {\n          label: 'Low',\n          element: {\n            icon: {\n              children: ArrowDownIcon,\n              className: 'size-4 stroke-[1.5]',\n            },\n          },\n        },\n        {\n          label: 'Medium',\n          element: {\n            icon: {\n              children: ArrowRightIcon,\n              className: 'size-4 stroke-[1.5]',\n            },\n          },\n        },\n        {\n          label: 'High',\n          element: {\n            icon: {\n              children: ArrowUpIcon,\n              className: 'size-4 stroke-[1.5]',\n            },\n          },\n        },\n      ],\n    },\n  },\n]\n\nconst combinedFiltersData = [\n  ...filtersDataForStatusType.map(\n    filter =>\n      ({\n        ...filter,\n        type: 'combobox',\n        onSelect: filter.onSelect,\n      }) as ComboboxType<StatusType | PriorityType, keyof TableDataType>\n  ),\n  ...filtersDataForPriorityType.map(\n    filter =>\n      ({\n        ...filter,\n        type: 'combobox',\n        onSelect: filter.onSelect,\n      }) as ComboboxType<StatusType | PriorityType, keyof TableDataType>\n  ),\n]\n\nconst columns: TableHeaderType<TableDataType>[] = [\n  {\n    label: 'task',\n    className: 'w-[110px]',\n    sortable: false,\n  },\n  {\n    label: 'title',\n    className: 'w-[200px]',\n    sortable: true,\n    showLabel: false,\n    dropdownMenuOptions: tableHeaderDropDown,\n  },\n  {\n    label: 'label',\n    className: 'w-[90px]',\n    sortable: true,\n    currentSort: 'not sorted',\n    dropdownMenuOptions: tableHeaderDropDown,\n  },\n  {\n    label: 'status',\n    sortable: true,\n    showLabel: true,\n    className: 'w-[70px]',\n    currentSort: 'not sorted',\n    dropdownMenuOptions: tableHeaderDropDown,\n  },\n  {\n    label: 'priority',\n    sortable: true,\n    dropdownMenuOptions: tableHeaderDropDown,\n  },\n]\n\nexport const tableData: TableContentDataType<TableDataType>[] = [\n  {\n    task: { children: 'TASK-8782' },\n    title: {\n      children: <p> You can't compress the program without quantifying the open-source SSD pixel! </p>,\n    },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'In Progress',\n      icon: {\n        children: Clock12,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-7878' },\n    title: { children: 'Try to calculate the EXE feed, maybe it will index the multi-byte pixel!' },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Backlog',\n\n      icon: {\n        children: CircleHelp,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-7878' },\n    title: { children: 'Try to calculate the EXE feed, maybe it will index the multi-byte pixel!' },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Backlog',\n\n      icon: {\n        children: CircleHelp,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-7839' },\n    title: { children: 'We need to bypass the neural TCP card!' },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Todo',\n\n      icon: {\n        children: Circle,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-5562' },\n    title: {\n      children: 'The SAS interface is down, bypass the open-source pixel so we can back up the PNG bandwidth!',\n    },\n    label: { children: 'Feature' },\n    status: {\n      children: 'Backlog',\n\n      icon: {\n        children: CircleHelp,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-8686' },\n    title: { children: \"I'll parse the wireless SSL protocol, that should drive the API panel!\" },\n    label: { children: 'Feature' },\n    status: {\n      children: 'Canceled',\n      icon: {\n        children: CircleX,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-1280' },\n    title: { children: 'Use the digital TLS panel, then you can transmit the haptic system!' },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Done',\n      icon: {\n        children: CircleCheck,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-7262' },\n    title: {\n      children: 'The UTF8 application is down, parse the neural bandwidth so we can back up the PNG firewall!',\n    },\n    label: { children: 'Feature' },\n    status: {\n      children: 'Done',\n\n      icon: {\n        children: CircleCheck,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-1138' },\n    title: { children: \"Generating the driver won't do anything, we need to quantify the 1080p SMTP bandwidth!\" },\n    label: { children: 'Feature' },\n    status: {\n      children: 'In Progress',\n\n      icon: {\n        children: Clock12,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-7184' },\n    title: { children: 'We need to program the back-end THX pixel!' },\n    label: { children: 'Feature' },\n    status: {\n      children: 'Todo',\n\n      icon: {\n        children: Circle,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Low',\n\n      icon: {\n        children: ArrowDownIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-5160' },\n    title: { children: \"Calculating the bus won't do anything, we need to navigate the back-end JSON protocol!\" },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'In Progress',\n\n      icon: {\n        children: Clock12,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-5618' },\n    title: { children: \"Generating the driver won't do anything, we need to index the online SSL application!\" },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Done',\n\n      icon: {\n        children: CircleCheck,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-6699' },\n    title: { children: \"I'll transmit the wireless JBOD capacitor, that should hard drive the SSD feed!\" },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Backlog',\n\n      icon: {\n        children: CircleHelp,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-2858' },\n    title: { children: 'We need to overtake the online UDP bus!' },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Backlog',\n\n      icon: {\n        children: CircleHelp,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-9864' },\n    title: { children: \"I'll reboot the 1080p FTP panel, that should matrix the HEX hard drive!\" },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Done',\n\n      icon: {\n        children: CircleCheck,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-8404' },\n    title: { children: 'We need to generate the virtual HEX alarm!' },\n    label: { children: 'Bug' },\n    status: {\n      children: 'In Progress',\n\n      icon: {\n        children: Clock12,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n\n    priority: {\n      children: 'Low',\n\n      icon: {\n        children: ArrowDownIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-5365' },\n    title: { children: \"Backing up the pixel won't do anything, we need to transmit the primary IB array!\" },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'In Progress',\n\n      icon: {\n        children: Clock12,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Low',\n\n      icon: {\n        children: ArrowDownIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-1780' },\n    title: { children: 'The CSS feed is down, index the bluetooth transmitter so we can compress the CLI protocol!' },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Todo',\n\n      icon: {\n        children: Circle,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-6938' },\n    title: { children: 'Use the redundant SCSI application, then you can hack the optical alarm!' },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Todo',\n\n      icon: {\n        children: Circle,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-9885' },\n    title: { children: 'We need to compress the auxiliary VGA driver!' },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Backlog',\n\n      icon: {\n        children: CircleHelp,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-3216' },\n    title: { children: \"Transmitting the transmitter won't do anything, we need to compress the virtual HDD sensor!\" },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Backlog',\n\n      icon: {\n        children: CircleHelp,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Medium',\n\n      icon: {\n        children: ArrowRightIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-9285' },\n    title: { children: 'The IP monitor is down, copy the haptic alarm so we can generate the HTTP transmitter!' },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Todo',\n\n      icon: {\n        children: Circle,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-1024' },\n    title: {\n      children: \"Overtaking the microchip won't do anything, we need to transmit the digital OCR transmitter!\",\n    },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'In Progress',\n\n      icon: {\n        children: Clock12,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Low',\n\n      icon: {\n        children: ArrowDownIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-7068' },\n    title: { children: \"You can't generate the capacitor without indexing the wireless HEX pixel!\" },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Canceled',\n\n      icon: {\n        children: CircleX,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Low',\n\n      icon: {\n        children: ArrowDownIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-6502' },\n    title: { children: \"Navigating the microchip won't do anything, we need to bypass the back-end SQL bus!\" },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Todo',\n\n      icon: {\n        children: Circle,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'High',\n      icon: {\n        children: ArrowUpIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-5326' },\n    title: { children: 'We need to hack the redundant UTF8 transmitter!' },\n    label: { children: 'Bug' },\n    status: {\n      children: 'Todo',\n\n      icon: {\n        children: Circle,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Low',\n\n      icon: {\n        children: ArrowDownIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n  {\n    task: { children: 'TASK-6274' },\n    title: { children: 'Use the virtual PCI circuit, then you can parse the bluetooth alarm!' },\n    label: { children: 'Documentation' },\n    status: {\n      children: 'Canceled',\n\n      icon: {\n        children: CircleX,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n    priority: {\n      children: 'Low',\n      icon: {\n        children: ArrowDownIcon,\n        className: 'size-4 stroke-[1.5]',\n      },\n    },\n  },\n]\n",
      "type": "registry:example"
    }
  ]
}