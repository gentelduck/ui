{
  "name": "table",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "combobox",
    "input",
    "pagination",
    "scroll-area",
    "dropdown",
    "command",
    "button",
    "checkbox",
    "badge",
    "context-menu",
    "tooltip"
  ],
  "root_folder": "registry-ui-components/table",
  "files": [
    {
      "path": "registry-ui-components/table/index.ts",
      "content": "export * from './table'\nexport * from './table.hook'\nexport * from './table.lib'\nexport * from './table.constants'\nexport * from './table.types'\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/table/table.constants.ts",
      "content": "export const PAGE_SIZE = 6\nexport const PAGE_INDEX = 0\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/table/table.hook.tsx",
      "content": "import React from 'react'\nimport { DuckTableContext, type DuckTableContextType } from './table'\n\nexport const useDuckTable = <\n  Column extends Record<string, unknown> = Record<string, unknown>,\n>(): DuckTableContextType<Column> | null => {\n  const context = React.useContext(DuckTableContext)\n  if (!context) {\n    throw new Error('useTableProvider must be used within an TableProvider')\n  }\n  return context\n}\n\n// <TableRow key={idx}>\n//                  {tableDataFiltered.map(([key, value], idx) => {\n//                    const headersEntries = headers.map(\n//                      item => item.label.toString().toLowerCase() ?? item.children?.toString().toLowerCase()\n//                    )\n//                    const { className, children, withLabel, ...props } = value\n//                    const {\n//                      className: labelClassName,\n//                      children: labelChildren,\n//                      type: labelType = 'default',\n//                      ...labelProps\n//                    } = item?.[key]?.withLabel ?? {}\n//\n//                    return (\n//                      headersEntries.includes(key.toString().toLowerCase()) && (\n//                        <TableCell\n//                          key={key}\n//                          className={cn('py-2 h-[50px]', selected.includes(item) && 'bg-muted', className)}\n//                          {...props}\n//                        >\n//                          <div\n//                            className={cn(\n//                              'items-center gap-2 flex w-full',\n//                              headers?.[idx]?.className,\n//                              className,\n//                              idx === headersEntries.length - 1 && dropdownMenu && 'justify-between w-full'\n//                            )}\n//                          >\n//                            {/*NOTE: Rendering Checkbox */}\n//                            {selection && idx === 0 && (\n//                              <Checkbox\n//                                className=\"border-border\"\n//                                onClick={() =>\n//                                  setSelected(\n//                                    selected.includes(item) ? selected.filter(i => i !== item) : [...selected, item]\n//                                  )\n//                                }\n//                                checked={selected.includes(item)}\n//                              />\n//                            )}\n//\n//                            {/*NOTE: Rendering Label */}\n//                            {labelChildren && (\n//                              <Badge\n//                                variant={'outline'}\n//                                size={'sm'}\n//                                className={cn(labelType === 'default' ? '' : 'bg-red-500', labelClassName)}\n//                                {...labelProps}\n//                              >\n//                                {labelChildren}\n//                              </Badge>\n//                            )}\n//\n//                            <div className=\"flex items-center gap-2 text-ellipsis overflow-hidden whitespace-nowrap\">\n//                              {/*NOTE: Getting Icons from Filter Data */}\n//                              {filtersData?.length &&\n//                                filtersData?.map(item => {\n//                                  return item?.content?.data.map((item, idx) => {\n//                                    const { children: Icon, ...props } = item?.element?.icon ?? {}\n//                                    return item.label?.toString().toLowerCase() ===\n//                                      (children as string).toString().toLowerCase() ? (\n//                                      <span\n//                                        className=\"whitespace-nowrap\"\n//                                        key={idx}\n//                                      >\n//                                        {(Icon ? <Icon {...props} /> : '') as React.ReactNode}\n//                                      </span>\n//                                    ) : null\n//                                  })\n//                                })}\n//\n//                              {/*NOTE: Rendering the row column childrend */}\n//                              <span className=\"text-ellipsis overflow-hidden whitespace-nowrap\">{children}</span>\n//                            </div>\n//                            {/*NOTE: Dropdown Menu */}\n//                            {idx === headersEntries.length - 1 && dropdownMenu.optionsData?.length && (\n//                              <DropdownMenuView\n//                                trigger={{\n//                                  className: 'flex h-8 w-8 p-0 data-[state=open]:bg-muted',\n//                                  children: <span className=\"sr-only\">Open menu</span>,\n//                                  variant: 'ghost',\n//                                  size: 'icon',\n//                                  icon: {\n//                                    children: Ellipsis,\n//                                    className: 'h-4 w-4',\n//                                  },\n//                                }}\n//                                content={{\n//                                  align: 'end',\n//                                  options: dropdownMenu,\n//                                }}\n//                              />\n//                            )}\n//                          </div>\n//                        </TableCell>\n//                      )\n//                    )\n//                  })}\n//                </TableRow>\n//\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/table/table.lib.ts",
      "content": "import { DropdownMenuOptionsDataType } from '@/registry/default/ui/dropdown-menu'\nimport { Order, TableContentDataType, TableHeaderType } from './table.types'\nimport { ColumnsViewedStateType } from './table'\n\nexport function sortArray<T>(columns: TableHeaderType[], array: T[], key?: keyof T, order: Order = 'desc') {\n  const toggleSortOrder = (currentOrder: Order): Order => {\n    if (currentOrder === 'not sorted') return order\n    if (currentOrder === 'asc' && order === 'asc') return 'not sorted'\n    if (currentOrder === 'asc' && order === 'desc') return 'desc'\n    if (currentOrder === 'desc' && order === 'desc') return 'not sorted'\n    if (currentOrder === 'desc' && order === 'asc') return 'asc'\n    return 'not sorted'\n  }\n\n  const updatedColumns = columns.map(col => {\n    if (col.label === key) {\n      return {\n        ...col,\n        currentSort: toggleSortOrder(col.currentSort ?? 'not sorted'),\n      }\n    }\n    return col\n  })\n\n  const sortedData = array.toSorted((a, b) => {\n    const valueA = key ? (a[key] as TableContentDataType).children : a\n    const valueB = key ? (b[key] as TableContentDataType).children : b\n\n    if (order === 'not sorted' || !key) return 0\n\n    if (typeof valueA === 'string' && typeof valueB === 'string') {\n      return order === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA)\n    } else if (typeof valueA === 'number' && typeof valueB === 'number') {\n      return order === 'asc' ? valueA - valueB : valueB - valueA\n    } else {\n      return order === 'asc' ? (valueA > valueB ? 1 : -1) : valueA < valueB ? 1 : -1\n    }\n  })\n\n  return { sortedData, updatedColumns }\n}\n\nexport type OptionsDataType<T extends Record<string, unknown>> = {\n  header: ColumnsViewedStateType<T>[]\n  columnsViewed?: ColumnsViewedStateType<T>[]\n  setColumnsViewed?: React.Dispatch<React.SetStateAction<ColumnsViewedStateType<T>[]>>\n}\n\nexport function get_options_data<T extends Record<string, unknown> = Record<string, string>>({\n  header,\n  columnsViewed,\n  setColumnsViewed,\n}: OptionsDataType<T>) {\n  return header.map((column, idx) => {\n    const { children, className, label, sortable, disabled, currentSort, dropdownMenuOptions, ...props } = column ?? {}\n\n    return {\n      key: idx,\n      className: 'capitalize',\n      checked: columnsViewed?.some(headerItem => headerItem?.label === label),\n      disabled: disabled,\n      onCheckedChange: () => {\n        setColumnsViewed?.(prevHeaders => {\n          const exists = prevHeaders.some(headerItem => headerItem?.label === label)\n\n          if (exists) {\n            return prevHeaders.filter(headerItem => headerItem?.label !== label)\n          }\n\n          const originalIndex = header.findIndex(headerItem => headerItem?.label === label)\n          const newHeaders = [...prevHeaders]\n          newHeaders.splice(originalIndex, 0, column)\n          return newHeaders.sort(\n            (a, b) =>\n              header.findIndex(headerItem => headerItem?.label === a?.label) -\n              header.findIndex(headerItem => headerItem?.label === b?.label)\n          )\n        })\n      },\n      children: label ?? children,\n      ...props,\n    }\n  }) as DropdownMenuOptionsDataType<T>[]\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/table/table.tsx",
      "content": "import * as React from 'react'\n\nimport { useDuckShortcut } from '@ahmedayob/duck-shortcut'\nimport { Checkbox } from '@/registry/default/ui/checkbox'\nimport { ScrollArea, ScrollBar } from '@/registry/default/ui/scroll-area'\nimport { PaginationCustomView } from '@/registry/default/ui/pagination'\nimport { Input } from '@/registry/default/ui/input'\nimport { Combobox, type ComboboxType } from '@/registry/default/ui/combobox'\nimport { CommandShortcut, type CommandListGroupDataType } from '@/registry/default/ui/command'\nimport { type DropdownMenuOptionsDataType, DropdownMenuView } from '@/registry/default/ui/dropdown-menu'\nimport { ContextCustomView, DuckContextMenuProps } from '@/registry/default/ui/context-menu'\n\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../tooltip'\nimport { LabelType } from '../button'\nimport { Badge } from '../badge'\nimport { useDebounceCallback } from '@/hooks'\nimport { get_options_data } from './table.lib'\nimport { PAGE_INDEX, PAGE_SIZE } from './table.constants'\nimport { useDuckTable } from './table.hook'\nimport { TableDropdownMenuOptionsType, TableHeaderType, TablePaginationType } from './table.types'\n\nimport { cn, groupArrays } from '@/lib/utils'\n\nimport { ArrowDownIcon, ArrowUpIcon, CirclePlus } from 'lucide-react'\nimport { CaretSortIcon, MixerHorizontalIcon } from '@radix-ui/react-icons'\n\n/*\n *  - This's the normal table components.\n *  It's a custom table component, you can use the dataTable Functionality down\n *  this file to make sure you get the best performance, out of this table with\n *  a more customized design.\n */\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table\n        ref={ref}\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n)\nTable.displayName = 'Table'\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <thead\n      ref={ref}\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n)\nTableHeader.displayName = 'TableHeader'\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody\n      ref={ref}\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n)\nTableBody.displayName = 'TableBody'\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot\n      ref={ref}\n      className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}\n      {...props}\n    />\n  )\n)\nTableFooter.displayName = 'TableFooter'\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', className)}\n      {...props}\n    />\n  )\n)\nTableRow.displayName = 'TableRow'\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\n        className\n      )}\n      {...props}\n    />\n  )\n)\nTableHead.displayName = 'TableHead'\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td\n      ref={ref}\n      className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}\n      {...props}\n    />\n  )\n)\nTableCell.displayName = 'TableCell'\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption\n      ref={ref}\n      className={cn('mt-4 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  )\n)\nTableCaption.displayName = 'TableCaption'\n\n/*\n *  - From this point to the rest of the files are the components for the data table lib we made it's\n *  totally customizable, if you don't like something about this lib you can change it.\n *  - It's totally type safe and easy to use.\n */\n\nexport type DuckTableContextType<Column extends Record<string, unknown>> = {\n  pagination: TablePaginationStateType\n  setPagination: React.Dispatch<React.SetStateAction<TablePaginationStateType>>\n  selection: TableSelectionStateType\n  setSelection: React.Dispatch<React.SetStateAction<TableSelectionStateType>>\n  search: TableSearchStateType\n  setSearch: React.Dispatch<React.SetStateAction<TableSearchStateType>>\n  columnsViewed: ColumnsViewedStateType<Column>[] | undefined\n  setColumnsViewed: React.Dispatch<React.SetStateAction<ColumnsViewedStateType<Column>[]>> | undefined\n  order: OrderStateType[]\n  setOrder: React.Dispatch<React.SetStateAction<OrderStateType[]>>\n  filterBy: FilterByType\n  setFilterBy: React.Dispatch<React.SetStateAction<FilterByType>>\n}\n\nexport const DuckTableContext = React.createContext<DuckTableContextType<any> | null>(null)\n\nexport interface DuckTableProviderProps extends React.HTMLAttributes<HTMLDivElement> {}\nexport interface TablePaginationStateType {\n  pageSize: number\n  pageIndex: number\n}\n\nexport type FilterByType = string[]\n\nexport interface TableSelectionStateType {\n  rowSelected: Record<string, unknown>[]\n}\n\nexport interface TableSearchStateType {\n  query: string\n}\nexport type ColumnsViewedStateType<T extends Record<string, unknown>> = TableHeaderType<T> | null\n\nexport type OrderStateType = {\n  orderBy: string\n  orderDir: 'asc' | 'desc'\n}\n\nexport const DuckTableProvider = <Column extends Record<string, unknown>>({\n  children,\n  className,\n  ...props\n}: DuckTableProviderProps) => {\n  const [pagination, setPagination] = React.useState<TablePaginationStateType>({\n    pageSize: PAGE_SIZE,\n    pageIndex: PAGE_INDEX,\n  })\n\n  const [selection, setSelection] = React.useState<TableSelectionStateType>({\n    rowSelected: [],\n  })\n\n  const [search, setSearch] = React.useState<TableSearchStateType>({\n    query: '',\n  })\n\n  const [filterBy, setFilterBy] = React.useState<FilterByType>([])\n\n  const [columnsViewed, setColumnsViewed] = React.useState<ColumnsViewedStateType<Column> | never[]>([])\n\n  const [order, setOrder] = React.useState<OrderStateType[]>([])\n\n  return (\n    <DuckTableContext.Provider\n      value={{\n        pagination,\n        setPagination,\n        selection,\n        setSelection,\n        search,\n        setSearch,\n        columnsViewed: columnsViewed as ColumnsViewedStateType<Column>[],\n        setColumnsViewed: setColumnsViewed as React.Dispatch<React.SetStateAction<ColumnsViewedStateType<Column>[]>>,\n        order,\n        setOrder,\n        filterBy,\n        setFilterBy,\n      }}\n    >\n      <div\n        className={cn(`w-full flex flex-col gap-4`, className)}\n        {...props}\n      >\n        {children}\n      </div>\n    </DuckTableContext.Provider>\n  )\n}\n\nexport const DuckTableBar = ({ children, className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cn('flex items-end lg:items-center justify-between gap-2', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport interface DuckTableSearchProps extends React.HTMLProps<HTMLDivElement> {\n  input?: DuckTableSearchInputProps\n}\n\nexport const DuckTableSearch = ({ children, className, input, ...props }: DuckTableSearchProps) => {\n  const { setSearch } = useDuckTable() ?? {}\n\n  //NOTE: Debounce search\n  const debouncedSearch = useDebounceCallback((newValue: string) => {\n    setSearch?.(prev => ({\n      ...prev,\n      q: newValue,\n    }))\n  }, 500)\n\n  return (\n    <div\n      className={cn('flex flex-1 items-center space-x-2', className)}\n      {...props}\n    >\n      <DuckTableSearchInput\n        {...input}\n        trigger={{\n          ...input?.trigger,\n          onChange: (event: React.ChangeEvent<HTMLInputElement>) => debouncedSearch(event.target.value),\n        }}\n      />\n    </div>\n  )\n}\n\nexport interface DuckTableSearchInputProps {\n  trigger: React.ComponentPropsWithoutRef<typeof Input>\n  label?: LabelType\n  badge?: React.ComponentPropsWithoutRef<typeof CommandShortcut>\n  keys?: string[]\n}\n\nconst DuckTableSearchInput = React.forwardRef<React.ElementRef<typeof Input>, DuckTableSearchInputProps>(\n  ({ trigger, label, badge, keys }, ref) => {\n    const { children: badgeChildren = '⌃+⇧+F', className: badgeClassName, ...badgeProps } = badge ?? {}\n    const { children: labelChildren = 'Filter tasks...', className: labelClassName, ...labelProps } = label ?? {}\n    const {\n      className: triggerClassName = 'h-8 w-[150px] lg:w-[200px]',\n      placeholder = 'Filter tasks...',\n      ...triggerProps\n    } = trigger ?? {}\n\n    //NOTE: Duck shortcut\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    useDuckShortcut(\n      {\n        keys: keys ?? ['ctrl+shift+f'],\n        onKeysPressed: () => {\n          if (inputRef.current) {\n            inputRef.current.focus()\n          }\n        },\n      },\n      [inputRef]\n    )\n\n    console.log(triggerProps, 'asdfasdf')\n    return (\n      <div\n        className=\"flex flex-col\"\n        ref={ref}\n      >\n        <Tooltip delayDuration={100}>\n          <TooltipTrigger>\n            <Input\n              className={cn('h-8 w-[150px] lg:w-[200px]', triggerClassName)}\n              ref={inputRef}\n              placeholder={placeholder}\n              {...triggerProps}\n            />\n          </TooltipTrigger>\n          <TooltipContent\n            className={cn('flex items-center gap-2 z-50 justify-start', labelClassName)}\n            {...labelProps}\n          >\n            <CommandShortcut\n              className=\"text-[.8rem]\"\n              {...badgeProps}\n            >\n              <Badge\n                variant=\"secondary\"\n                size=\"sm\"\n                className=\"p-0 px-2\"\n              >\n                {badgeChildren}\n              </Badge>\n            </CommandShortcut>\n            <p className=\"text-sm\">{labelChildren}</p>\n          </TooltipContent>\n        </Tooltip>\n      </div>\n    )\n  }\n)\n\nexport interface DuckTableFilterProps<\n  T extends Record<string, any> = Record<string, string>,\n  Y extends keyof Record<string, unknown> = string,\n> extends React.HTMLProps<HTMLDivElement> {\n  filter: ComboboxType<Y, Extract<keyof T, string>>[]\n}\n\nexport const DuckTableFilter = <\n  T extends Record<string, any> = Record<string, string>,\n  Y extends keyof Record<string, unknown> = string,\n>({\n  children,\n  filter,\n  className,\n  ...props\n}: DuckTableFilterProps<T, Y>) => {\n  const { filterBy, setFilterBy } = useDuckTable() ?? {}\n\n  return (\n    <div\n      className={cn('flex items-center gap-2', className)}\n      {...props}\n    >\n      {filter?.map((filter, idx) => {\n        const { className: triggerClassName, children: triggerChildren, ...triggerProps } = filter?.trigger ?? {}\n        return (\n          <Combobox<Y, Extract<keyof T, string>>\n            key={idx}\n            type={'listbox'}\n            title={filter?.title}\n            wrapper={filter?.wrapper}\n            trigger={{\n              icon: {\n                children: CirclePlus,\n                className: '!size-4 stroke-[1.5]',\n              },\n              children: (triggerChildren ?? 'not found') as Y,\n              className: cn('[&>div>span]:text-xs ml-auto w-[88px] lg:w-auto capitalize', triggerClassName),\n              ...triggerProps,\n            }}\n            onSelect={\n              filter?.onSelect ?? {\n                value: filterBy as Extract<keyof T, string>[],\n                setValue: setFilterBy as React.Dispatch<React.SetStateAction<Extract<keyof T, string>[]>>,\n              }\n            }\n            content={{\n              ...filter?.content!,\n            }}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport interface DuckTableBarRightSideProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport const DuckTableBarRightSide = React.forwardRef<HTMLDivElement, DuckTableBarRightSideProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        className={cn('grid lg:flex items-center lg:justify-between gap-2', className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\n\nexport interface DuckTableBarLeftSideProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport const DuckTableBarLeftSide = React.forwardRef<HTMLDivElement, DuckTableBarLeftSideProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        className={cn('grid lg:flex items-center lg:justify-between gap-2', className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\n\nexport interface DuckTableBarActionsProps<T extends Record<string, unknown>, C extends boolean> {\n  header: TableHeaderType<T, C>[]\n}\n\nexport const TableBarViewButton = <T extends Record<string, any> = Record<string, string>, C extends boolean = false>({\n  header,\n}: DuckTableBarActionsProps<T, C>) => {\n  const { setColumnsViewed, columnsViewed } = useDuckTable<T>() ?? {}\n\n  const option_data = get_options_data<T>({ header, columnsViewed, setColumnsViewed })\n\n  return (\n    <>\n      <DropdownMenuView\n        trigger={{\n          children: (\n            <>\n              <MixerHorizontalIcon className=\"mr-2 h-4 w-4\" />\n              View\n            </>\n          ),\n          className: 'ml-auto [&>div]:h-8 h-8 w-[79px] lg:flex [&>div]:gap-0 text-xs',\n          label: {\n            children: 'Toggle columns',\n            showCommand: true,\n            showLabel: true,\n            side: 'top',\n          },\n          command: {\n            key: 'ctrl+shift+v',\n            label: '⌃+⇧+V',\n          },\n        }}\n        content={{\n          label: {\n            children: 'Toggle columns',\n          },\n          options: {\n            itemType: 'checkbox',\n            optionsData: option_data,\n          },\n        }}\n      />\n    </>\n  )\n}\n\nexport interface DuckTableHeaderProps<\n  T extends Record<string, any> = Record<string, string>,\n  C extends boolean = true,\n> {\n  headers: TableHeaderType<T, C>[]\n  selectable?: boolean\n}\n\nexport const DuckTableHeader = <T extends Record<string, any> = Record<string, string>, C extends boolean = true>({\n  headers,\n  selectable,\n}: DuckTableHeaderProps<T, C>) => {\n  return (\n    <>\n      <TableHeader>\n        <TableRow>\n          {headers?.map((column, idx) => {\n            // console.log(column)\n            const { children, className, sortable, label, showLabel, dropdownMenuOptions, currentSort, ...props } =\n              column\n            // const actionsArgs = {\n            //   sortArray,\n            //   setTableData,\n            //   setHeaders,\n            //   column,\n            //   idx,\n            //   data: tableData,\n            //   headers,\n            //   tableData,\n            // } as unknown as TableDropdownMenuOptionsType<C>\n\n            //NOTE: passing the actionsArgs to the onClick function\n            const fullDropDownMenuOptions = dropdownMenuOptions?.map(item => {\n              return {\n                ...item,\n                // onClick: (e: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLDivElement>) => {\n                //   item.action?.(e, actionsArgs)\n                // },\n              }\n            })\n\n            return (\n              headers.some(header => header.children === column.children) && (\n                <React.Fragment key={idx}>\n                  {idx === 0 && (\n                    <TableHead\n                      className={cn(\n                        'flex items-center w-full data-[state=open]:bg-accent text-xs capitalize h-[50px] py-2',\n                        dropdownMenuOptions?.length && 'justify-end'\n                      )}\n                      {...props}\n                    >\n                      {selectable && (\n                        <Checkbox\n                          className=\"border-border\"\n                          // onClick={() =>\n                          //   // setSelected(selected.length === tableData.length ? [] : tableData.map(item => item)\n                          //               // )\n                          // }\n                          // checked={\n                          //   //   // selected.length === tableData.length\n                          //   //   //   ? true\n                          //   //   //   : selected.length < tableData.length && selected.length\n                          //   //   //     ? 'indeterminate'\n                          //   //   //     : false\n                          // }\n                        />\n                      )}\n                    </TableHead>\n                  )}\n                  <TableHead\n                    className={cn('h-[40px] py-2', className)}\n                    {...props}\n                  >\n                    {/*NOTE: Rendering Sorting else rendering label*/}\n                    {!sortable ? (\n                      <span>{(label as string) ?? children}</span>\n                    ) : (\n                      <div className={cn('flex items-center space-x-2', className)}>\n                        {dropdownMenuOptions?.length && (\n                          <DropdownMenuView<TableDropdownMenuOptionsType<T, C>>\n                            trigger={{\n                              className: '-ml-3 h-8 data-[state=open]:bg-accent text-xs ',\n                              children: (\n                                <>\n                                  <span className=\"capitalize\">{(label as string) ?? children}</span>\n                                  {headers[idx]?.currentSort === 'asc' ? (\n                                    <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n                                  ) : headers[idx]?.currentSort === 'desc' ? (\n                                    <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n                                  ) : (\n                                    <CaretSortIcon className=\"ml-2 h-4 w-4\" />\n                                  )}\n                                </>\n                              ),\n                              label: showLabel\n                                ? {\n                                    children: label.toString() + ' options',\n                                    className: 'capitalize',\n                                    showLabel: true,\n                                    side: 'top',\n                                  }\n                                : undefined,\n                              variant: 'ghost',\n                              size: 'sm',\n                            }}\n                            content={{\n                              align: 'start',\n                              options: {\n                                group: [2, 1],\n                                optionsData: fullDropDownMenuOptions as\n                                  | DropdownMenuOptionsDataType<TableDropdownMenuOptionsType<T, C>>[]\n                                  | undefined,\n                              },\n                            }}\n                          />\n                        )}\n                      </div>\n                    )}\n                  </TableHead>\n                </React.Fragment>\n              )\n            )\n          })}\n        </TableRow>\n      </TableHeader>\n    </>\n  )\n}\nDuckTableHeader.displayName = 'TableCustomViewHeader'\n\nexport type TableBodyRowProps<T extends Record<string, unknown>> = {\n  row?: React.ComponentPropsWithoutRef<typeof TableRow>\n} & Partial<DuckContextMenuProps<T>>\n\nexport const DuckTableBodyRow = <C extends Record<string, unknown>>({\n  wrapper,\n  trigger,\n  content,\n  row,\n}: TableBodyRowProps<C>) => {\n  const { children, ...props } = row ?? {}\n  return (\n    <ContextCustomView\n      trigger={{\n        ...trigger,\n        children: <TableRow {...props}>{children ?? trigger?.children}</TableRow>,\n      }}\n      wrapper={wrapper}\n      content={content}\n    />\n  )\n}\n\nexport interface DuckTableFooterProps extends Partial<React.ComponentPropsWithoutRef<typeof TableFooter>> {\n  columns: FooterColumnType[]\n}\nexport type FooterColumnType = Partial<React.ComponentPropsWithoutRef<typeof TableCell>>\n\nexport const DuckTableFooter = ({ className, columns }: DuckTableFooterProps) => {\n  return (\n    <TableFooter className={cn(className)}>\n      <TableRow>\n        {columns?.map((item, idx) => {\n          const { children, ...props } = item\n          return (\n            <TableCell\n              key={idx}\n              {...props}\n            >\n              {children}\n            </TableCell>\n          )\n        })}\n      </TableRow>\n    </TableFooter>\n  )\n}\n\nexport interface DuckTableDownBarProps extends React.HTMLProps<HTMLDivElement> {}\n\nexport const DuckTableDownBar = ({ children, className, ...props }: DuckTableDownBarProps) => {\n  return (\n    <div\n      className={cn('grid lg:flex items-center lg:justify-between gap-4 lg::gap-0', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\nexport type DuckTablePaginationProps = {}\n\nexport const DuckTablePagination = ({}: DuckTablePaginationProps) => {\n  const { pagination, setPagination } = useDuckTable() ?? {}\n  return (\n    /*NOTE: Navigation */\n    <PaginationCustomView\n      right={{\n        onClick: () => {\n          setPagination(old => ({\n            ...old,\n            pageIndex: old.pageIndex === old.pageSize - 1 ? old.pageSize - 1 : (old.pageIndex ?? 1) + 1,\n          }))\n        },\n        command: {\n          key: 'ctrl+shift+up',\n          label: '⌃+⇧+↑',\n          // action: () =>\n          //     setPaginationState({\n          //         ...paginationState,\n          //         activePage:\n          //             paginationState.activePage === resultArrays.length - 1\n          //                 ? resultArrays.length - 1\n          //                 : (paginationState.activePage ?? 1) + 1,\n          //     })\n          //     ,\n        },\n        label: {\n          showCommand: true,\n          showLabel: true,\n          side: 'top',\n          children: 'Next page',\n        },\n        // disabled: paginationState.activePage === resultArrays.length - 1,\n      }}\n      maxRight={{\n        // onClick: () => setPaginationState({ ...paginationState, activePage: resultArrays.length - 1 }),\n        // command: {\n        //     key: 'ctrl+shift+right',\n        //     label: '⌃+⇧+→',\n        //     action: () => setPaginationState({ ...paginationState, activePage: resultArrays.length - 1 }),\n        // },\n        label: {\n          showCommand: true,\n          showLabel: true,\n          side: 'top',\n          children: 'Last page',\n        },\n        // disabled: paginationState.activePage === resultArrays.length - 1,\n      }}\n      left={{\n        // onClick: () =>\n        //     setPaginationState({\n        //         ...paginationState,\n        //         activePage: paginationState.activePage === 0 ? 0 : (paginationState.activePage ?? 1) - 1,\n        //     }),\n        // command: {\n        //     key: 'ctrl+shift+down',\n        //     label: '⌃+⇧+↓',\n        //     action: () =>\n        //         setPaginationState({\n        //             ...paginationState,\n        //             activePage: paginationState.activePage === 0 ? 0 : (paginationState.activePage ?? 1) - 1,\n        //         }),\n        // },\n        label: {\n          showCommand: true,\n          showLabel: true,\n          side: 'top',\n          children: 'Previous page',\n        },\n        // disabled: paginationState.activePage === 0,\n      }}\n      maxLeft={{\n        // onClick: () => setPaginationState({ ...paginationState, activePage: 0 }),\n        // command: {\n        //     key: 'ctrl+shift+left',\n        //     label: '⌃+⇧+←',\n        //     action: () => setPaginationState({ ...paginationState, activePage: 0 }),\n        // },\n        label: {\n          showCommand: true,\n          showLabel: true,\n          side: 'top',\n          children: 'First page',\n        },\n        // disabled: paginationState.activePage === 0,\n      }}\n    />\n  )\n}\n\nconst TablePagination = <\n  C extends Record<string, unknown> = Record<string, string>,\n  Y extends keyof Record<string, unknown> = string,\n>({\n  resultArrays,\n  selected,\n  paginationState,\n  paginations,\n  value,\n  tableData,\n  setPaginationState,\n  setValue,\n}: TablePaginationType<C>) => {\n  //NOTE: gen the page length data\n  const pageLengthData = paginations?.groupSize\n    ? Array.from({ length: Math.ceil(tableData.length / paginations.groupSize) }, (_, index) => {\n        const start = index * paginations.groupSize + 1\n        const end = Math.min((index + 1) * paginations.groupSize, tableData.length)\n        if (start > tableData.length) return null\n        return end.toString()\n      })\n        .filter(Boolean)\n        .reduce((acc, curr) => {\n          acc.push({ label: curr!, element: { children: curr! } })\n          return acc\n        }, [] as CommandListGroupDataType[])\n    : []\n\n  return (\n    <>\n      <div className=\"grid lg:flex items-center lg:justify-between gap-4 lg::gap-0\">\n        <div className=\"flex items-center justify-between\">\n          {/*NOTE: Select Count */}\n          {paginations?.showSelectCount && (\n            <span className=\"flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              {selected.length} of {tableData.length} row(s) selected.\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center lg:justify-between lg:gap-4\">\n          {/*NOTE: Group Size */}\n          {paginations?.showGroup && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"max-2xl:hidden flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n                Rows per page\n              </span>\n              <TooltipProvider>\n                <Combobox<Extract<keyof C, string>, Y>\n                  type=\"combobox\"\n                  content={{\n                    data: (pageLengthData ?? []) as CommandListGroupDataType<Y>[],\n                    showSearchInput: false,\n                    className: 'w-[5rem] h-fit',\n                  }}\n                  trigger={{\n                    command: {\n                      key: 'ctrl+shift+c',\n                      label: '⌃+⇧+C',\n                    },\n                    label: {\n                      children: 'Rows per page',\n                      showLabel: true,\n                      side: 'top',\n                      className: 'text-xs',\n                      showCommand: true,\n                    },\n                    className: 'w-[4.5rem] h-[32px] gap-0',\n                  }}\n                  onSelect={{\n                    setValue: setValue as React.Dispatch<React.SetStateAction<Y[]>>,\n                    value: value as Y[],\n                  }}\n                />\n              </TooltipProvider>\n            </div>\n          )}\n          {paginations?.showPageCount && (\n            <span className=\"max-lg:hidden flex items-center justify-center text-sm font-medium text-muted-foreground whitespace-nowrap\">\n              Page {paginationState.activePage + 1} of {resultArrays.length}\n            </span>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nTablePagination.displayName = 'TablePagination'\n\nexport type DuckTableBodyProps<T> = {\n  data: T\n  children: (data: T) => React.ReactNode\n}\n\nexport const DuckTableBody = <T,>({ data, children }: DuckTableBodyProps<T>) => {\n  const { pagination } = useDuckTable() ?? {}\n  const tableDataGrouped = groupArrays<T>([pagination?.pageSize ?? PAGE_SIZE], data as T[])\n  const pageIdx = pagination?.pageIndex ?? PAGE_INDEX\n\n  return <TableBody>{children(tableDataGrouped[pageIdx] as T)}</TableBody>\n}\n\nexport interface DuckTableProps extends React.ComponentPropsWithoutRef<typeof Table> {\n  wrapper?: React.ComponentPropsWithoutRef<typeof ScrollArea>\n}\n\nexport const DuckTable = ({ wrapper, className, children, ...props }: DuckTableProps) => {\n  const { className: wrapperClassName, ...wrapperProps } = wrapper! ?? {}\n\n  return (\n    <ScrollArea\n      className={cn('border border-border rounded-lg !overflow-visible', wrapperClassName)}\n      {...wrapperProps}\n    >\n      <Table {...props}>{children}</Table>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  )\n}\n\nDuckTable.displayName = 'DuckTable'\n\n// const {children: captionChildren, className: captionClassName, ...captionProps } = caption! ?? []\n// const [selected, setSelected] = React.useState<TableContentDataType<C>[]>([])\n// const [tableData, setTableData] = React.useState<TableContentDataType<C>[]>(tableContentData)\n// const [paginationState, setPaginationState] = React.useState({\n//     activePage: pagination?.activePage ?? 0,\n//     groupSize: pagination?.groupSize ?? tableData.length,\n// })\n// const [headers, setHeaders] = React.useState<TableHeaderType<T, C>[]>(header ?? [])\n// const [search, setSearch] = React.useState<{ q: string; qBy: string[] }>({q: '', qBy: [] })\n// const [value, setValue] = React.useState<string[]>([paginationState.groupSize.toString()])\n//\n// const [filterLabels, setFilterLabels] = React.useState<{ [key: string]: number }>({})\n//\n// //NOTE: Function to split array into chunks\n// const splitIntoChunks = (array: typeof tableData, chunkSize: number) => {\n//     const chunks = []\n//     for (let i = 0; i < array.length; i += chunkSize) {\n//         chunks.push(array.slice(i, i + chunkSize))\n//     }\n//     return chunks\n// }\n//\n// const filteredData = React.useMemo(() => {\n//     //NOTE: Step 1: Filter the data based on search.q and search.qBy\n//     const data = tableData.filter(item => {\n//         return !search.qBy.length\n//             ? Object.values(item).some(value => JSON.stringify(value).toLowerCase().includes(search.q.toLowerCase()))\n//             : Object.values(item).some(value =>\n//                 search.qBy.some(q => JSON.stringify(value).toLowerCase().includes(q.toLowerCase()))\n//             )\n//     })\n//\n//     //NOTE: Step 2: Calculate label counts based on the filtered data\n//     const labelCounts: {[key: string]: number } = {}\n//     data.forEach(item => {\n//         Object.values(item).forEach(value => {\n//             filters?.forEach(filter => {\n//                 filter?.content?.data.forEach(option => {\n//                     const label = option?.label?.toString().toLowerCase()\n//                     if (\n//                         JSON.stringify(value)\n//                             .toLowerCase()\n//                             .includes(label ?? '')\n//                     ) {\n//                         labelCounts[label ?? ''] = (labelCounts[label ?? ''] || 0) + 1\n//                     }\n//                 })\n//             })\n//         })\n//     })\n//\n//     setFilterLabels(labelCounts)\n//\n//     return data\n// }, [tableData, filters, search])\n//\n// //NOTE: Step 3: Update the filters to display the count based on the filtered data\n// const updatedFilters = React.useMemo(() => {\n//     return filters?.map(filter => {\n//         return {\n//             ...filter,\n//             content: {\n//                 ...filter.content,\n//                 data: filter?.content?.data.map(option => {\n//                     const label = option?.label?.toString().toLowerCase()\n//                     return {\n//                         ...option,\n//                         element: {\n//                             ...option.element,\n//                             label: {\n//                                 ...option?.element?.label,\n//                                 children: filterLabels[label ?? ''] || 0,\n//                             },\n//                         },\n//                     }\n//                 }),\n//             },\n//         }\n//     })\n// }, [filters, filterLabels])\n//\n// //NOTE: Step 4: Split the data into chunks based on the groupSize\n// const resultArrays = splitIntoChunks(filteredData, +value)\n\n// {tableData && !!resultArrays.length && (\n//     <TableCustomBody<T, C, Y>\n//         headers={headers}\n//         resultArrays={resultArrays}\n//         paginationState={paginationState}\n//         selection={selection ?? false}\n//         selected={selected}\n//         filtersData={filters}\n//         setSelected={setSelected}\n//         dropdownMenu={dropdownMenu ?? {}}\n//         contextMenu={contextMenu ?? {}}\n//     />\n// )}\n// {footer?.columns && <TableCustomFooter {...footer} />}\n// {caption && (\n//     <div\n//         className={cn('mb-4 text-sm text-muted-foreground text-center', captionClassName)}\n//         {...captionProps}\n//     >\n//             {caption?.children}\n//         </div>\n// )}\n// {pagination && (\n//     <TablePagination<C>\n//         selected={selected}\n//         value={value}\n//         tableData={tableData}\n//         resultArrays={resultArrays}\n//         paginationState={paginationState}\n//         paginations={pagination}\n//         setValue={setValue}\n//         setPaginationState={setPaginationState}\n//     />\n// )}\nDuckTable.displayName = 'TableCustomView'\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n  DuckTable as TableCustomView,\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/table/table.types.ts",
      "content": "import { ScrollArea } from '@/registry/default/ui/scroll-area'\nimport { sortArray } from './table.lib'\nimport { TableCell, TableFooter, TablePaginationStateType } from './table'\nimport { ComboboxType } from '@/registry/default/ui/combobox'\nimport { ContextMenuOptionsType } from '@/registry/default/ui/context-menu'\nimport { DropdownMenuOptionsDataType, DropdownMenuOptionsType } from '@/registry/default/ui/dropdown-menu'\nimport { IconType, LabelType } from '../button'\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport type Order = 'asc' | 'desc' | 'not sorted'\n\nexport interface TableDropdownMenuOptionsType<T extends Record<string, any>, C extends boolean> {\n  sortArray: typeof sortArray\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderType<T, C>[]>>\n  headers: TableHeaderType<T, C>[]\n  tableData: TableContentDataType<T>[]\n  setTableData: React.Dispatch<React.SetStateAction<TableContentDataType<T>[]>>\n  data: TableContentDataType<T>[]\n  idx: number\n  column: TableHeaderType<T, C>\n}\n\nexport interface TableHeaderType<T extends Record<string, any>, C extends boolean = true>\n  extends Partial<React.HTMLProps<HTMLTableCellElement>> {\n  label: Extract<keyof T, string>\n  sortable?: boolean\n  showLabel?: boolean\n  currentSort?: C extends true ? 'asc' | 'desc' | 'not sorted' : never\n  dropdownMenuOptions?: C extends true ? DropdownMenuOptionsDataType<TableDropdownMenuOptionsType<T, C>>[] : never\n}\n\nexport interface TableHeaderActionsProps<T extends Record<string, unknown>, K extends boolean> {\n  header: TableHeaderType<T, K>[]\n  headers: TableHeaderType<T, K>[]\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderType<T, K>[]>>\n}\n\n// TableHeaderOptions\nexport interface TableHeaderOptionsType<T extends Record<string, any>, C extends boolean> {\n  sortArray: typeof sortArray\n  setHeaders: React.Dispatch<React.SetStateAction<TableHeaderType<T, C>[]>>\n  headers: TableHeaderType<T, C>[]\n  tableData: TableContentDataType<T>[]\n  setTableData: React.Dispatch<React.SetStateAction<TableContentDataType<T>[]>>\n  data: TableContentDataType<T>[]\n  idx: number\n  column: TableHeaderType<T, C>\n}\n\n// TableCustomBody\nexport interface TableCustomBodyProps<\n  T extends Record<string, unknown>,\n  Y extends keyof Record<string, unknown>,\n  C extends boolean,\n> {\n  headers: TableHeaderType<T, C>[]\n  resultArrays: TableContentDataType<T>[][]\n  paginationState: PaginationState\n  selection: boolean\n  selected: TableContentDataType<T>[]\n  setSelected: React.Dispatch<React.SetStateAction<TableContentDataType<T>[]>>\n  dropdownMenu: DropdownMenuOptionsType<TableHeaderOptionsType<T, C>>\n  contextMenu: ContextMenuOptionsType<TableHeaderOptionsType<T, C>>\n  filtersData: ComboboxType<Extract<keyof C, string>, Y>[] | undefined\n}\n\nexport type TableDataFilteredType<T extends Record<string, unknown>> = {\n  [K in keyof T]: [K, T[K]]\n}[keyof T][]\n\n// TableCustomFooter\n\n// TablePagination\nexport type TableContentDataType<C extends Record<string, any> = Record<string, string>> = {\n  [key in keyof C]: TableDataKey & { children?: C[key]; icon?: IconType }\n}\n\nexport interface TableDataKey extends React.HTMLProps<HTMLTableCellElement> {\n  withLabel?: Omit<LabelType, 'showCommand' | 'showLabel'>\n  withIcon?: React.ReactNode\n}\nexport interface TableCaptionType extends React.HTMLProps<HTMLTableCaptionElement> {}\nexport interface TablePaginationsType extends React.HTMLProps<HTMLDivElement> {\n  groupSize: number\n  activePage?: number\n  showPageCount?: boolean\n  showSelectCount?: boolean\n  showNavigation?: boolean\n  showGroup?: boolean\n}\n\nexport interface PaginationState {\n  activePage: number\n  groupSize: number\n}\n\nexport interface TablePaginationType<C extends Record<string, any> = Record<string, string>> {\n  selected: TableContentDataType<C>[]\n  setValue: React.Dispatch<React.SetStateAction<string[]>>\n  value: string[]\n  tableData: TableContentDataType<C>[]\n  paginations?: TablePaginationsType\n  resultArrays: TableContentDataType<C>[][]\n  paginationState: PaginationState\n  setPaginationState: React.Dispatch<React.SetStateAction<PaginationState>>\n}\n\n// TableCustomView\n",
      "type": "registry:ui"
    }
  ]
}