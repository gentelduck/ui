{
  "name": "upload-main",
  "type": "registry:example",
  "registryDependencies": [
    "upload"
  ],
  "root_folder": "registry-examples-components/upload",
  "files": [
    {
      "path": "registry-examples-components/upload/upload-1.tsx",
      "content": "import { cn } from '@/lib'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n  DropdownMenuView,\n  Input,\n  ScrollArea,\n  ScrollBar,\n  Separator,\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/registry/default/ui'\nimport { downloadAttachment } from '@/registry/default/ui/comment'\nimport { AlertDelete } from '@/registry/registry-ui-components/alert'\nimport { Button, buttonVariants } from '@/registry/registry-ui-components/button'\nimport { DropdownMenuRadioGroupContent, DropdownMenuSubWrapper } from '@/registry/registry-ui-components/dropdown-menu'\nimport {\n  AttachmentType,\n  fileTypeIcons,\n  FolderType,\n  getFileType,\n  SelectedFolderType,\n  UploadAdvancedProvider,\n  UploadAdvancedButton,\n  useUploadAdvancedContext,\n  UploadOrDragSvg,\n} from '@/registry/registry-ui-components/upload'\nimport {\n  ArrowDown,\n  ArrowUp,\n  Columns2,\n  Download,\n  Ellipsis,\n  Folder,\n  FolderOpen,\n  FolderPlusIcon,\n  RefreshCw,\n  Rows2,\n  Search,\n  Trash,\n  X,\n} from 'lucide-react'\nimport React from 'react'\nimport { toast } from 'sonner'\n\nexport const UploadSearch = () => {\n  const [open, setOpen] = React.useState<boolean>(false)\n  const [uploadSearch, setUploadSearch] = React.useState<string>('')\n  const inputRef = React.useRef<HTMLInputElement | null>(null)\n\n  React.useEffect(() => {\n    inputRef.current?.focus()\n  }, [open])\n\n  return (\n    <div className=\"flex items-center\">\n      <Button\n        size={'xs'}\n        variant={'muted'}\n        border={'muted'}\n        icon={{ children: Search }}\n        className={cn('relative w-[1.625rem] flex', open && 'hidden')}\n        onClick={() => {\n          setOpen(true)\n        }}\n      >\n        <span className=\"sr-only\">search</span>\n      </Button>\n      <div\n        className={cn(\n          buttonVariants({\n            variant: 'muted',\n            border: 'muted',\n            size: 'xs',\n            className: 'relative h-[1.625rem] overflow-hidden w-[200px] hidden [&_svg]:pointer-events-auto',\n          }),\n          open && ' flex'\n        )}\n      >\n        <Search className=\"absolute top-1/2 -translate-y-1/2 left-2 size-[0.875rem] z-10\" />\n        <Input\n          value={uploadSearch}\n          autoFocus={true}\n          onChange={e => setUploadSearch(e.currentTarget.value)}\n          className=\"pl-6 w-[200px] h-[1.625rem] text-xs text-accent-foreground/50 bg-transparent placeholder:text-xs placeholder:text-accent-foreground/50\"\n          placeholder=\"Search file or folder...\"\n          ref={inputRef}\n        />\n        <X\n          className=\"absolute top-1/2 -translate-y-1/2 right-2 size-[0.875rem] stroke-[2px] cursor-pointer z-10 pointer-events-auto\"\n          onClick={() => {\n            setUploadSearch('')\n            setOpen(false)\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const UploadDemoHeader = () => {\n  const [radioState, setRadioState] = React.useState<string>('duck')\n\n  return (\n    <div className=\"space-x-2 flex items-center place-content-end w-full pb-1 p-2 \">\n      <Button\n        size={'xs'}\n        icon={{ children: RefreshCw }}\n      >\n        Reload\n      </Button>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            size={'xs'}\n            icon={{ children: Rows2 }}\n          >\n            View\n          </Button>\n        </DropdownMenuTrigger>\n\n        <DropdownMenuContent>\n          <DropdownMenuRadioGroupContent\n            radioGroup={{\n              value: radioState,\n              onValueChange: setRadioState,\n            }}\n            content={[\n              { children: 'As Columns', value: 'As duck', icon: { children: Columns2 } },\n              { children: 'As Rows', value: 'duck', icon: { children: Rows2 } },\n            ]}\n          />\n          <DropdownMenuItem asChild>\n            <DropdownMenuSubWrapper\n              trigger={{ children: 'Sort By' }}\n              content={{\n                children: (\n                  <DropdownMenuRadioGroupContent\n                    radioGroup={{\n                      value: 'time_created',\n                      onValueChange: setRadioState,\n                    }}\n                    content={[\n                      { children: 'Name', value: 'name' },\n                      { children: 'Time created', value: 'time_created' },\n                      { children: 'Time modified', value: 'time_modified' },\n                      { children: 'Last time accessed', value: 'last_time_accessed' },\n                    ]}\n                  />\n                ),\n              }}\n            />\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <DropdownMenuSubWrapper\n              trigger={{ children: 'Sort Order' }}\n              content={{\n                children: (\n                  <DropdownMenuRadioGroupContent\n                    radioGroup={{\n                      value: 'Asc',\n                      onValueChange: setRadioState,\n                    }}\n                    content={[\n                      { children: 'Ascending', value: 'Asc', icon: { children: ArrowUp } },\n                      { children: 'Descending', value: 'Des', icon: { children: ArrowDown } },\n                    ]}\n                  />\n                ),\n              }}\n            />\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <Separator\n        orientation=\"vertical\"\n        className=\"h-6\"\n      />\n      <UploadAdvancedButton />\n      <FolderButton />\n      <Separator\n        orientation=\"vertical\"\n        className=\"h-6\"\n      />\n      <UploadSearch />\n    </div>\n  )\n}\n\nexport const UploadNavigation = () => {\n  return <></>\n}\n\nexport default function Upload1Demo() {\n  return (\n    <>\n      <UploadAdvancedProvider>\n        <div className=\"flex flex-col w-full gap-1 rounded-md bg-muted/10 border-border border h-[80vh]\">\n          <div className=\"flex items-center gap-4 justify-between\">\n            <UploadNavigation />\n            <UploadDemoHeader />\n          </div>\n          <Separator />\n          <UploadAdnvacedContent />\n        </div>\n      </UploadAdvancedProvider>\n    </>\n  )\n}\n\nexport const UploadAdnvacedContent = () => {\n  const { selectedFolder, attachments } = useUploadAdvancedContext() ?? {}\n\n  return (\n    <ScrollArea className=\"h-full\">\n      <div className=\"flex items-center h-full rounded-md\">\n        <div className=\"flex items-center h-full rounded-md\">\n          <UploadAttachmentsTreeItem attachments={attachments} />\n          <Separator orientation=\"vertical\" />\n        </div>\n        {selectedFolder.length > 0 &&\n          selectedFolder.map((folderContent, idx) => {\n            return (\n              <div\n                key={idx}\n                className=\"flex items-center h-full rounded-md\"\n              >\n                <UploadAttachmentsTreeItem attachments={folderContent.content} />\n                {idx !== selectedFolder.length - 1 && <Separator orientation=\"vertical\" />}\n              </div>\n            )\n          })}\n      </div>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  )\n}\n\nexport type UploadAttachmentsTreeItemProps = {\n  attachments: (AttachmentType | FolderType)[]\n}\n\nexport const UploadAttachmentsTreeItem = ({ attachments }: UploadAttachmentsTreeItemProps) => {\n  const { selectedFolder, setSelectedFolder } = useUploadAdvancedContext()\n\n  return attachments?.length > 0 ? (\n    <ScrollArea className=\"h-full rounded-md w-[250px] p-2 bg-muted/10\">\n      <div className=\"flex flex-col gap-1\">\n        {attachments?.map(attachment => {\n          if ((attachment as AttachmentType).file) {\n            return <UploadAttachmentFile attachmentFile={attachment as AttachmentType} />\n          }\n          if ((attachment as FolderType).files) {\n            return (\n              <UploadAttachmentFolder\n                attachmentFolder={attachment as FolderType}\n                selected={selectedFolder}\n                setSelected={setSelectedFolder}\n              />\n            )\n          }\n        })}\n      </div>\n    </ScrollArea>\n  ) : (\n    <div className=\"border-r border-r-border bg-muted/10 w-[250px] h-full p-4 flex items-center flex-col space-y-2 justify-center\">\n      <UploadOrDragSvg className=\"size-[100px]\" />\n      <p className=\"text-center w-full text-sm font-medium\">Drop your files here</p>\n      <p className=\"text-accent-foreground/70 text-center w-full text-xs max-w-[150px]\">\n        Or upload them via the \"Upload file\" button above\n      </p>\n    </div>\n  )\n}\n\nexport const UploadAttachmentFolder = ({\n  attachmentFolder,\n  selected,\n  setSelected,\n}: {\n  attachmentFolder: FolderType\n  selected: SelectedFolderType[]\n  setSelected: React.Dispatch<React.SetStateAction<SelectedFolderType[]>>\n}) => {\n  const exist_in_tree = selected?.some(item => item.id === attachmentFolder.id)\n\n  return (\n    <div className=\"relative\">\n      <div\n        className={cn(\n          'relative bg-card-foreground/5 rounded-md overflow-hidden w-full flex items-center justify-start gap-1 p-2 hover:bg-card-foreground/15 transition-all cursor-pointer [&_*]:select-none',\n          exist_in_tree && 'bg-card-foreground/15'\n        )}\n        onClick={() => {\n          setSelected(old => {\n            if (!exist_in_tree)\n              return [...old.filter(item => !(item.treeLevel >= attachmentFolder.treeLevel) && item), attachmentFolder]\n\n            return old.filter(item => !(item.treeLevel >= attachmentFolder.treeLevel))\n          })\n        }}\n      >\n        <div className=\"relative [&_svg]:size-4\">\n          {exist_in_tree ? <FolderOpen /> : <Folder className={cn(attachmentFolder.files > 0 && 'fill-white')} />}\n        </div>\n        <h6 className=\"text-xs font-medium truncate max-w-[70%]\">{attachmentFolder.name} </h6>\n      </div>\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            size={'xs'}\n            variant={'ghost'}\n            className=\"h-4 w-6 absolute top-1/2 right-2 -translate-y-1/2\"\n            icon={{ children: Ellipsis }}\n          />\n        </DropdownMenuTrigger>\n\n        <DropdownMenuContent className=\"\">\n          <div className=\"flex flex-col items-start justify-start [&_button]:justify-between [&_button]:w-full [&_button]:rounded-sm [&>div]:p-0 [&>div]:justify-between [&>div]:flex [&>div]:items-center [&>div]:w-full\">\n            <div>\n              <AlertDelete\n                itemName={attachmentFolder.name + ' folder'}\n                command={{\n                  label: 'Alt+D',\n                  key: 'Alt+d',\n                  variant: 'nothing',\n                  className: 'text-accent-foreground/40 w-full ml-6',\n                }}\n                onCancel={() => {}}\n                onContinue={() => {}}\n              />\n            </div>\n          </div>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}\n\nexport const UploadAttachmentFile = ({ attachmentFile }: { attachmentFile: AttachmentType }) => {\n  const fileType = getFileType(attachmentFile.file)\n  return (\n    <div className=\"relative\">\n      <Sheet>\n        <SheetTrigger asChild>\n          <div\n            className={cn(\n              'relative bg-card-foreground/5 rounded-md overflow-hidden w-full flex items-center justify-start gap-1 p-2 hover:bg-card-foreground/15 transition-all cursor-pointer'\n            )}\n            onClick={() => {}}\n          >\n            <div className=\"relative [&_svg]:size-4\">{fileTypeIcons[fileType]}</div>\n            <h6 className=\"text-xs font-medium truncate max-w-[70%]\">{attachmentFile.name} </h6>\n          </div>\n        </SheetTrigger>\n        <SheetContent className=\"w-[400px] flex flex-col gap-2 justify-between\">\n          <div>\n            <div>\n              <picture>\n                <img\n                  src={URL.createObjectURL(attachmentFile.file as Blob)}\n                  alt=\"\"\n                />\n              </picture>\n            </div>\n          </div>\n          <SheetFooter>\n            <SheetClose asChild>\n              <Button>Close</Button>\n            </SheetClose>\n          </SheetFooter>\n        </SheetContent>\n      </Sheet>\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            size={'xs'}\n            variant={'ghost'}\n            className=\"h-4 w-6 absolute top-1/2 right-2 -translate-y-1/2\"\n            icon={{ children: Ellipsis }}\n          />\n        </DropdownMenuTrigger>\n\n        <DropdownMenuContent className=\"\">\n          <div className=\"flex flex-col items-start justify-start [&_button]:justify-between [&_button]:w-full [&_button]:rounded-sm [&>div]:p-0 [&>div]:justify-between [&>div]:flex [&>div]:items-center [&>div]:w-full\">\n            <DropdownMenuItem>\n              <Button\n                size={'xs'}\n                variant={'ghost'}\n                onClick={() => {}}\n                icon={{ children: Download, className: 'h-4 w-4' }}\n              >\n                Download\n              </Button>\n            </DropdownMenuItem>\n            <div>\n              <AlertDelete\n                itemName={attachmentFile.name + ' folder'}\n                command={{\n                  label: 'Alt+D',\n                  key: 'Alt+d',\n                  variant: 'nothing',\n                  className: 'text-accent-foreground/40 w-full ml-6',\n                }}\n                onCancel={() => {}}\n                onContinue={() => {}}\n              />\n            </div>\n          </div>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}\n\nexport const FolderButton = () => {\n  return (\n    <div>\n      <Button\n        className=\"relative w-[1.625rem]\"\n        size={'xs'}\n        onClick={() => {\n          toast.info('Folder generated!')\n        }}\n        icon={{\n          children: FolderPlusIcon,\n        }}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}