{
  "name": "upload-main",
  "type": "registry:example",
  "registryDependencies": [
    "upload"
  ],
  "root_folder": "registry-examples-components/upload",
  "files": [
    {
      "path": "registry-examples-components/upload/upload-1.tsx",
      "content": "import { cn } from '@/lib'\nimport { DropdownMenuView, ScrollArea, ScrollBar, Separator } from '@/registry/default/ui'\nimport { downloadAttachment } from '@/registry/default/ui/comment'\nimport { Button } from '@/registry/registry-ui-components/button'\nimport {\n  AttachmentType,\n  fileTypeIcons,\n  FolderType,\n  getFileType,\n  SelectedFolderType,\n  UploadAdvancedProvider,\n  UploadAdvancedButton,\n  useUploadAdvancedContext,\n} from '@/registry/registry-ui-components/upload'\nimport { Download, Ellipsis, Folder, FolderOpen, FolderPlusIcon, Trash } from 'lucide-react'\nimport React from 'react'\nimport { toast } from 'sonner'\n\nexport default function Upload1Demo() {\n  return (\n    <>\n      <UploadAdvancedProvider>\n        <div className=\"flex flex-col w-full gap-1 p-2 rounded-md bg-muted/10 border-border border\">\n          <div className=\"space-x-2 flex items-center place-content-end w-full pb-1\">\n            <Separator\n              orientation=\"vertical\"\n              className=\"h-6\"\n            />\n            <UploadAdvancedButton />\n            <FolderButton />\n          </div>\n\n          <Separator />\n          <UploadAdnvacedContent />\n        </div>\n      </UploadAdvancedProvider>\n    </>\n  )\n}\n\nexport const UploadAdnvacedContent = () => {\n  const { selectedFolder, attachments } = useUploadAdvancedContext() ?? {}\n\n  return (\n    <ScrollArea>\n      <div className=\"flex items-center h-full pt-1 rounded-md\">\n        <div className=\"flex items-center h-full rounded-md\">\n          <UploadAttachmentsTreeItem attachments={attachments} />\n          <Separator\n            orientation=\"vertical\"\n            className=\"h-[400px]\"\n          />\n        </div>\n        {selectedFolder.length > 0 &&\n          selectedFolder.map((folderContent, idx) => {\n            return (\n              <div\n                key={idx}\n                className=\"flex items-center h-full rounded-md\"\n              >\n                <UploadAttachmentsTreeItem attachments={folderContent.content} />\n                {idx !== selectedFolder.length - 1 && (\n                  <Separator\n                    orientation=\"vertical\"\n                    className=\"h-[400px]\"\n                  />\n                )}\n              </div>\n            )\n          })}\n      </div>\n      <ScrollBar orientation=\"horizontal\" />\n    </ScrollArea>\n  )\n}\n\nexport type UploadAttachmentsTreeItemProps = {\n  attachments: (AttachmentType | FolderType)[]\n}\n\nexport const UploadAttachmentsTreeItem = ({ attachments }: UploadAttachmentsTreeItemProps) => {\n  const { selectedFolder, setSelectedFolder } = useUploadAdvancedContext()\n\n  return attachments?.length > 0 ? (\n    <ScrollArea className=\"h-[400px] rounded-md w-[190px] p-2\">\n      <div className=\"flex flex-col gap-1\">\n        {attachments?.map(attachment => {\n          if ((attachment as AttachmentType).file) {\n            return <UploadAttachmentFile attachmentFile={attachment as AttachmentType} />\n          }\n          if ((attachment as FolderType).files) {\n            return (\n              <UploadAttachmentFolder\n                attachmentFolder={attachment as FolderType}\n                selected={selectedFolder}\n                setSelected={setSelectedFolder}\n              />\n            )\n          }\n        })}\n      </div>\n    </ScrollArea>\n  ) : (\n    <div className=\"border border-border bg-muted/10 flex items-center w-[180px] min-h-[400px] p-4 rounded-md\">\n      <p className=\"text-center w-full text-xs\">There's no files.</p>\n    </div>\n  )\n}\n\nexport const UploadAttachmentFolder = ({\n  attachmentFolder,\n  selected,\n  setSelected,\n}: {\n  attachmentFolder: FolderType\n  selected: SelectedFolderType[]\n  setSelected: React.Dispatch<React.SetStateAction<SelectedFolderType[]>>\n}) => {\n  const exist_in_tree = selected?.some(item => item.id === attachmentFolder.id)\n\n  return (\n    <div\n      className={cn(\n        'relative bg-card-foreground/5 rounded-md overflow-hidden w-full flex items-center justify-start gap-1 p-2 hover:bg-card-foreground/15 transition-all cursor-pointer [&_*]:select-none',\n        exist_in_tree && 'bg-card-foreground/15'\n      )}\n      onClick={() => {\n        setSelected(old => {\n          if (exist_in_tree) {\n            return old.filter(item => {\n              return item.treeLevel < attachmentFolder.treeLevel\n            })\n          } else {\n            return [...old, attachmentFolder]\n          }\n        })\n      }}\n    >\n      <div className=\"relative [&_svg]:size-4\">\n        {exist_in_tree ? <FolderOpen /> : <Folder className={cn(attachmentFolder.files > 0 && 'fill-white')} />}\n      </div>\n      <h6 className=\"text-xs font-medium truncate max-w-[70%]\">{attachmentFolder.name} </h6>\n      <DropdownMenuView\n        trigger={{\n          icon: { children: Ellipsis, className: 'h-4 w-4 rounded' },\n          variant: 'ghost',\n          size: 'icon',\n          className: 'h-4 w-6 absolute top-1/2 right-2 -translate-y-1/2',\n        }}\n        content={{\n          options: {\n            itemType: 'label',\n            optionsData: [\n              {\n                children: 'Delete',\n                className: 'text-red-500 bg-red-500/10',\n                icon: { children: Trash, className: 'h-4 w-4 rounded' },\n                onClick: () => {},\n              },\n            ],\n          },\n        }}\n      />\n    </div>\n  )\n}\n\nexport const UploadAttachmentFile = ({ attachmentFile }: { attachmentFile: AttachmentType }) => {\n  const fileType = getFileType(attachmentFile.file)\n  return (\n    <div\n      className={cn(\n        'relative bg-card-foreground/5 rounded-md overflow-hidden w-full flex items-center justify-start gap-1 p-2 hover:bg-card-foreground/15 transition-all cursor-pointer'\n      )}\n      onClick={() => {}}\n    >\n      <div className=\"relative [&_svg]:size-4\">{fileTypeIcons[fileType]}</div>\n      <h6 className=\"text-xs font-medium truncate max-w-[70%]\">{attachmentFile.name} </h6>\n      <DropdownMenuView\n        trigger={{\n          icon: { children: Ellipsis, className: 'h-4 w-4 rounded' },\n          variant: 'ghost',\n          size: 'icon',\n          className: 'h-4 w-6 absolute top-1/2 right-2 -translate-y-1/2',\n        }}\n        content={{\n          options: {\n            itemType: 'label',\n            optionsData: [\n              {\n                children: 'Download',\n                icon: { children: Download, className: 'h-4 w-4 rounded' },\n                onClick: () => {\n                  downloadAttachment({ attachment: attachmentFile! })\n                },\n              },\n              {\n                children: 'Delete',\n                className: 'text-red-500 bg-red-500/10',\n                icon: { children: Trash, className: 'h-4 w-4 rounded' },\n                onClick: () => {},\n              },\n            ],\n          },\n        }}\n      />\n    </div>\n  )\n}\n\nexport const FolderButton = () => {\n  return (\n    <div>\n      <Button\n        className=\"relative h-[35px]\"\n        // variant={'outline'}\n        size={'sm'}\n        onClick={() => {\n          toast.info('Folder generated!')\n        }}\n        icon={{\n          children: FolderPlusIcon,\n        }}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}