{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot",
    "Command",
    "Tooltip"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import React from 'react'\n\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\nimport { Slot } from '@radix-ui/react-slot'\nimport { Tooltip, TooltipContent, TooltipTrigger } from './tooltip'\nimport { Badge } from './badge'\nimport { CommandShortcut } from './command'\n\nimport { cn } from '@/lib'\nimport { cva } from 'class-variance-authority'\nimport { VariantProps } from 'class-variance-authority'\nimport { Loader, LucideIcon } from 'lucide-react'\nimport { IconProps } from '@radix-ui/react-icons/dist/types'\nimport { useDuckShortcut } from '@ahmedayob/duck-shortcut'\n\nexport type IconType = { children: LucideIcon } & Omit<IconProps, 'children'> &\n  Omit<React.RefAttributes<SVGSVGElement>, 'children'>\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isCollapsed?: boolean\n  icon?: IconType\n  title?: string\n  secondIcon?: IconType\n  label?: LabelType\n  route?: string\n  command?: CommandType\n  delayDuration?: number\n  loading?: boolean\n}\n\nexport interface LabelType extends Partial<React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>> {\n  showCommand?: boolean\n  showLabel?: boolean\n  type?: 'notification' | 'default'\n}\n\nexport type CommandType = {\n  label?: string\n  key: string\n  state?: unknown\n  action?: <T>(arg?: T) => void\n}\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n        nothing: '',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10 p-0',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isCollapsed = false,\n      size = 'default',\n      variant = 'default',\n      title,\n      className,\n      label,\n      children,\n      icon,\n      secondIcon,\n      delayDuration = 0,\n      loading = false,\n      command,\n      ...props\n    }: ButtonProps,\n    ref: React.ForwardedRef<HTMLButtonElement> | undefined\n  ) => {\n    const {\n      className: labelClassName,\n      type = 'default',\n      children: labelChildren,\n      side,\n      showLabel,\n      showCommand,\n      ...labelProps\n    } = label || {}\n    const Component = asChild ? Slot : 'button'\n    const { children: Icon, className: iconClassName, ...iconProps } = icon ?? {}\n    const { children: SecondIcon, className: secondIconClassName, ...secondIconProps } = secondIcon ?? {}\n\n    const fn = () => console.log('NOTE: handling command shortcut without action')\n    //NOTE: handling command shortcut\n    useDuckShortcut(\n      {\n        keys: [command?.key ?? 'k'],\n        onKeysPressed: command?.action ?? fn,\n      },\n      [command?.state]\n    )\n\n    // Handle keyboard shortcut Badge\n    const CommandComponent = () => (\n      <CommandShortcut className=\"text-[.8rem]\">\n        <Badge\n          variant={'secondary'}\n          size={'sm'}\n          className=\"p-0 px-2\"\n        >\n          {command?.label}\n        </Badge>\n      </CommandShortcut>\n    )\n\n    return (\n      <Tooltip delayDuration={delayDuration}>\n        <TooltipTrigger asChild>\n          <Component\n            ref={ref}\n            className={cn(\n              buttonVariants({\n                variant: variant || 'ghost',\n                size: size ? (isCollapsed ? 'icon' : size) : isCollapsed ? 'icon' : 'default',\n                className: cn(!isCollapsed && 'flex items-center gap-2', 'relative justify-center', className),\n              })\n            )}\n            disabled={loading}\n            {...props}\n          >\n            <div className=\"flex items-center gap-2\">\n              {!loading ? (\n                Icon && (\n                  <span className=\"[&_svg]:size-[1.18rem]\">\n                    {!!icon && !loading && (\n                      <Icon\n                        className={iconClassName}\n                        {...iconProps}\n                      />\n                    )}\n                  </span>\n                )\n              ) : (\n                <Loader className=\"size-[1.18rem] animate-spin\" />\n              )}\n              {!isCollapsed && (children || title)}\n            </div>\n            {!isCollapsed && command?.label && !showCommand && <CommandComponent />}\n\n            {!isCollapsed &&\n              label &&\n              !showLabel &&\n              (type == 'default' ? (\n                <span\n                  className={cn('ml-2 text-[.9rem]', labelClassName)}\n                  {...labelProps}\n                >\n                  {labelChildren}\n                </span>\n              ) : (\n                <Badge\n                  variant={'outline'}\n                  size={'icon'}\n                  className={cn('size-5 text-[.6rem] absolute top-0 right-0', labelClassName)}\n                  {...labelProps}\n                >\n                  {labelChildren}\n                </Badge>\n              ))}\n            {!isCollapsed && !loading && SecondIcon && (\n              <SecondIcon\n                className={secondIconClassName}\n                {...secondIconProps}\n              />\n            )}\n          </Component>\n        </TooltipTrigger>\n        {(isCollapsed || showLabel) && (title || label) && (\n          <TooltipContent\n            {...labelProps}\n            className={cn('flex items-center gap-2 z-50 justify-start', labelClassName)}\n            side={side || 'right'}\n          >\n            {title && title}\n            {command?.label && showCommand && <CommandComponent />}\n            {showLabel && (\n              <span className={cn('ml-auto text-[.9rem]', !showLabel && 'text-muted-foreground')}>{labelChildren}</span>\n            )}\n          </TooltipContent>\n        )}\n      </Tooltip>\n    )\n  }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n"
    }
  ],
  "type": "components:ui"
}