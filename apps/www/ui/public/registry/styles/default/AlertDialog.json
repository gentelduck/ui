{
  "name": "AlertDialog",
  "dependencies": [
    "@radix-ui/react-alert-dialog"
  ],
  "files": [
    {
      "name": "AlertDialog.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\n\nimport { cn } from '@/lib/utils'\nimport {\n  buttonVariants,\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/registry/default/ui/'\n\n//NOTE: Alert Dialog Primitive\nconst AlertDialog = AlertDialogPrimitive.Root\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\n//NOTE: Alert Dialog Overlay\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\n//NOTE: Alert Dialog Content\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\n//NOTE: Alert Dialog Header\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = 'AlertDialogHeader'\n\n//NOTE: Alert Dialog Footer\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = 'AlertDialogFooter'\n\n//NOTE: Alert Dialog Title\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold', className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\n//NOTE: Alert Dialog Description\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName\n\n//NOTE: Alert Dialog Action\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\n//NOTE: Alert Dialog Cancel\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\n//NOTE: Alert Dialog Drawer\ninterface AlertDialogDrawerContentType extends Partial<React.ComponentPropsWithoutRef<typeof DrawerContent>> {}\ninterface AlertDialogDrawerTriggerentType extends Partial<React.ComponentPropsWithoutRef<typeof DrawerTrigger>> {}\ninterface StateType {\n  drawer: boolean\n  alert: boolean\n}\ninterface AlertDialogDrawerDataType<T> {\n  data: T[]\n  setData: React.Dispatch<React.SetStateAction<T[]>>\n}\ninterface AlertDialogDrawerActionsType {\n  cancel: () => void\n  continue: () => void\n}\n\ninterface AlertDialogDrawerHeaderType extends Partial<React.ComponentPropsWithoutRef<typeof DrawerHeader>> {\n  head: React.ReactNode\n  description: React.ReactNode\n}\n\ninterface AlertDialogDrawerFooterType extends Partial<React.ComponentPropsWithoutRef<typeof DrawerFooter>> {\n  cancel: React.ReactNode\n  submit: React.ReactNode\n}\ninterface AlertDialogCustomProps<T, C> {\n  type: 'drawer' | 'dialog' | 'sheet'\n  state: C\n  header: AlertDialogDrawerHeaderType\n  footer: AlertDialogDrawerFooterType\n  trigger: AlertDialogDrawerTriggerentType\n  content: AlertDialogDrawerContentType\n  drawerData: AlertDialogDrawerDataType<T>\n  actions?: AlertDialogDrawerActionsType\n}\n\nconst AlertDialogCustom = <T, C>({\n  type,\n  trigger,\n  header,\n  footer,\n  content,\n  drawerData,\n  actions,\n  state,\n}: AlertDialogCustomProps<T, C>) => {\n  const {\n    state: changeState,\n    handleDrawerOpenChange,\n    triggerClassName,\n    cancel,\n    submit,\n    description,\n    title,\n    footerProps,\n    headerProps,\n    contentProps,\n    triggerProps,\n    footerChildren,\n    headerChildren,\n    contentChildren,\n    footerClassName,\n    headerClassName,\n    triggerChildren,\n    contentClassName,\n    handleAlertCancel,\n    handleAlertContinue,\n    Component,\n    ComponentTrigger,\n    ComponentClose,\n    ComponentTitle,\n    ComponentFooter,\n    ComponentHeader,\n    ComponentContent,\n    ComponentDescription,\n  } = useAlertCustom({ trigger, header, footer, content, drawerData, actions, state, type })\n\n  return (\n    <>\n      <AlertDialog open={changeState.alert}>\n        <Component\n          open={changeState.drawer}\n          onOpenChange={handleDrawerOpenChange}\n        >\n          <ComponentTrigger\n            asChild\n            className={cn('', triggerClassName)}\n            {...triggerProps}\n          >\n            {triggerChildren}\n          </ComponentTrigger>\n          <ComponentContent\n            className={cn('', contentClassName)}\n            {...contentProps}\n          >\n            <div>\n              {header && (\n                <ComponentHeader\n                  className={cn('', headerClassName)}\n                  {...headerProps}\n                >\n                  {headerChildren ? (\n                    headerChildren\n                  ) : (\n                    <>\n                      <ComponentTitle>{title}</ComponentTitle>\n                      <ComponentDescription>{description}</ComponentDescription>\n                    </>\n                  )}\n                </ComponentHeader>\n              )}\n              {contentChildren}\n              {footer &&\n                (footerChildren ? (\n                  footerChildren\n                ) : (\n                  <ComponentFooter\n                    className={cn('', footerClassName)}\n                    {...footerProps}\n                  >\n                    {submit}\n                    <ComponentClose asChild>{cancel}</ComponentClose>\n                  </ComponentFooter>\n                ))}\n            </div>\n          </ComponentContent>\n        </Component>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action will consider these replies as Drafts, you can delete, adjust and send from Drafts section on\n              the side header.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={handleAlertCancel}>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleAlertContinue}>Continue</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  )\n}\n\nAlertDialogCustom.displayName = 'AlertDialogDrawer'\n\n//NOTE: Alert Dialog Custom Hook\nconst useAlertCustom = <T, C>({\n  trigger,\n  header,\n  footer,\n  content,\n  drawerData,\n  actions,\n  state: changeState,\n  type,\n}: AlertDialogCustomProps<T, C>) => {\n  const { className: triggerClassName, children: triggerChildren, ...triggerProps } = trigger\n  const { className: contentClassName, children: contentChildren, ...contentProps } = content\n  const { className: footerClassName, children: footerChildren, submit, cancel, ...footerProps } = footer\n  const { className: headerClassName, children: headerChildren, description, head: title, ...headerProps } = header\n\n  const [state, setState] = React.useState<StateType>({ drawer: false, alert: false })\n  const changeStateRef = React.useRef<C | string>('')\n\n  React.useEffect(() => {\n    changeStateRef.current = changeState\n  }, [changeState])\n\n  const handleAlertCancel = React.useCallback(() => {\n    actions?.cancel()\n    setState(prevState => ({ ...prevState, alert: false, drawer: true }))\n  }, [])\n\n  const handleAlertContinue = React.useCallback(() => {\n    actions?.continue()\n    setState(prevState => ({ ...prevState, alert: false, drawer: false }))\n  }, [])\n\n  const handleDrawerOpenChange = React.useCallback(\n    (drawerState: boolean) => {\n      const threadsLength = drawerData.data.length > 0\n      const showAlert = !drawerState && threadsLength && changeStateRef.current !== changeState\n\n      setState(() => ({\n        alert: showAlert as boolean,\n        drawer: threadsLength ? drawerState : false,\n      }))\n    },\n    [drawerData.data.length]\n  )\n  const Component = type === 'drawer' ? Drawer : type === 'sheet' ? Sheet : type === 'dialog' ? Dialog : Drawer\n  const ComponentTrigger =\n    type === 'drawer'\n      ? DrawerTrigger\n      : type === 'sheet'\n        ? SheetTrigger\n        : type === 'dialog'\n          ? DialogTrigger\n          : DrawerTrigger\n  const ComponentContent =\n    type === 'drawer'\n      ? DrawerContent\n      : type === 'sheet'\n        ? SheetContent\n        : type === 'dialog'\n          ? DialogContent\n          : DrawerContent\n  const ComponentHeader =\n    type === 'drawer' ? DrawerHeader : type === 'sheet' ? SheetHeader : type === 'dialog' ? DialogHeader : DrawerHeader\n  const ComponentFooter =\n    type === 'drawer' ? DrawerFooter : type === 'sheet' ? SheetFooter : type === 'dialog' ? DialogFooter : DrawerFooter\n  const ComponentTitle =\n    type === 'drawer' ? DrawerTitle : type === 'sheet' ? SheetTitle : type === 'dialog' ? DialogTitle : DrawerTitle\n  const ComponentDescription =\n    type === 'drawer'\n      ? DrawerDescription\n      : type === 'sheet'\n        ? SheetDescription\n        : type === 'dialog'\n          ? DialogDescription\n          : DrawerDescription\n  const ComponentClose =\n    type === 'drawer' ? DrawerClose : type === 'sheet' ? SheetClose : type === 'dialog' ? DialogClose : DrawerClose\n\n  return {\n    handleAlertCancel,\n    handleAlertContinue,\n    handleDrawerOpenChange,\n    triggerClassName,\n    triggerChildren,\n    triggerProps,\n    contentClassName,\n    contentChildren,\n    contentProps,\n    footerClassName,\n    footerChildren,\n    footerProps,\n    headerClassName,\n    headerChildren,\n    headerProps,\n    title,\n    description,\n    submit,\n    cancel,\n    state,\n    setState,\n    Component,\n    ComponentTrigger,\n    ComponentContent,\n    ComponentHeader,\n    ComponentFooter,\n    ComponentTitle,\n    ComponentDescription,\n    ComponentClose,\n  }\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogCustom,\n}\n"
    }
  ],
  "type": "components:ui"
}