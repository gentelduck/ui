{
  "name": "combobox",
  "dependencies": [
    "command",
    "tooltip",
    "button"
  ],
  "files": [
    {
      "name": "combobox.tsx",
      "content": "'use client'\nimport React from 'react'\n\nimport { Button, CommandType } from './button'\nimport { Label } from './ShadcnUI/label'\nimport { Popover, PopoverContent, PopoverTrigger } from './popover'\nimport { Command, CommandInput, CommandListGroup, CommandListGroupDataType } from './command'\n\nimport { cn } from '@/lib'\nimport { ChevronsUpDown } from 'lucide-react'\nimport { Separator } from './ShadcnUI'\nimport { Badge } from './badge'\n\ninterface OnSelectType<T> {\n  value: T[]\n  setValue: React.Dispatch<React.SetStateAction<T[]>>\n}\n\ntype ComboboxProps<T extends keyof Record<string, unknown>, Y extends keyof Record<string, unknown>> = {\n  type: 'combobox' | 'listbox'\n  onSelect?: OnSelectType<Y>\n  wrapper?: React.HTMLProps<HTMLDivElement> & {}\n  title?: Partial<React.ComponentPropsWithoutRef<typeof Label>> & {}\n  trigger?: Partial<React.ComponentPropsWithoutRef<typeof Button> & { children?: T }>\n  content?: Partial<React.ComponentPropsWithoutRef<typeof PopoverContent>> & {\n    data: CommandListGroupDataType<Y>[]\n    showSearchInput?: boolean\n    groupheading?: string[]\n  }\n}\n\nconst Combobox = <T extends keyof Record<string, unknown> = string, Y extends keyof Record<string, unknown> = string>({\n  wrapper,\n  title,\n  trigger,\n  content,\n  onSelect,\n  type,\n}: ComboboxProps<T, Y>) => {\n  //NOTE: you can use state management lib instead of this local states to use it globally\n  const [open, setOpen] = React.useState(false)\n\n  const { className: wrapperClassName, ...wrapperProps } = wrapper ?? {}\n  const { className: titleClassName, children: titleChildren, ...titleProps } = title ?? {}\n  const { className: triggerClassName, children: triggerChildren, command, ...triggerProps } = trigger ?? {}\n  const {\n    className: contentClassName,\n    data,\n    showSearchInput,\n    children: contentChildren,\n    groupheading,\n    ...contentProps\n  } = content ?? {}\n\n  const filteredData = onSelect?.value?.filter(item => {\n    return data?.some(el => el.label === item)\n  })\n\n  return (\n    <>\n      <div\n        className={cn('', wrapperClassName)}\n        {...wrapperProps}\n      >\n        {title && (\n          <Label\n            htmlFor={titleClassName}\n            className={cn('', titleClassName)}\n            {...titleProps}\n          >\n            {titleChildren}\n          </Label>\n        )}\n        <Popover\n          open={open}\n          onOpenChange={setOpen}\n        >\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              disabled={false}\n              role=\"combobox\"\n              secondIcon={{\n                icon: ChevronsUpDown,\n                className: cn('ml-2 h-4 w-4 shrink-0 opacity-50 overflow-hidden', type === 'listbox' && 'hidden'),\n              }}\n              aria-expanded={open}\n              className={cn(\n                `justify-between`,\n                type === 'combobox' ? 'w-[200px] [&_div]:w-[81%]' : 'rounded-lg border-dashed py-1 px-2 h-8',\n                triggerClassName\n              )}\n              command={\n                {\n                  ...command,\n                  action: () => {\n                    setOpen(!open)\n                    // return false\n                  },\n                  state: open,\n                } as CommandType\n              }\n              {...triggerProps}\n            >\n              <span className=\"text-ellipsis overflow-hidden whitespace-nowrap\">\n                {type === 'combobox' ? (onSelect?.value[0] ?? triggerChildren) : triggerChildren}\n              </span>\n              {type === 'listbox' && filteredData?.length ? (\n                <Separator\n                  orientation=\"vertical\"\n                  className=\"h-4\"\n                />\n              ) : null}\n              {type === 'listbox' && (\n                <div className=\"flex items-center gap-1\">\n                  {filteredData?.length! < 3 ? (\n                    filteredData?.map((item, idx) => (\n                      <Badge\n                        key={idx}\n                        variant={'secondary'}\n                        className=\"rounded-md text-xs px-1 font-normal\"\n                      >\n                        {item}\n                      </Badge>\n                    ))\n                  ) : (\n                    <Badge\n                      variant={'secondary'}\n                      className=\"rounded-md text-xs px-1 font-normal\"\n                    >\n                      {filteredData?.length} Selected\n                    </Badge>\n                  )}\n                </div>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent\n            className={cn('w-[180px] p-0', contentClassName)}\n            id={titleClassName}\n            {...contentProps}\n          >\n            {contentChildren ? (\n              contentChildren\n            ) : (\n              <Command>\n                {showSearchInput && (\n                  <CommandInput\n                    className={cn(type === 'listbox' && 'p-2 h-fit')}\n                    placeholder={type === 'combobox' ? 'Search...' : 'Filter...'}\n                    required\n                  />\n                )}\n                <CommandListGroup\n                  type={type ?? 'combobox'}\n                  data={data ?? []}\n                  selected={onSelect?.value ?? []}\n                  groupheading={groupheading || []}\n                  checkabble={true}\n                  onSelect={{\n                    key: (value: string | undefined) => {\n                      onSelect?.setValue(\n                        type === 'combobox'\n                          ? [value as Y]\n                          : onSelect?.value.includes(value as Y)\n                            ? onSelect?.value.filter(i => i !== value)\n                            : [...onSelect?.value, value as Y]\n                      )\n                    },\n                    clear: () => {\n                      onSelect?.setValue(onSelect?.value.filter(item => !data?.map(item => item.label).includes(item)))\n                    },\n                  }}\n                />\n              </Command>\n            )}\n          </PopoverContent>\n        </Popover>\n      </div>\n    </>\n  )\n}\n\nCombobox.displayName = 'Combobox'\n\nexport { Combobox, type ComboboxProps as ComboboxType, type OnSelectType }\n"
    }
  ],
  "type": "components:ui"
}