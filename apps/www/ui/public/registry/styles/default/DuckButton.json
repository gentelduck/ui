{
  "name": "DuckButton",
  "dependencies": [
    "@radix-ui/react-slot",
    "@radix-ui/react-tooltip",
    "@radix-ui/react-dialog",
    "cmdk@1.0.0"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "name": "DuckButton.tsx",
      "content": "import React from 'react'\nimport { cn } from '@/lib'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva } from 'class-variance-authority'\nimport { VariantProps } from 'class-variance-authority'\nimport { Loader, LucideIcon } from 'lucide-react'\nimport { DuckTooltipContent, DuckTooltipTrigger } from './DuckTooltip'\nimport { DuckBadge } from './DuckBadge'\nimport { DuckCommandShortcut } from './DuckCommand'\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nexport interface DuckButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isCollapsed?: boolean\n  icon?: LucideIcon\n  label?: LabelType\n  command?: CommandType\n  delayDuration?: number\n  loading?: boolean\n}\n\nconst DuckTooltip = TooltipPrimitive.Root\nexport interface LabelType extends Partial<React.ElementRef<typeof TooltipPrimitive.Content>> {}\n\nexport type CommandType = {\n  label: string\n  key: string\n  state?: unknown\n  action?: <T>(arg?: T) => void\n}\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\nconst DuckButton = React.forwardRef<HTMLButtonElement, DuckButtonProps>(\n  (\n    {\n      asChild,\n      isCollapsed = false,\n      size = 'default',\n      variant = 'default',\n      title,\n      className,\n      label,\n      children,\n      icon: Icon,\n      delayDuration = 0,\n      loading = false,\n      command,\n      ...props\n    }: DuckButtonProps,\n    ref: React.ForwardedRef<HTMLButtonElement> | undefined\n  ) => {\n    const DuckComponent = asChild ? Slot : 'button'\n\n    // Handle keyboard shortcuts\n    React.useEffect(() => {\n      if (command?.key) {\n        const handleKeyDown = (e: KeyboardEvent) => {\n          if (e.key === command.key && (e.metaKey || e.ctrlKey)) {\n            e.preventDefault()\n            command.action && command.action()\n          }\n        }\n\n        document.addEventListener('keydown', handleKeyDown)\n        return () => document.removeEventListener('keydown', handleKeyDown)\n      }\n    }, [command])\n\n    return (\n      <DuckTooltip delayDuration={delayDuration}>\n        <DuckTooltipTrigger asChild>\n          <DuckComponent\n            ref={ref}\n            className={cn(\n              buttonVariants({\n                variant: variant || 'ghost',\n                size: size ? size : isCollapsed ? 'icon' : 'default',\n                className: cn(\n                  !isCollapsed && 'flex items-center gap-2 justify-start',\n                  !isCollapsed && size === 'icon' && 'px-4',\n                  !isCollapsed && label && 'justify-center',\n                  className\n                ),\n              })\n            )}\n            disabled={loading}\n            {...props}\n          >\n            {!loading ? (\n              <>{!!Icon && !loading && <Icon className=\"w-[1.15rem] h-[1.15rem]\" />}</>\n            ) : (\n              <Loader className=\"w-[1.15rem] h-[1.15rem] animate-spin\" />\n            )}\n            {!isCollapsed && (children || title) && <span className=\"text-[.9rem]\">{children || title}</span>}\n            {!isCollapsed && command && (\n              <DuckCommandShortcut className=\"text-[.8rem] mx-2\">{command.label}</DuckCommandShortcut>\n            )}\n            {!isCollapsed && label && (\n              <span className=\"ml-auto text-[.9rem]\">{label.children as unknown as React.ReactNode}</span>\n            )}\n          </DuckComponent>\n        </DuckTooltipTrigger>\n        {isCollapsed && (title || label) && (\n          <DuckTooltipContent\n            side=\"right\"\n            className=\"flex items-center gap-4 z-50 justify-start\"\n          >\n            {title}\n            {command && (\n              <DuckCommandShortcut className=\"text-[.8rem]\">\n                <DuckBadge className=\"p-0 px-2\">{command.label}</DuckBadge>\n              </DuckCommandShortcut>\n            )}\n            {label && (\n              <span className=\"ml-auto text-muted-foreground text-[.9rem]\">\n                {label.children as unknown as React.ReactNode}\n              </span>\n            )}\n          </DuckTooltipContent>\n        )}\n      </DuckTooltip>\n    )\n  }\n)\nDuckButton.displayName = 'DuckButton'\n\nexport { DuckButton, buttonVariants }\n"
    }
  ],
  "type": "components:ui"
}