{
  "name": "command",
  "dependencies": [
    "cmdk@1.0.0",
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "name": "command.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\n\nimport { type DialogProps } from '@radix-ui/react-dialog'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { Dialog, DialogContent } from './ShadcnUI/dialog'\nimport { ScrollArea } from './scroll-area'\n\nimport { Check, Search } from 'lucide-react'\nimport { cn, groupDataByNumbers } from '@/lib/utils'\nimport { Checkbox } from './checkbox'\nimport { Button } from './button'\nimport { Separator } from './ShadcnUI'\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div\n    className=\"flex items-center border-b px-3\"\n    cmdk-input-wrapper=\"\"\n  >\n    <Search className=\"h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 h-px bg-border', className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = 'CommandShortcut'\n\ninterface CommandListGroupDataType<T extends keyof Record<string, unknown> = string> {\n  label?: T\n  element?: ListItemElementType\n  onSelect?: OnSelectType\n}\n\ninterface OnSelectType {\n  key?: <T extends string>(arg?: T) => void\n  clear?: <T extends string>(arg?: T) => void\n}\n\ninterface ListItemElementType\n  extends Partial<\n    React.ComponentPropsWithoutRef<typeof CommandItem> & React.CustomComponentPropsWithRef<typeof Button>\n  > {}\n\ninterface CommandListGroupType {\n  type?: 'combobox' | 'listbox'\n  data: CommandListGroupDataType[]\n  group?: number[]\n  groupheading?: string[]\n  onSelect?: OnSelectType\n  selected: string[]\n  className?: string\n  checkabble?: boolean\n}\n\nconst CommandListGroup = React.forwardRef(\n  (\n    { data, onSelect, selected, group, groupheading, className, checkabble = false, type }: CommandListGroupType,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    const groupedData = groupDataByNumbers(data, group || [data.length])\n\n    return (\n      <>\n        <ScrollArea className={cn(className)}>\n          <CommandList\n            className={cn('overflow-hidden max-h-full', type === 'listbox' && '')}\n            ref={ref}\n          >\n            <CommandEmpty>No framework found.</CommandEmpty>\n            {groupedData.map((group, idx) => {\n              return (\n                <CommandGroup\n                  heading={groupheading?.[idx]}\n                  key={idx}\n                >\n                  {group.map((el, idx) => {\n                    const { children, className, icon, ...props } = el.element ?? {}\n                    const { className: iconClassName, icon: Icon, ...iconProps } = icon ?? {}\n\n                    return (\n                      <CommandItem\n                        key={idx}\n                        value={el.label}\n                        className={cn(\n                          'data-[disabled=true]:opacity-50',\n                          selected.includes((el?.label as string) ?? (el?.element?.children as string)) &&\n                            type === 'combobox' &&\n                            'bg-accent text-accent-foreground',\n                          className\n                        )}\n                        onSelect={onSelect?.key}\n                        {...(props as typeof CommandItem)}\n                      >\n                        {checkabble &&\n                          (type === 'combobox' ? (\n                            <Check\n                              className={cn(\n                                'mr-2 h-4 w-4',\n                                selected.includes((el?.label as string) ?? (el?.element?.children as string))\n                                  ? 'opacity-100'\n                                  : 'opacity-0'\n                              )}\n                            />\n                          ) : (\n                            <Checkbox\n                              checked={selected.includes((el?.label as string) ?? (el?.element?.children as string))}\n                              className={cn('mr-2 h-4 w-4  border-muted-foreground')}\n                            />\n                          ))}\n                        <span className=\"flex items-center gap-2\">\n                          {Icon && (\n                            <Icon\n                              className={cn(iconClassName)}\n                              {...iconProps}\n                            />\n                          )}\n                          {children ?? el?.label}\n                        </span>\n                        <CommandShortcut>{el.element?.label?.children}</CommandShortcut>\n                      </CommandItem>\n                    )\n                  })}\n                </CommandGroup>\n              )\n            })}\n          </CommandList>\n        </ScrollArea>\n        {selected.length > 0 && type === 'listbox' && (\n          <>\n            <Separator />\n            <Button\n              variant=\"ghost\"\n              size={'sm'}\n              className=\"justify-center m-1 w-auto py-2 text-xs\"\n              onClick={() => {\n                if (onSelect?.clear) {\n                  onSelect.clear()\n                }\n              }}\n            >\n              Clear Filter\n            </Button>\n          </>\n        )}\n      </>\n    )\n  }\n)\n\nCommandListGroup.displayName = 'CommandListGroup'\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n  CommandListGroup,\n  type CommandDialogProps,\n  type CommandListGroupDataType,\n  type ListItemElementType,\n  type CommandListGroupType,\n}\n"
    }
  ],
  "type": "components:ui"
}