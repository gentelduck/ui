{
  "name": "nav-group",
  "dependencies": [
    "button",
    "badge"
  ],
  "files": [
    {
      "name": "nav-group.tsx",
      "content": "'use client'\nimport * as React from 'react'\nimport { cn } from '@/lib'\nimport { Button, ButtonProps } from './button'\nimport { filteredObject, groupArrays } from '@/lib/utils'\nimport { Separator } from './ShadcnUI'\n\ntype NavGroupProps<T extends boolean> = {\n  navigationKeys: ButtonProps[]\n  nav: NavType<T>\n  position?: 'side' | 'top'\n}\n\ntype NavType<T extends boolean> = NavCollabsableType<T> & {\n  group: number[]\n  router: any //AppRouterInstance\n  pathname: string\n  className?: string\n}\n\ntype NavCollabsableType<K> = K extends true ? NavCollabsedType : NavNotCollabsedType\n\ninterface NavCollabsedType {\n  isCollabsed?: boolean\n}\n\ninterface NavNotCollabsedType {}\n\nconst NavGroup = <T extends boolean>({ navigationKeys, nav, position }: NavGroupProps<T>) => {\n  const grouped = groupArrays<ButtonProps>(nav.group, navigationKeys)\n  const navIsCollabsed = (nav as NavCollabsedType).isCollabsed\n  const filteredKeys = filteredObject(['group', 'router', 'location', 'isCollabsed'], nav)\n\n  const variants = {\n    default: position == 'side' ? 'grid items-center' : 'flex',\n  }\n\n  return (\n    <div\n      className={cn('h-full', nav.className)}\n      {...filteredKeys}\n    >\n      {\n        <div className={variants.default}>\n          {grouped.map((keyGroup, idx) => (\n            <React.Fragment key={idx}>\n              <ul className={cn(variants.default, 'px-2 py-1', navIsCollabsed ? 'w-fit' : 'w-full')}>\n                {keyGroup.map((key, idx) => {\n                  const { className, isCollapsed, onClick, variant, children, icon, ...props } = key\n                  return (\n                    <li\n                      key={idx}\n                      className=\"w-full\"\n                    >\n                      <Button\n                        key={idx}\n                        icon={key.icon}\n                        variant={\n                          nav.pathname === key.route ? 'secondary' : position === 'top' ? 'ghost' : variant || 'ghost'\n                        }\n                        isCollapsed={navIsCollabsed ? navIsCollabsed : false}\n                        className={cn(\n                          !navIsCollabsed && 'w-full justify-between',\n                          position === 'top' && 'rounded-full',\n                          key.className\n                        )}\n                        {...props}\n                      >\n                        {children}\n                      </Button>\n                    </li>\n                  )\n                })}\n              </ul>\n              {idx !== grouped.length - 1 && position === 'side' && <Separator className=\"my-1\" />}\n            </React.Fragment>\n          ))}\n        </div>\n      }\n    </div>\n  )\n}\n\nNavGroup.displayName = 'NavGroup'\n\nexport {\n  NavGroup,\n  type NavGroupProps,\n  type NavType,\n  type NavCollabsableType,\n  type NavCollabsedType,\n  type NavNotCollabsedType,\n}\n"
    }
  ],
  "type": "components:ui"
}