#!/usr/bin/env node
import{Command as dt}from"commander";var c={name:"duck-ui",description:"This is the main file of the duck-ui CLI application written with TypeScript",version:"1.0.0"},l="https://duckui.vercel.app/registry";import{Command as L}from"commander";var x={name:"init",description:"init the project",options:{option_1:{flags:"-y, --yes",description:"skip confirmation prompt.",defaultValue:!1},option_2:{flags:"-d, --defaults,",description:"use default configuration.",defaultValue:!1},option_3:{flags:"-c, --cwd <cwd>",description:"the working directory. defaults to the current directory.",defaultValue:process.cwd()},option_4:{flags:"-s, --silent",description:"silent mode",defaultValue:!1},option_5:{flags:"-f, --force",description:"will force and overwrite old configurations.",defaultValue:!1},option_6:{flags:"-sd, --src-dir <src-dir>",description:"the source directory. defaults to the current directory.",defaultValue:process.cwd()}}};import N from"path";import{z as s}from"zod";var h=s.object({yes:s.boolean().default(!1),defaults:s.boolean().default(!1),cwd:s.string().default(process.cwd()),slint:s.boolean().default(!1),force:s.boolean().default(!1),srcDir:s.string().default(process.cwd())});async function w(t){let o=h.parse(t),E=N.resolve(o.cwd),v=$("button");console.log(v)}function O(t){try{return new URL(t),!0}catch{return!1}}function $(t){if(O(t)){let o=new URL(t);return o.pathname.match(/\/chat\/b\//)&&!o.pathname.endsWith("/json")&&(o.pathname=`${o.pathname}/json`),o.toString()}return`${l}/${t}`}var{name:J,description:U,options:D}=x,{option_1:f,option_2:m,option_3:g,option_4:u,option_5:d,option_6:_}=D;function j(){let t=new L(J);return t.description(U).option(f.flags,f.description,f.defaultValue).option(m.flags,m.description,m.defaultValue).option(g.flags,g.description,g.defaultValue).option(u.flags,u.description,u.defaultValue).option(d.flags,d.description,d.defaultValue).option(_.flags,_.description,_.defaultValue).action(w),t}var p=["**/node_modules","**/.git","**/dist","**/.next","**/build","**/coverage","**/public"];import Xt from"fs-extra";import qt from"fast-glob";import i from"kleur";import V from"log-symbols";var{error:A,warning:M,info:W,success:F}=V,r={error:({with_icon:t=!0,args:o})=>(console.log(i.red([t?A:"","ERROR:"].join(" ")),i.red(o.join(" "))),r),warn:({with_icon:t=!0,args:o})=>(console.log(i.yellow([t?M:"","WARN:"].join(" ")),i.yellow(o.join(" "))),r),info:({with_icon:t=!0,args:o})=>(console.log(i.green([t?W:"","INFO:"].join(" ")),i.green(o.join(" "))),r),success:({args:t,with_icon:o})=>(console.log(i.green([o?F:"","SUCCESS:"].join(" ")),i.green(t.join(" "))),r),break:()=>(console.log(""),r)};import{cyan as G,green as z,red as Y,yellow as K,bgRed as X,bgYellow as B,bgGreen as q,bgCyan as H}from"kleur/colors";var n={error:Y,bg_error:X,warn:K,bg_warn:B,success:z,bg_success:q,info:G,bg_info:H};import{createMatchPath as oe}from"tsconfig-paths";import Q from"fast-glob";import Z from"fs-extra";import tt from"path";import{loadConfig as fe}from"tsconfig-paths";function b(){if(!Q.sync(["package.json"],{cwd:process.cwd(),deep:1,ignore:p}).length)return r.error({args:["package.json not found"]}),process.exit(1);let o=tt.join(process.cwd(),"package.json");return JSON.parse(Z.readFileSync(o,"utf8"))}import Jo from"chalk";import Do from"fs-extra";import{loadConfig as Ao}from"tsconfig-paths";import{cosmiconfig as et}from"cosmiconfig";var ot=et("duck-ui",{searchPlaces:["duck-ui.config.js","duck-ui.config.ts"]});import{z as e}from"zod";var T=e.object({$schema:e.string().optional(),style:e.string(),rsc:e.coerce.boolean().default(!1),tsx:e.coerce.boolean().default(!0),tailwind:e.object({config:e.string(),css:e.string(),baseColor:e.string(),cssVariables:e.boolean().default(!0),prefix:e.string().default("").optional()}),aliases:e.object({components:e.string(),hooks:e.string().optional(),pages:e.string().optional(),utils:e.string(),lib:e.string().optional(),ui:e.string().optional()})}).strict(),rt=T.extend({resolvedPaths:e.object({tailwindConfig:e.string(),tailwindCss:e.string(),utils:e.string(),components:e.string(),ui:e.string()})});import be from"fast-glob";var y=(a=>(a.NEXT_JS="Next.js",a.VITE="Vite",a.CREATE_REACT_APP="Create React App",a.UNKNOWN="Unknown",a))(y||{});import{z as it}from"zod";function k(t){return Object.values(t)}var nt=k(y),De=it.enum([...nt]);import wo from"prompts";import ao from"fs-extra";import Ke from"ora";import{detect as He}from"@antfu/ni";import{execa as mo}from"execa";var st=[{type:"confirm",name:"typescript",message:`Would you like to install ${n.info("TypeScript")} (recommended)`,initial:!1,active:"yes",inactive:"no"}];import{z as S}from"zod";var pt=S.object({typescript:S.boolean({message:"You have to pick one option",description:"Would you like to use TypeScript? (yes/no) -default: no"}).default(!1)});import{z as R}from"zod";var ft=R.string().min(1,"Path must be a non-empty string"),mt=R.string().refine(t=>/\/chat\/b\//.test(t),{message:"The URL must contain /chat/b/ in the pathname"});import vr from"prompts";var gt=[{type:"confirm",name:"tailwind",message:`Would you like to install ${n.info("TailwindCSS")}`,initial:!1,active:"yes",inactive:"no"}];import{z as I}from"zod";var ut=I.object({tailwind:I.boolean({message:"You have to pick one option",description:"Would you like to use TailwindCSS? (yes/no) -default: no"}).default(!1)});import{execa as _r}from"execa";import br from"fs-extra";function P(){let t=new dt,o=b();t.name(o?.name||c.name),t.description(o?.description||c.description),t.version(o?.version||c.version),t.addCommand(j()),t.parse()}process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));P();
//# sourceMappingURL=index.js.map