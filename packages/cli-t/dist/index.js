#!/usr/bin/env node
import{Command as yt}from"commander";var f={name:"duck-ui",description:"This is the main file of the duck-ui CLI application written with TypeScript",version:"1.0.0"};import{Command as _t}from"commander";var C={name:"init",description:"init the project",options:{option_1:{flags:"-y, --yes",description:"skip confirmation prompt.",defaultValue:!1},option_2:{flags:"-d, --defaults,",description:"use default configuration.",defaultValue:!1},option_3:{flags:"-c, --cwd <cwd>",description:"the working directory. defaults to the current directory.",defaultValue:process.cwd()},option_4:{flags:"-s, --silent",description:"silent mode",defaultValue:!1},option_5:{flags:"-f, --force",description:"will force and overwrite old configurations.",defaultValue:!1},option_6:{flags:"-sd, --src-dir <src-dir>",description:"the source directory. defaults to the current directory.",defaultValue:process.cwd()}}};import gt from"path";import{z as a}from"zod";var T=a.object({yes:a.boolean().default(!1),defaults:a.boolean().default(!1),cwd:a.string().default(process.cwd()),slint:a.boolean().default(!1),force:a.boolean().default(!1),srcDir:a.string().default(process.cwd())});var l=["**/node_modules","**/.git","**/dist","**/.next","**/build","**/coverage","**/public"],R={info:"You need to install TailwindCss:"};import $t from"fs-extra";import ot from"fast-glob";import s from"kleur";import F from"log-symbols";var{error:B,warning:K,info:X,success:q}=F,c={error(...t){return console.log(s.red([B,"ERROR:"].join("")),s.red(t.join(" "))),this},warn(...t){return console.log(s.yellow([K,"WARN:"].join("")),s.yellow(t.join(" "))),this},info(...t){return console.log(s.green([X,"INFO:"].join("")),s.green(t.join(" "))),this},success(...t){return console.log(s.green([q,"SUCCESS:"].join("")),s.green(t.join(" "))),this},break(){return console.log(""),this}};import{cyan as H,green as Q,red as Z,yellow as tt}from"kleur/colors";var p={error:Z,warn:tt,success:Q,info:H};async function S(t){let o=ot.globSync("tailwind.config.*",{cwd:t,deep:3,ignore:l});return o.length?(console.log(o),!0):!1}import{createMatchPath as Mt}from"tsconfig-paths";import Xt from"fast-glob";import et from"fs-extra";import nt from"path";import{loadConfig as to}from"tsconfig-paths";function I(){let t=nt.join("package.json");return JSON.parse(et.readFileSync(t,"utf8"))}import{loadConfig as $o}from"tsconfig-paths";import{cosmiconfig as it}from"cosmiconfig";var rt=it("duck-ui",{searchPlaces:["duck-ui.config.js","duck-ui.config.ts"]});import{z as e}from"zod";var E=e.object({$schema:e.string().optional(),style:e.string(),rsc:e.coerce.boolean().default(!1),tsx:e.coerce.boolean().default(!0),tailwind:e.object({config:e.string(),css:e.string(),baseColor:e.string(),cssVariables:e.boolean().default(!0),prefix:e.string().default("").optional()}),aliases:e.object({components:e.string(),hooks:e.string().optional(),pages:e.string().optional(),utils:e.string(),lib:e.string().optional(),ui:e.string().optional()})}).strict(),st=E.extend({resolvedPaths:e.object({tailwindConfig:e.string(),tailwindCss:e.string(),utils:e.string(),components:e.string(),ui:e.string()})});import at from"fast-glob";var v={type:"NEXT_JS",detect:async t=>!!(await at.glob("**/*",{cwd:t,deep:3,ignore:l})).find(r=>r.includes("next.config"))};var d=(i=>(i.NEXT_JS="Next.js",i.VITE="Vite",i.CREATE_REACT_APP="Create React App",i.UNKNOWN="Unknown",i))(d||{}),P=[v];async function g(t){for(let o of P)if(await o.detect(t))return o.type;return"UNKNOWN"}import{z as ct}from"zod";function O(t){return Object.values(t)}var pt=O(d),Co=ct.enum([...pt]);import{z as N}from"zod";var lt=N.string().min(1,"Path must be a non-empty string"),ft=N.string().refine(t=>/\/chat\/b\//.test(t),{message:"The URL must contain /chat/b/ in the pathname"});import dt from"prompts";var V=[{type:"confirm",name:"tailwind",message:`Would you like to use ${p.info("TailwindCSS")}`,initial:!1,active:"yes",inactive:"no"}],D=["tailwindcss","postcss","autoprefixer"],U=["tailwindcss","init","-p"];import{z as $}from"zod";var G=$.object({tailwind:$.boolean({message:"You have to pick one option",description:"Would you like to use TailwindCSS? (yes/no) -default: no"}).default(!1)});import mt from"ora";function m(t,o){return mt({color:"yellow",text:t,isSilent:o?.silent})}import{execa as J}from"execa";import{detect as ut}from"@antfu/ni";async function _(t){let o=await ut({programmatic:!0,cwd:t});return o==="yarn@berry"?"yarn":o==="pnpm@6"?"pnpm":o||"npm"}async function A(t,o){let n=o??await _(t);return n==="pnpm"?"pnpm dlx":n==="bun"?"bunx":"npx"}async function L(t,o){let n=m(p.info("Installing TailwindCSS...")).start(),r=await _(t),{failed:i}=await J(r,[r!=="npm"?"install":"add",...D],{cwd:t,shell:!0});if(i)return n.fail();let u=await A(t,r),{failed:j}=await J(u,[...U],{cwd:t,shell:!0});if(j)return n.fail();c.break(),n.succeed()}async function z(t){let o=m(`Checking if TailwindCSS is installed...
`)?.start();if(await S(t))return o.stopAndPersist({text:p.success("TailwindCSS is installed!")}),o?.succeed(),null;o?.fail(),c.info(...Object.values(R)).break();let r=await dt(V),{tailwind:i}=G.parse(r);if(!i)return null;let u=await g(t),j=await L(t,u);return i}async function W(t){let o=T.parse(t),n=gt.resolve(o.cwd),r=await z(n)}var{name:xt,description:wt,options:ht}=C,{option_1:x,option_2:w,option_3:h,option_4:y,option_5:k,option_6:b}=ht;function M(){let t=new _t(xt);return t.description(wt).option(x.flags,x.description,x.defaultValue).option(w.flags,w.description,w.defaultValue).option(h.flags,h.description,h.defaultValue).option(y.flags,y.description,y.defaultValue).option(k.flags,k.description,k.defaultValue).option(b.flags,b.description,b.defaultValue).action(W),t}function Y(){let t=new yt,o=I();t.name(o.name||f.name),t.description(o.description||f.description),t.version(o.version||f.version),t.addCommand(M()),t.parse()}process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));Y();
//# sourceMappingURL=index.js.map