{"version":3,"sources":["../src/main/main.ts","../src/main/main.constants.ts","../src/commands/init/init.ts","../src/commands/init/init.constants.ts","../src/commands/init/init.lib.ts","../src/commands/init/init.dto.ts","../src/utils/get-project-info/get-project-info.constants.ts","../src/utils/checkers/checkers.ts","../src/utils/text-styling/logger.ts","../src/utils/text-styling/highlighter.ts","../src/utils/resolve-import/resolve-import.ts","../src/utils/get-project-info/get-project-info.ts","../src/utils/get-project-config/get-project-config.ts","../src/utils/get-project-config/get-project-config.constants.ts","../src/utils/get-project-config/get-project-config.dto.ts","../src/utils/get-project-type/get-project-type.lib.ts","../src/utils/get-project-type/get-project-type.constants.ts","../src/utils/get-project-type/get-project-type.ts","../src/utils/get-project-type/get-project-type.dto.ts","../src/utils/transformers/transformers.ts","../src/utils/url-mutating/url-mutating.dto.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.constants.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.dto.ts","../src/utils/spinner.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.lib.ts","../src/utils/get-package-manager/get-package-manager.ts","../src/index.ts"],"sourcesContent":["import { Command } from 'commander'\nimport { config } from './main.constants'\nimport { init_command } from '../commands/init'\nimport { getPackageJson } from '../utils'\n\nexport function init() {\n  const duck_ui = new Command()\n  const packageJson = getPackageJson()\n\n  duck_ui.name(packageJson.name || config.name)\n  duck_ui.description(packageJson.description || config.description)\n  duck_ui.version(packageJson.version || config.version)\n  duck_ui.addCommand(init_command())\n\n  duck_ui.parse()\n}\n","export const config = {\n  name: 'duck-ui',\n  description:\n    'This is the main file of the duck-ui CLI application written with TypeScript',\n  version: '1.0.0'\n}\n\nexport const REGISTRY_URL = 'https://duckui.vercel.app/registry'\n","import { Command } from 'commander'\nimport { init_command_config } from './init.constants'\nimport { init_command_action } from './init.lib'\n\nconst { name, description, options } = init_command_config\nconst { option_1, option_2, option_3, option_4, option_5, option_6 } = options\n\nexport function init_command(): Command {\n  const init_command = new Command(name)\n\n  init_command\n    .description(description)\n    .option(option_1.flags, option_1.description, option_1.defaultValue)\n    .option(option_2.flags, option_2.description, option_2.defaultValue)\n    .option(option_3.flags, option_3.description, option_3.defaultValue)\n    .option(option_4.flags, option_4.description, option_4.defaultValue)\n    .option(option_5.flags, option_5.description, option_5.defaultValue)\n    .option(option_6.flags, option_6.description, option_6.defaultValue)\n    .action(init_command_action)\n\n  return init_command\n}\n","import { InitCommandConfig } from './init.types'\n\nexport const init_command_config: InitCommandConfig = {\n  name: 'init',\n  description: 'init the project',\n  options: {\n    option_1: {\n      flags: '-y, --yes',\n      description: 'skip confirmation prompt.',\n      defaultValue: false\n    },\n    option_2: {\n      flags: '-d, --defaults,',\n      description: 'use default configuration.',\n      defaultValue: false\n    },\n    option_3: {\n      flags: '-c, --cwd <cwd>',\n      description: 'the working directory. defaults to the current directory.',\n      defaultValue: process.cwd()\n    },\n    option_4: {\n      flags: '-s, --silent',\n      description: 'silent mode',\n      defaultValue: false\n    },\n    option_5: {\n      flags: '-f, --force',\n      description: 'will force and overwrite old configurations.',\n      defaultValue: false\n    },\n    option_6: {\n      flags: '-sd, --src-dir <src-dir>',\n      description: 'the source directory. defaults to the current directory.',\n      defaultValue: process.cwd()\n    }\n  }\n}\n","import path from 'path'\nimport { init_options_schema, InitOptions } from './init.dto'\nimport {\n  checkTailwindCssInstalled,\n  checkTypeScriptInstalled,\n  get_project_config,\n  get_project_type,\n  pref_light_tailwindcss\n} from '@/src/utils'\nimport { spinner } from '@/src/utils/spinner'\nimport { REGISTRY_URL } from '@/src/main'\n\nexport async function init_command_action(opt: InitOptions) {\n  const options = init_options_schema.parse(opt)\n  const cwd = path.resolve(options.cwd)\n\n  const tailwind = await pref_light_tailwindcss(cwd)\n\n  // const config = await get_project_config(cwd)\n\n  // console.log(config)\n}\n\n// export async function init_command() {}\n// function isUrl(path: string) {\n//   try {\n//     new URL(path)\n//     return true\n//   } catch (error) {\n//     return false\n//   }\n// }\n//\n// function getRegistryUrl(path: string) {\n//   if (isUrl(path)) {\n//     // If the url contains /chat/b/, we assume it's the v0 registry.\n//     //NOTE: We need to add the /json suffix if it's missing.\n//     const url = new URL(path)\n//     if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith('/json')) {\n//       url.pathname = `${url.pathname}/json`\n//     }\n//\n//     return url.toString()\n//   }\n//\n//   return `${REGISTRY_URL}/${path}`\n// }\n","import { z } from 'zod'\n\nexport const init_options_schema = z.object({\n  yes: z.boolean().default(false),\n  defaults: z.boolean().default(false),\n  cwd: z.string().default(process.cwd()),\n  slint: z.boolean().default(false),\n  force: z.boolean().default(false),\n  srcDir: z.string().default(process.cwd())\n})\n\nexport type InitOptions = z.infer<typeof init_options_schema>\n","export const IGNORED_DIRECTORIES = [\n  '**/node_modules',\n  '**/.git',\n  '**/dist',\n  '**/.next',\n  '**/build',\n  '**/coverage',\n  '**/public'\n]\n\nexport const tailwindCssInstallationGuide = {\n  info: 'You need to install TailwindCss:'\n}\n","import {\n  IGNORED_DIRECTORIES,\n  tailwindCssInstallationGuide\n} from '../get-project-info/get-project-info.constants'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport fg from 'fast-glob'\nimport { logger } from '../text-styling'\n\n// Check if TypeScript is installed\nexport async function checkTypeScriptInstalled(cwd: string) {\n  return fs.pathExists(path.resolve(cwd, 'tsconfig.json'))\n}\n\n// Check if TailwindCss is installed\nexport async function checkTailwindCssInstalled(cwd: string) {\n  const tailwindcss = fg.globSync('tailwind.config.*', {\n    cwd,\n    deep: 3,\n    ignore: IGNORED_DIRECTORIES\n  })\n\n  if (!tailwindcss.length) return false\n  console.log(tailwindcss)\n  return true\n}\n\n// Check if the working directory exists\nexport function checkDirectoryExist(cwd: string): typeof logger | undefined {\n  if (!fs.lstatSync(cwd).isDirectory()) {\n    return logger.error(`The working directory ${cwd} does not exist.`)\n  }\n}\n\n// Check if the project is valid\nexport function checkProjectIsValid(cwd: string): void {\n  // Check if the cwd exists && it's a directory\n  checkDirectoryExist(cwd)\n\n  // Check TailwindCss is configured\n  checkTailwindCssInstalled(cwd)\n}\n","import kleur from 'kleur'\nimport logSymbols from 'log-symbols'\nconst { error, warning, info, success } = logSymbols\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(\n      kleur.red([error, 'ERROR:'].join('')),\n      kleur.red(args.join(' '))\n    )\n    return this\n  },\n  warn(...args: unknown[]) {\n    console.log(\n      kleur.yellow([warning, 'WARN:'].join('')),\n      kleur.yellow(args.join(' '))\n    )\n    return this\n  },\n  info(...args: unknown[]) {\n    console.log(\n      kleur.green([info, 'INFO:'].join('')),\n      kleur.green(args.join(' '))\n    )\n    return this\n  },\n  success(...args: unknown[]) {\n    console.log(\n      kleur.green([success, 'SUCCESS:'].join('')),\n      kleur.green(args.join(' '))\n    )\n    return this\n  },\n  break() {\n    console.log('')\n    return this\n  }\n}\n","import { cyan, green, red, yellow } from 'kleur/colors'\n\nexport const highlighter = {\n  error: red,\n  warn: yellow,\n  success: green,\n  info: cyan\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from 'tsconfig-paths'\n\nexport async function resolve_import(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, 'absoluteBaseUrl' | 'paths'>\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    ['.ts', '.tsx']\n  )\n}\n","import fg from 'fast-glob'\nimport fs from 'fs-extra'\nimport { IGNORED_DIRECTORIES } from './get-project-info.constants'\nimport path from 'path'\nimport { loadConfig } from 'tsconfig-paths'\nimport { type PackageJson } from 'type-fest'\n\n// Get TailwindCss File\nexport async function get_tailwindcss_file(cwd: string) {\n  const files = fg.sync(['**/*.css', '**/*.scss', '**/*.sass'], {\n    cwd,\n    deep: 3,\n    ignore: IGNORED_DIRECTORIES\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  for (const file of files) {\n    const content = await fs.readFile(path.resolve(cwd, file), 'utf8')\n\n    if (\n      content.includes('@tailwind base') ||\n      content.includes('@tailwind components') ||\n      content.includes('@tailwind utilities')\n    ) {\n      return file\n    }\n  }\n\n  return null\n}\n\n// Get Ts Config Alias Prefix\nexport async function get_ts_config_alias_prefix(cwd: string) {\n  const tsConfig = loadConfig(cwd)\n\n  if (tsConfig.resultType === 'failed' || !tsConfig.paths) {\n    return null\n  }\n\n  for (const [alias, paths] of Object.entries(tsConfig.paths)) {\n    if (paths.includes('./src/*') || paths.includes('./*')) {\n      return alias.at(0)\n    }\n  }\n\n  return null\n}\n\n// Get package.json\nexport function getPackageJson(): PackageJson {\n  const packageJsonPath = path.join('package.json')\n\n  return JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'))\n}\n","import { loadConfig } from 'tsconfig-paths'\nimport { explorer } from './get-project-config.constants'\nimport { resolve_import } from '../resolve-import'\nimport {\n  config_cchema,\n  raw_config_schema,\n  RawConfigType\n} from './get-project-config.dto'\nimport path from 'path'\nimport {\n  get_tailwindcss_file,\n  get_ts_config_alias_prefix\n} from '../get-project-info'\nimport { checkTypeScriptInstalled } from '../checkers'\nimport { logger } from '../text-styling'\nimport { get_project_type } from '../get-project-type'\n\nexport async function get_raw_config(\n  cwd: string\n): Promise<RawConfigType | null> {\n  try {\n    const rawConfig = await explorer.search(cwd)\n    if (!rawConfig) {\n      return null\n    }\n\n    return raw_config_schema.parse(rawConfig.config)\n  } catch (error) {\n    logger.error(`Invalid configuration found in ${cwd}/components.json.`)\n    process.exit(1)\n  }\n}\n\nexport async function get_config(cwd: string) {\n  const config = await get_raw_config(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  return await resolve_config_paths(cwd, config)\n}\n\n// Resolve Config Paths\nexport async function resolve_config_paths(cwd: string, config: RawConfigType) {\n  const ts_config = loadConfig(cwd)\n\n  if (ts_config.resultType === 'failed') {\n    return logger.error(\n      `Failed to leaod ${config.tsx ? 'tsconfig' : 'jsconfig'}.json. ${ts_config.message ?? ''}`.trim()\n    )\n  }\n\n  return config_cchema.parse({\n    ...config,\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolve_import(config.aliases.utils, ts_config),\n      components: await resolve_import(config.aliases.components, ts_config),\n      ui: config.aliases.ui\n        ? await resolve_import(config.aliases.ui, ts_config)\n        : await resolve_import(config.aliases.components, ts_config)\n    }\n  })\n}\n\nexport async function get_project_config(cwd: string) {\n  const project_config = get_config(cwd)\n\n  if (project_config) {\n    return project_config\n  }\n\n  const project_type = await get_project_type(cwd)\n  const tailwindcss_file = await get_tailwindcss_file(cwd)\n  const ts_config_alias_prefix = await get_ts_config_alias_prefix(cwd)\n\n  if (!project_type || !tailwindcss_file || !ts_config_alias_prefix) {\n    return null\n  }\n\n  const is_tsx = await checkTypeScriptInstalled(cwd)\n\n  const config: RawConfigType = {\n    $schema: 'https://duckui.vercel.app/schema.json',\n    rsc: ['next-app', 'next-app-src'].includes(project_type),\n    tsx: is_tsx,\n    style: 'default',\n    tailwind: {\n      config: is_tsx ? 'tailwind.config.ts' : 'tailwind.config.js',\n      baseColor: 'zinc',\n      css: tailwindcss_file,\n      cssVariables: true,\n      prefix: ''\n    },\n    aliases: {\n      utils: `${ts_config_alias_prefix}/lib/utils`,\n      components: `${ts_config_alias_prefix}/components`\n    }\n  }\n\n  return resolve_config_paths(cwd, config)\n}\n","import { cosmiconfig } from 'cosmiconfig'\n\nexport const explorer = cosmiconfig('duck-ui', {\n  searchPlaces: ['duck-ui.config.js', 'duck-ui.config.ts']\n})\n","import { z } from 'zod'\n\nexport const raw_config_schema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default('').optional()\n    }),\n    aliases: z.object({\n      components: z.string(),\n      hooks: z.string().optional(),\n      pages: z.string().optional(),\n      utils: z.string(),\n      lib: z.string().optional(),\n      ui: z.string().optional()\n    })\n  })\n  .strict()\n\nexport type RawConfigType = z.infer<typeof raw_config_schema>\n\nexport const config_cchema = raw_config_schema.extend({\n  resolvedPaths: z.object({\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    ui: z.string()\n  })\n})\n","import fg from 'fast-glob'\nimport { Detector } from './get-project-type.types'\nimport { IGNORED_DIRECTORIES } from '../get-project-info'\n\n// Detect NextJs\nexport const detectNextJs: Detector = {\n  type: 'NEXT_JS',\n  detect: async (cwd: string) => {\n    const files = await fg.glob('**/*', {\n      cwd,\n      deep: 3,\n      ignore: IGNORED_DIRECTORIES\n    })\n\n    const is_nextjs = files.find((file) => file.includes('next.config'))\n\n    if (is_nextjs) return true\n    return false\n  }\n}\n","import { detectNextJs } from './get-project-type.lib'\n\nexport enum ProjectTypeEnum {\n  NEXT_JS = 'Next.js',\n  VITE = 'Vite',\n  CREATE_REACT_APP = 'Create React App',\n  UNKNOWN = 'Unknown'\n}\n\n// Gather all detectors in a single array\nexport const detectors = [detectNextJs]\n","import { detectors, ProjectTypeEnum } from './get-project-type.constants'\n\nexport async function get_project_type(\n  cwd: string\n): Promise<keyof typeof ProjectTypeEnum> {\n  for (const detector of detectors) {\n    const isDetected = await detector.detect(cwd)\n    if (isDetected) {\n      return detector.type\n    }\n  }\n  return 'UNKNOWN'\n}\n","import { z } from 'zod'\nimport { enumToArray } from '../transformers'\nimport { ProjectTypeEnum } from './get-project-type.constants'\n\nexport const project_types = enumToArray(ProjectTypeEnum)\n\nexport const project_types_schema = z.enum([\n  ...(project_types as [string, ...string[]])\n])\n\nexport type ProjectType = ProjectTypeEnum\n","export function enumToArray<T extends {}>(enumObj: T): T[keyof T][] {\n  return Object.values(enumObj) as T[keyof T][]\n}\n","import { z } from 'zod'\n\nexport const pathSchema = z.string().min(1, 'Path must be a non-empty string')\n\nexport const pathnameSchema = z\n  .string()\n  .refine((val) => /\\/chat\\/b\\//.test(val), {\n    message: 'The URL must contain /chat/b/ in the pathname'\n  })\n","import { checkTailwindCssInstalled } from '../checkers'\nimport prompts from 'prompts'\nimport { tailwindcss_prompts } from './pref-light-tailwindcss.constants'\nimport { pref_light_options_schema } from './pref-light-tailwindcss.dto'\nimport { get_project_type } from '../get-project-type'\nimport { spinner } from '../spinner'\nimport { highlighter, logger } from '../text-styling'\nimport { tailwindCssInstallationGuide } from '../get-project-info'\nimport { install_tailwindcss } from './pref-light-tailwindcss.lib'\n\nexport async function pref_light_tailwindcss(\n  cwd: string\n): Promise<boolean | null> {\n  const tailwind_spinner = spinner(\n    'Checking if TailwindCSS is installed...\\n'\n  )?.start()\n\n  const is_tailwind_installed = await checkTailwindCssInstalled(cwd)\n\n  if (is_tailwind_installed) {\n    tailwind_spinner.stopAndPersist({\n      text: highlighter.success('TailwindCSS is installed!')\n    })\n    tailwind_spinner?.succeed()\n    return null\n  }\n\n  tailwind_spinner?.fail()\n  logger.info(...Object.values(tailwindCssInstallationGuide)).break()\n\n  const options = await prompts(tailwindcss_prompts)\n  const { tailwind } = pref_light_options_schema.parse(options)\n\n  if (!tailwind) return null\n\n  const type = await get_project_type(cwd)\n  const tailwind_installation = await install_tailwindcss(cwd, type)\n\n  return tailwind\n}\n","import { PromptObject } from 'prompts'\nimport { highlighter } from '../text-styling'\n\nexport const tailwindcss_prompts: PromptObject<string>[] = [\n  {\n    type: 'confirm',\n    name: 'tailwind',\n    message: `Would you like to use ${highlighter.info('TailwindCSS')}`,\n    initial: false,\n    active: 'yes',\n    inactive: 'no'\n  }\n]\n\n//NOTE: willing to support more when we have more frameworks to support with duck-ui\nexport const tailwindcss_dependencies = [\n  'tailwindcss',\n  'postcss',\n  'autoprefixer'\n]\n\nexport const tailwindcss_init = ['tailwindcss', 'init', '-p']\n","import { z } from 'zod'\n\nexport const pref_light_options_schema = z.object({\n  tailwind: z\n    .boolean({\n      message: 'You have to pick one option',\n      description: 'Would you like to use TailwindCSS? (yes/no) -default: no'\n    })\n    .default(false)\n})\n","import ora, { type Options } from 'ora'\n\nexport function spinner(\n  text: Options['text'],\n  options?: {\n    silent?: boolean\n  }\n) {\n  return ora({\n    color: 'yellow',\n    text,\n    isSilent: options?.silent\n  })\n}\n","import { execa } from 'execa'\nimport { get_package_manager, getPackageRunner } from '../get-package-manager'\nimport { spinner } from '../spinner'\nimport { highlighter, logger } from '../text-styling'\nimport {\n  tailwindcss_dependencies,\n  tailwindcss_init\n} from './pref-light-tailwindcss.constants'\n\nexport async function install_tailwindcss(cwd: string, type: string) {\n  const installSpinner = spinner(\n    highlighter.info('Installing TailwindCSS...')\n  ).start()\n\n  const packageManager = await get_package_manager(cwd)\n  const { failed: installation_step_1 } = await execa(\n    packageManager,\n    [packageManager !== 'npm' ? 'install' : 'add', ...tailwindcss_dependencies],\n    {\n      cwd: cwd,\n      shell: true\n    }\n  )\n  if (installation_step_1) return installSpinner.fail()\n\n  const packageRunner = await getPackageRunner(cwd, packageManager)\n  const { failed: installation_step_2 } = await execa(\n    packageRunner,\n    [...tailwindcss_init],\n    {\n      cwd: cwd,\n      shell: true\n    }\n  )\n  if (installation_step_2) return installSpinner.fail()\n\n  logger.break()\n  installSpinner.succeed()\n}\n","import { Agent, detect } from '@antfu/ni'\n\nexport async function get_package_manager(\n  cwd: string\n): Promise<Exclude<Agent, 'yarn@berry' | 'pnpm@6'>> {\n  const packageManager = await detect({\n    programmatic: true,\n    cwd\n  })\n\n  if (packageManager === 'yarn@berry') return 'yarn'\n  if (packageManager === 'pnpm@6') return 'pnpm'\n  if (!packageManager) return 'npm'\n\n  return packageManager\n}\n\nexport async function getPackageRunner(\n  cwd: string,\n  pm: Exclude<Agent, 'yarn@berry' | 'pnpm@6'>\n): Promise<'pnpm dlx' | 'bunx' | 'npx'> {\n  const packageManager = pm ?? (await get_package_manager(cwd))\n\n  if (packageManager === 'pnpm') return 'pnpm dlx'\n  if (packageManager === 'bun') return 'bunx'\n  return 'npx'\n}\n","#!/usr/bin/env node\n// This is the main file of the duck-ui CLI application written with TypeScript\n\nimport { init } from './main'\n\n// INIT START\n\nprocess.on('SIGINT', () => process.exit(0))\nprocess.on('SIGTERM', () => process.exit(0))\n\ninit()\n// INIT END\n"],"mappings":"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","names":["Command","config","Command","init_command_config","path","z","init_options_schema","IGNORED_DIRECTORIES","tailwindCssInstallationGuide","fs","fg","kleur","logSymbols","error","warning","info","success","logger","args","cyan","green","red","yellow","highlighter","checkTailwindCssInstalled","cwd","tailwindcss","fg","IGNORED_DIRECTORIES","createMatchPath","fg","fs","path","loadConfig","getPackageJson","packageJsonPath","path","fs","loadConfig","cosmiconfig","explorer","z","raw_config_schema","config_cchema","fg","detectNextJs","cwd","fg","IGNORED_DIRECTORIES","file","ProjectTypeEnum","detectors","detectNextJs","get_project_type","cwd","detector","detectors","z","enumToArray","enumObj","project_types","enumToArray","ProjectTypeEnum","project_types_schema","z","z","pathSchema","pathnameSchema","val","prompts","tailwindcss_prompts","highlighter","tailwindcss_dependencies","tailwindcss_init","z","pref_light_options_schema","ora","spinner","text","options","execa","detect","get_package_manager","cwd","packageManager","getPackageRunner","pm","install_tailwindcss","cwd","type","installSpinner","spinner","highlighter","packageManager","get_package_manager","installation_step_1","execa","tailwindcss_dependencies","packageRunner","getPackageRunner","installation_step_2","tailwindcss_init","logger","pref_light_tailwindcss","cwd","tailwind_spinner","spinner","checkTailwindCssInstalled","highlighter","logger","tailwindCssInstallationGuide","options","prompts","tailwindcss_prompts","tailwind","pref_light_options_schema","type","get_project_type","tailwind_installation","install_tailwindcss","init_command_action","opt","options","init_options_schema","cwd","path","tailwind","pref_light_tailwindcss","name","description","options","init_command_config","option_1","option_2","option_3","option_4","option_5","option_6","init_command","Command","init_command_action","init","duck_ui","Command","packageJson","getPackageJson","config","init_command","init"]}