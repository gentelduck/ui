{"version":3,"sources":["../src/main/main.ts","../src/main/main.constants.ts","../src/commands/init/init.ts","../src/commands/init/init.constants.ts","../src/commands/init/init.lib.ts","../src/commands/init/init.dto.ts","../src/utils/get-project-info/get-project-info.constants.ts","../src/utils/checkers/checkers.ts","../src/utils/text-styling/logger.ts","../src/utils/text-styling/highlighter.ts","../src/utils/resolve-import/resolve-import.ts","../src/utils/get-project-info/get-project-info.ts","../src/utils/get-project-config/get-project-config.ts","../src/utils/get-project-config/get-project-config.constants.ts","../src/utils/get-project-config/get-project-config.dto.ts","../src/utils/get-project-type/get-project-type.lib.ts","../src/utils/get-project-type/get-project-type.constants.ts","../src/utils/get-project-type/get-project-type.dto.ts","../src/utils/transformers/transformers.ts","../src/utils/pref-light-typescript/pref-light-typescript.ts","../src/utils/pref-light-typescript/pref-light-typescript.lib.ts","../src/utils/spinner.ts","../src/utils/get-package-manager/get-package-manager.ts","../src/utils/pref-light-typescript/pref-light-typescript.constants.ts","../src/utils/pref-light-typescript/pref-light-typescript.dto.ts","../src/utils/url-mutating/url-mutating.dto.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.constants.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.dto.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.lib.ts","../src/index.ts"],"sourcesContent":["import { Command } from 'commander'\nimport { config } from './main.constants'\nimport { init_command } from '../commands/init'\nimport { getPackageJson } from '../utils'\n\nexport function init() {\n  const duck_ui = new Command()\n  const packageJson = getPackageJson()\n\n  duck_ui.name(packageJson?.name || config.name)\n  duck_ui.description(packageJson?.description || config.description)\n  duck_ui.version(packageJson?.version || config.version)\n  duck_ui.addCommand(init_command())\n\n  duck_ui.parse()\n}\n","export const config = {\n  name: 'duck-ui',\n  description:\n    'This is the main file of the duck-ui CLI application written with TypeScript',\n  version: '1.0.0'\n}\n\nexport const REGISTRY_URL = 'https://duckui.vercel.app/registry'\n","import { Command } from 'commander'\nimport { init_command_config } from './init.constants'\nimport { init_command_action } from './init.lib'\n\nconst { name, description, options } = init_command_config\nconst { option_1, option_2, option_3, option_4, option_5, option_6 } = options\n\nexport function init_command(): Command {\n  const init_command = new Command(name)\n\n  init_command\n    .description(description)\n    .option(option_1.flags, option_1.description, option_1.defaultValue)\n    .option(option_2.flags, option_2.description, option_2.defaultValue)\n    .option(option_3.flags, option_3.description, option_3.defaultValue)\n    .option(option_4.flags, option_4.description, option_4.defaultValue)\n    .option(option_5.flags, option_5.description, option_5.defaultValue)\n    .option(option_6.flags, option_6.description, option_6.defaultValue)\n    .action(init_command_action)\n\n  return init_command\n}\n","import { InitCommandConfig } from './init.types'\n\nexport const init_command_config: InitCommandConfig = {\n  name: 'init',\n  description: 'init the project',\n  options: {\n    option_1: {\n      flags: '-y, --yes',\n      description: 'skip confirmation prompt.',\n      defaultValue: false\n    },\n    option_2: {\n      flags: '-d, --defaults,',\n      description: 'use default configuration.',\n      defaultValue: false\n    },\n    option_3: {\n      flags: '-c, --cwd <cwd>',\n      description: 'the working directory. defaults to the current directory.',\n      defaultValue: process.cwd()\n    },\n    option_4: {\n      flags: '-s, --silent',\n      description: 'silent mode',\n      defaultValue: false\n    },\n    option_5: {\n      flags: '-f, --force',\n      description: 'will force and overwrite old configurations.',\n      defaultValue: false\n    },\n    option_6: {\n      flags: '-sd, --src-dir <src-dir>',\n      description: 'the source directory. defaults to the current directory.',\n      defaultValue: process.cwd()\n    }\n  }\n}\n","import path from 'path'\nimport { init_options_schema, InitOptions } from './init.dto'\nimport {\n  checkTypeScriptInstalled,\n  get_project_config,\n  get_project_type,\n  install_tailwindcss,\n  logger,\n  pref_light_tailwindcss,\n  pref_light_typescript\n} from '@/src/utils'\nimport { REGISTRY_URL } from '@/src/main'\n\nexport async function init_command_action(opt: InitOptions) {\n  const options = init_options_schema.parse(opt)\n  const cwd = path.resolve(options.cwd)\n\n  // logger.info({ args: ['Checking for preflight...'] })\n  //\n  // await pref_light_tailwindcss(cwd)\n  // await pref_light_typescript(cwd)\n  // const config = await get_project_config(cwd)\n\n  const hi = getRegistryUrl('button')\n\n  console.log(hi)\n\n  // const type = await get_project_type(cwd)\n  // await install_tailwindcss(cwd, type, is_ts)\n\n  // logger.info({ args: ['Done.!'] })\n}\n\nfunction isUrl(path: string) {\n  try {\n    new URL(path)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nfunction getRegistryUrl(path: string) {\n  if (isUrl(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    //NOTE: We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith('/json')) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n","import { z } from 'zod'\n\nexport const init_options_schema = z.object({\n  yes: z.boolean().default(false),\n  defaults: z.boolean().default(false),\n  cwd: z.string().default(process.cwd()),\n  slint: z.boolean().default(false),\n  force: z.boolean().default(false),\n  srcDir: z.string().default(process.cwd())\n})\n\nexport type InitOptions = z.infer<typeof init_options_schema>\n","import { highlighter } from '../text-styling'\n\nexport const IGNORED_DIRECTORIES = [\n  '**/node_modules',\n  '**/.git',\n  '**/dist',\n  '**/.next',\n  '**/build',\n  '**/coverage',\n  '**/public'\n]\n","import {\n  IGNORED_DIRECTORIES,\n  tailwindCssInstallationGuide\n} from '../get-project-info/get-project-info.constants'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport fg from 'fast-glob'\nimport { logger } from '../text-styling'\n\n// Check if TailwindCss is installed\nexport async function checkTailwindCssInstalled(cwd: string) {\n  const tailwindcss = fg.globSync('tailwind.config.*', {\n    cwd,\n    deep: 3,\n    ignore: IGNORED_DIRECTORIES\n  })\n\n  if (!tailwindcss.length) return false\n  return true\n}\n\n// Check if the working directory exists\nexport function checkDirectoryExist(cwd: string): typeof logger | undefined {\n  if (!fs.lstatSync(cwd).isDirectory()) {\n    return logger.error({\n      args: [`The working directory ${cwd} does not exist.`]\n    })\n  }\n}\n\n// Check if the project is valid\nexport function checkProjectIsValid(cwd: string): void {\n  // Check if the cwd exists && it's a directory\n  checkDirectoryExist(cwd)\n\n  // Check TailwindCss is configured\n  checkTailwindCssInstalled(cwd)\n}\n","import kleur from 'kleur'\nimport logSymbols from 'log-symbols'\nimport { LoggerParams, LoggerType } from './text-styling.types'\nconst { error, warning, info, success } = logSymbols\n\n// Define the logger object with proper types\nexport const logger: LoggerType = {\n  error: ({ with_icon = true, args }: LoggerParams): LoggerType => {\n    console.log(\n      kleur.red([with_icon ? error : '', 'ERROR:'].join(' ')),\n      kleur.red(args.join(' '))\n    )\n    return logger\n  },\n\n  warn: ({ with_icon = true, args }: LoggerParams): LoggerType => {\n    console.log(\n      kleur.yellow([with_icon ? warning : '', 'WARN:'].join(' ')),\n      kleur.yellow(args.join(' '))\n    )\n    return logger\n  },\n\n  info: ({ with_icon = true, args }: LoggerParams): LoggerType => {\n    console.log(\n      kleur.green([with_icon ? info : '', 'INFO:'].join(' ')),\n      kleur.green(args.join(' '))\n    )\n    return logger\n  },\n\n  success: ({ args, with_icon }: LoggerParams): LoggerType => {\n    console.log(\n      kleur.green([with_icon ? success : '', 'SUCCESS:'].join(' ')),\n      kleur.green(args.join(' '))\n    )\n    return logger\n  },\n\n  break: (): LoggerType => {\n    console.log('')\n    return logger\n  }\n}\n","import {\n  cyan,\n  green,\n  red,\n  yellow,\n  bgRed,\n  bgYellow,\n  bgGreen,\n  bgCyan\n} from 'kleur/colors'\n\nexport const highlighter = {\n  error: red,\n  bg_error: bgRed,\n  warn: yellow,\n  bg_warn: bgYellow,\n  success: green,\n  bg_success: bgGreen,\n  info: cyan,\n  bg_info: bgCyan\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from 'tsconfig-paths'\n\nexport async function resolve_import(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, 'absoluteBaseUrl' | 'paths'>\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    ['.ts', '.tsx']\n  )\n}\n","import fg from 'fast-glob'\nimport fs from 'fs-extra'\nimport { IGNORED_DIRECTORIES } from './get-project-info.constants'\nimport path from 'path'\nimport { loadConfig } from 'tsconfig-paths'\nimport { type PackageJson } from 'type-fest'\nimport { logger } from '../text-styling'\n\n// Get TailwindCss File\nexport async function get_tailwindcss_file(cwd: string) {\n  const files = fg.sync(['**/*.css', '**/*.scss', '**/*.sass'], {\n    cwd,\n    deep: 3,\n    ignore: IGNORED_DIRECTORIES\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  for (const file of files) {\n    const content = await fs.readFile(path.resolve(cwd, file), 'utf8')\n\n    if (\n      content.includes('@tailwind base') ||\n      content.includes('@tailwind components') ||\n      content.includes('@tailwind utilities')\n    ) {\n      return file\n    }\n  }\n\n  return null\n}\n\n// Get Ts Config Alias Prefix\nexport async function get_ts_config_alias_prefix(cwd: string) {\n  const tsConfig = loadConfig(cwd)\n\n  if (tsConfig.resultType === 'failed' || !tsConfig.paths) {\n    return null\n  }\n\n  for (const [alias, paths] of Object.entries(tsConfig.paths)) {\n    if (paths.includes('./src/*') || paths.includes('./*')) {\n      return alias.at(0)\n    }\n  }\n\n  return null\n}\n\n// Get package.json\nexport function getPackageJson(): PackageJson | null {\n  const files = fg.sync(['package.json'], {\n    cwd: process.cwd(),\n    deep: 1,\n    ignore: IGNORED_DIRECTORIES\n  })\n\n  if (!files.length) {\n    logger.error({ args: ['package.json not found'] })\n    return process.exit(1)\n  }\n\n  const packageJsonPath = path.join(process.cwd(), 'package.json')\n\n  const packageJson: PackageJson = JSON.parse(\n    fs.readFileSync(packageJsonPath, 'utf8')\n  )\n\n  return packageJson\n}\n","import chalk from 'chalk'\nimport fs from 'fs-extra'\nimport { loadConfig } from 'tsconfig-paths'\nimport { default_js_config, explorer } from './get-project-config.constants'\nimport { resolve_import } from '../resolve-import'\nimport {\n  config_cchema,\n  raw_config_schema,\n  RawConfigType\n} from './get-project-config.dto'\nimport path from 'path'\nimport {\n  get_tailwindcss_file,\n  get_ts_config_alias_prefix\n} from '../get-project-info'\nimport { highlighter, logger } from '../text-styling'\nimport { get_project_type } from '../get-project-type'\nimport { checkTypeScriptInstalled } from '../pref-light-typescript'\n\nexport async function get_raw_config(\n  cwd: string\n): Promise<RawConfigType | null> {\n  try {\n    const rawConfig = await explorer.search(cwd)\n    if (!rawConfig) {\n      return null\n    }\n\n    return raw_config_schema.parse(rawConfig.config)\n  } catch (error) {\n    logger.error({\n      args: [`Invalid configuration found in ${cwd}/components.json.`]\n    })\n    process.exit(1)\n  }\n}\n\nexport async function get_config(cwd: string) {\n  const config = await get_raw_config(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  return await resolve_config_paths(cwd, config)\n}\n\n// Resolve Config Paths\nexport async function resolve_config_paths(\n  cwd: string,\n  config: RawConfigType\n): Promise<RawConfigType> {\n  const ts_config = loadConfig(cwd)\n\n  if (ts_config.resultType === 'failed') {\n    return logger.error({\n      args: [\n        `Failed to leaod ${config.tsx ? 'tsconfig' : 'jsconfig'}.json. ${ts_config.message ?? ''}`.trim()\n      ]\n    })\n  }\n\n  return config_cchema.parse({\n    ...config,\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolve_import(config.aliases.utils, ts_config),\n      components: await resolve_import(config.aliases.components, ts_config),\n      ui: config.aliases.ui\n        ? await resolve_import(config.aliases.ui, ts_config)\n        : await resolve_import(config.aliases.components, ts_config)\n    }\n  })\n}\n\nexport async function get_project_config(cwd: string) {\n  const project_config = await get_config(cwd)\n\n  if (project_config) {\n    return project_config\n  }\n\n  const project_type = await get_project_type(cwd)\n  const tailwindcss_file = await get_tailwindcss_file(cwd)\n  const ts_config_alias_prefix = await get_ts_config_alias_prefix(cwd)\n\n  if (!project_type || !tailwindcss_file || !ts_config_alias_prefix) {\n    logger.error({\n      args: [\n        `Failed to get project config!, ${chalk.bgRed.white('TailwindCss')} is required`\n      ]\n    })\n    return null\n  }\n\n  const is_tsx = await checkTypeScriptInstalled(cwd)\n\n  const config: RawConfigType = {\n    $schema: 'https://duckui.vercel.app/schema.json',\n    rsc: ['NEXT_JS'].includes(project_type),\n    tsx: is_tsx,\n    style: 'default',\n    tailwind: {\n      config: is_tsx ? 'tailwind.config.ts' : 'tailwind.config.js',\n      baseColor: 'zinc',\n      css: tailwindcss_file,\n      cssVariables: true,\n      prefix: ''\n    },\n    aliases: {\n      utils: `${ts_config_alias_prefix}/lib/utils`,\n      components: `${ts_config_alias_prefix}/components`\n    }\n  }\n\n  // Convert config to a string based on the file type\n  const configString = config?.tsx\n    ? `export const config = ${JSON.stringify(config, null, 2)};`\n    : default_js_config(config)\n\n  try {\n    await fs.writeFile(\n      path.join(cwd, `duck-ui.config.${is_tsx ? 'ts' : 'js'}`),\n      configString,\n      'utf8'\n    )\n  } catch (error) {\n    logger.error({\n      args: [`Failed to create duck-ui.config.${is_tsx ? 'ts' : 'js'}`]\n    })\n    process.exit(1)\n  }\n\n  return resolve_config_paths(cwd, config)\n}\n","import { cosmiconfig } from 'cosmiconfig'\nimport { RawConfigType } from './get-project-config.dto'\n\nexport const explorer = cosmiconfig('duck-ui', {\n  searchPlaces: ['duck-ui.config.js', 'duck-ui.config.ts']\n})\n\nexport const default_js_config = (\n  config: RawConfigType\n) => `export default ${JSON.stringify(config, null, 2)};\n`\n","import { z } from 'zod'\n\nexport const raw_config_schema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default('').optional()\n    }),\n    aliases: z.object({\n      components: z.string(),\n      hooks: z.string().optional(),\n      pages: z.string().optional(),\n      utils: z.string(),\n      lib: z.string().optional(),\n      ui: z.string().optional()\n    })\n  })\n  .strict()\n\nexport type RawConfigType = z.infer<typeof raw_config_schema>\n\nexport const config_cchema = raw_config_schema.extend({\n  resolvedPaths: z.object({\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    ui: z.string()\n  })\n})\n","import fg from 'fast-glob'\nimport { Detector } from './get-project-type.types'\nimport { IGNORED_DIRECTORIES } from '../get-project-info'\n\n// Detect NextJs\nexport const detectNextJs: Detector = {\n  type: 'NEXT_JS',\n  detect: async (cwd: string) => {\n    const files = await fg.glob('**/*', {\n      cwd,\n      deep: 3,\n      ignore: IGNORED_DIRECTORIES\n    })\n\n    const is_nextjs = files.find((file) => file.includes('next.config'))\n\n    if (is_nextjs) return true\n    return false\n  }\n}\n","import { detectNextJs } from './get-project-type.lib'\n\nexport enum ProjectTypeEnum {\n  NEXT_JS = 'Next.js',\n  VITE = 'Vite',\n  CREATE_REACT_APP = 'Create React App',\n  UNKNOWN = 'Unknown'\n}\n\n// Gather all detectors in a single array\nexport const detectors = [detectNextJs]\n","import { z } from 'zod'\nimport { enumToArray } from '../transformers'\nimport { ProjectTypeEnum } from './get-project-type.constants'\n\nexport const project_types = enumToArray(ProjectTypeEnum)\n\nexport const project_types_schema = z.enum([\n  ...(project_types as [string, ...string[]])\n])\n\nexport type ProjectType = ProjectTypeEnum\n","export function enumToArray<T extends {}>(enumObj: T): T[keyof T][] {\n  return Object.values(enumObj) as T[keyof T][]\n}\n","import prompts from 'prompts'\nimport { highlighter, logger } from '../text-styling'\nimport {\n  checkTypeScriptInstalled,\n  install_typescript\n} from './pref-light-typescript.lib'\nimport { typescript_prompts } from './pref-light-typescript.constants'\nimport { pref_light_typescript_options_schema } from './pref-light-typescript.dto'\n\nexport async function pref_light_typescript(cwd: string): Promise<void> {\n  const is_ts_installed = await checkTypeScriptInstalled(cwd)\n\n  if (is_ts_installed) return\n\n  logger.warn({\n    args: [\n      `${highlighter.info('TypeScript')} is not installed. You need to install ${highlighter.info('TypeScript')}...`\n    ]\n  })\n\n  const options = await prompts(typescript_prompts)\n  const { typescript } = pref_light_typescript_options_schema.parse(options)\n  if (!typescript) return\n\n  await install_typescript(cwd, typescript)\n}\n","import fs from 'fs-extra'\nimport path from 'path'\nimport { spinner } from '../spinner'\nimport { highlighter, logger } from '../text-styling'\nimport { get_package_manager } from '../get-package-manager'\nimport { execa } from 'execa'\nimport {\n  js_config,\n  ts_config,\n  typescript_dependencies\n} from './pref-light-typescript.constants'\n\nexport async function install_typescript(cwd: string, typescript: boolean) {\n  const install_spinner = spinner(\n    highlighter.info('Installing TypeScript...')\n  ).start()\n\n  const packageManager = await get_package_manager(cwd)\n  const { failed: installation_step_1 } = await execa(\n    packageManager,\n    [\n      packageManager !== 'npm' ? 'install' : 'add',\n      ...typescript_dependencies,\n      '-D'\n    ],\n    {\n      cwd: cwd,\n      shell: true\n    }\n  )\n  if (installation_step_1) return install_spinner.fail()\n\n  // Replacing default config with tailwind config that matches the project type\n  await adding_typescript_config(cwd, typescript)\n\n  logger.break()\n  install_spinner.succeed()\n}\n\nexport async function adding_typescript_config(cwd: string, is_ts: boolean) {\n  const tailwind_config_spinner = spinner(\n    highlighter.info('Adding TypeScript config...')\n  ).start()\n\n  await fs.writeFile(\n    path.join(cwd, `${is_ts ? 'ts' : 'js'}config.json`),\n    is_ts ? ts_config : js_config\n  )\n\n  logger.break()\n  tailwind_config_spinner.succeed()\n}\n\n// Check if TypeScript is installed\nexport async function checkTypeScriptInstalled(cwd: string) {\n  return fs.pathExists(path.resolve(cwd, 'tsconfig.json'))\n}\n","import ora, { type Options } from 'ora'\n\nexport function spinner(\n  text: Options['text'],\n  options?: {\n    silent?: boolean\n  }\n) {\n  return ora({\n    color: 'yellow',\n    text,\n    isSilent: options?.silent\n  })\n}\n","import { Agent, detect } from '@antfu/ni'\n\nexport async function get_package_manager(\n  cwd: string\n): Promise<Exclude<Agent, 'yarn@berry' | 'pnpm@6'>> {\n  const packageManager = await detect({\n    programmatic: true,\n    cwd\n  })\n\n  if (packageManager === 'yarn@berry') return 'yarn'\n  if (packageManager === 'pnpm@6') return 'pnpm'\n  if (!packageManager) return 'npm'\n\n  return packageManager\n}\n\nexport async function getPackageRunner(\n  cwd: string,\n  pm: Exclude<Agent, 'yarn@berry' | 'pnpm@6'>\n): Promise<'pnpm dlx' | 'bunx' | 'npx'> {\n  const packageManager = pm ?? (await get_package_manager(cwd))\n\n  if (packageManager === 'pnpm') return 'pnpm dlx'\n  if (packageManager === 'bun') return 'bunx'\n  return 'npx'\n}\n","import { PromptObject } from 'prompts'\nimport { highlighter } from '../text-styling'\n\nexport const typescript_prompts: PromptObject<string>[] = [\n  {\n    type: 'confirm',\n    name: 'typescript',\n    message: `Would you like to install ${highlighter.info('TypeScript')} (recommended)`,\n    initial: false,\n    active: 'yes',\n    inactive: 'no'\n  }\n]\n\nexport const typescript_dependencies = ['typescript']\n\nexport const js_config = `{\n  \"compilerOptions\": {\n    \"target\": \"es6\",                   // Target ECMAScript version\n    \"module\": \"commonjs\",               // Specify module code generation\n    \"baseUrl\": \".\",                     // Base directory for non-relative module names\n    \"paths\": {                          // Path aliases for cleaner imports\n      \"@components/*\": [\"src/components/*\"],\n      \"@utils/*\": [\"src/utils/*\"]\n    },\n    \"jsx\": \"react-jsx\",                 // Set JSX handling for React projects\n    \"allowSyntheticDefaultImports\": true, // Allow default imports from modules with no default export\n    \"esModuleInterop\": true,            // Import compatibility for CommonJS and ES modules\n    \"strict\": true                      // Enable all strict type-checking options\n  },\n  \"include\": [\"src\"],                   // Include files in the src folder\n  \"exclude\": [\"node_modules\", \"dist\"]   // Exclude folders from the config\n}\n`\n\nexport const ts_config = `{\n  \"compilerOptions\": {\n    \"target\": \"es6\", // Target ECMAScript version\n    \"module\": \"commonjs\", // Module system used in Node.js\n    \"lib\": [\"dom\", \"es6\", \"dom.iterable\", \"scripthost\"], // Standard library\n    \"jsx\": \"react-jsx\", // JSX support for React\n    \"outDir\": \"./dist\", // Output directory for compiled files\n    \"rootDir\": \"./src\", // Root directory of source files\n    \"strict\": true, // Enable strict type checking\n    \"moduleResolution\": \"node\", // Module resolution strategy\n    \"esModuleInterop\": true, // Allow default imports from CommonJS\n    \"skipLibCheck\": true, // Skip type checking of declaration files\n    \"forceConsistentCasingInFileNames\": true, // Enforce consistent file naming\n    \"resolveJsonModule\": true, // Support importing JSON files\n    \"allowSyntheticDefaultImports\": true, // Synthetic default imports for compatibility\n    \"baseUrl\": \".\", // Base directory for module resolution\n    \"paths\": {\n      // Define path aliases\n      \"@components/*\": [\"src/components/*\"],\n      \"@utils/*\": [\"src/utils/*\"]\n    }\n  },\n  \"include\": [\"src\"], // Include all source files in the src directory\n  \"exclude\": [\"node_modules\", \"dist\", \"tests\"] // Exclude directories from compilation\n}\n`\n","import { z } from 'zod'\n\nexport const pref_light_typescript_options_schema = z.object({\n  typescript: z\n    .boolean({\n      message: 'You have to pick one option',\n      description: 'Would you like to use TypeScript? (yes/no) -default: no'\n    })\n    .default(false)\n})\n","import { z } from 'zod'\n\nexport const pathSchema = z.string().min(1, 'Path must be a non-empty string')\n\nexport const pathnameSchema = z\n  .string()\n  .refine((val) => /\\/chat\\/b\\//.test(val), {\n    message: 'The URL must contain /chat/b/ in the pathname'\n  })\n","import { checkTailwindCssInstalled } from '../checkers'\nimport prompts from 'prompts'\nimport { tailwindcss_prompts } from './pref-light-tailwindcss.constants'\nimport { highlighter, logger } from '../text-styling'\nimport { pref_light_tailwindcss_options_schema } from './pref-light-tailwindcss.dto'\nimport { install_tailwindcss } from './pref-light-tailwindcss.lib'\n\nexport async function pref_light_tailwindcss(cwd: string): Promise<void> {\n  const is_tailwind_installed = await checkTailwindCssInstalled(cwd)\n\n  if (is_tailwind_installed) return\n\n  logger.warn({\n    args: [\n      `${highlighter.info('TailwindCss')} is not installed. You need to install ${highlighter.info('TailwindCss')}...`\n    ]\n  })\n\n  const options = await prompts(tailwindcss_prompts)\n  const { tailwind } = pref_light_tailwindcss_options_schema.parse(options)\n\n  if (!tailwind) return\n\n  await install_tailwindcss(cwd)\n}\n","import { PromptObject } from 'prompts'\nimport { highlighter } from '../text-styling'\n\nexport const tailwindcss_prompts: PromptObject<string>[] = [\n  {\n    type: 'confirm',\n    name: 'tailwind',\n    message: `Would you like to install ${highlighter.info('TailwindCSS')}`,\n    initial: false,\n    active: 'yes',\n    inactive: 'no'\n  }\n]\n\n//NOTE: willing to support more when we have more frameworks to support with duck-ui\nexport const tailwindcss_dependencies = [\n  'tailwindcss',\n  'postcss',\n  'autoprefixer'\n]\n\nexport const tailwindcss_init = ['tailwindcss', 'init', '-p']\n\nexport const default_config = `/** @type {import('tailwindcss').Config} */\n    export default {\n    content: [\n      \"./index.html\",\n      \"./src/**/*.{js,ts,jsx,tsx}\",\n    ],\n    theme: {\n      extend: {},\n    },\n    plugins: [],\n  };`\n","import { z } from 'zod'\n\nexport const pref_light_tailwindcss_options_schema = z.object({\n  tailwind: z\n    .boolean({\n      message: 'You have to pick one option',\n      description: 'Would you like to use TailwindCSS? (yes/no) -default: no'\n    })\n    .default(false)\n})\n","import { execa } from 'execa'\nimport path from 'path'\nimport { get_package_manager, getPackageRunner } from '../get-package-manager'\nimport { spinner } from '../spinner'\nimport { highlighter, logger } from '../text-styling'\nimport {\n  default_config,\n  tailwindcss_dependencies,\n  tailwindcss_init\n} from './pref-light-tailwindcss.constants'\nimport fs from 'fs-extra'\nimport { get_project_type, ProjectType } from '../get-project-type'\nimport { checkTypeScriptInstalled } from '../pref-light-typescript'\n\nexport async function install_tailwindcss(cwd: string) {\n  const install_spinner = spinner(\n    highlighter.info('Installing TailwindCSS...')\n  ).start()\n\n  const packageManager = await get_package_manager(cwd)\n  const { failed: installation_step_1 } = await execa(\n    packageManager,\n    [packageManager !== 'npm' ? 'install' : 'add', ...tailwindcss_dependencies],\n    {\n      cwd: cwd,\n      shell: true\n    }\n  )\n  if (installation_step_1) return install_spinner.fail()\n\n  const packageRunner = await getPackageRunner(cwd, packageManager)\n  const { failed: installation_step_2 } = await execa(\n    packageRunner,\n    [...tailwindcss_init],\n    {\n      cwd: cwd,\n      shell: true\n    }\n  )\n  if (installation_step_2) return install_spinner.fail()\n\n  // Replacing default config with tailwind config that matches the project type\n  await adding_tailwind_config(cwd)\n\n  install_spinner.succeed()\n}\n\nexport async function adding_tailwind_config(cwd: string) {\n  const is_ts = await checkTypeScriptInstalled(cwd)\n  const type = await get_project_type(cwd)\n\n  const tailwind_config_spinner = spinner(\n    highlighter.info('Adding TailwindCSS config...')\n  ).start()\n\n  await fs.writeFile(\n    path.join(cwd, `tailwind.config.${is_ts ? 'ts' : 'js'}`),\n    tailwind_config(type)\n  )\n\n  await fs.writeFile(\n    path.join(cwd, css_file_path(type)),\n    css_file_content(type)\n  )\n\n  logger.break()\n  tailwind_config_spinner.succeed()\n}\n\n// NOTE: you have to support other types of projects\nexport const tailwind_config = (type: ProjectType) => {\n  return type === 'UNKNOWN' ? default_config : default_config\n}\n\nexport const css_file_path = (type: ProjectType) => {\n  return type === 'UNKNOWN' ? './style.css' : './style.css'\n}\n\nexport function css_file_content(type: ProjectType) {\n  return type === 'UNKNOWN'\n    ? default_css_without_duckui\n    : default_css_without_duckui\n}\n\nexport const default_css_without_duckui = `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`\n","#!/usr/bin/env node\n// This is the main file of the duck-ui CLI application written with TypeScript\n\nimport { init } from './main'\n\n// INIT START\n\nprocess.on('SIGINT', () => process.exit(0))\nprocess.on('SIGTERM', () => process.exit(0))\n\ninit()\n// INIT END\n"],"mappings":"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","names":["Command","config","REGISTRY_URL","Command","init_command_config","path","z","init_options_schema","init_command_action","opt","options","init_options_schema","cwd","path","hi","getRegistryUrl","isUrl","url","REGISTRY_URL","name","description","options","init_command_config","option_1","option_2","option_3","option_4","option_5","option_6","init_command","Command","init_command_action","IGNORED_DIRECTORIES","fs","fg","kleur","logSymbols","error","warning","info","success","logger","with_icon","args","cyan","green","red","yellow","bgRed","bgYellow","bgGreen","bgCyan","highlighter","createMatchPath","fg","fs","path","loadConfig","getPackageJson","fg","IGNORED_DIRECTORIES","logger","packageJsonPath","path","fs","chalk","fs","loadConfig","cosmiconfig","explorer","z","raw_config_schema","config_cchema","fg","ProjectTypeEnum","z","enumToArray","enumObj","project_types","enumToArray","ProjectTypeEnum","project_types_schema","z","prompts","fs","ora","detect","execa","typescript_prompts","highlighter","z","pref_light_typescript_options_schema","z","pathSchema","pathnameSchema","val","prompts","tailwindcss_prompts","highlighter","z","pref_light_tailwindcss_options_schema","execa","fs","init","duck_ui","Command","packageJson","getPackageJson","config","init_command","init"]}