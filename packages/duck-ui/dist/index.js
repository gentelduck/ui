#!/usr/bin/env node
import{Command as ce}from"commander";var y={name:"duck-ui",description:"This is the main file of the duck-ui CLI application written with TypeScript",version:"1.0.0"};import{Command as ie}from"commander";var P={name:"init",description:"init the project",options:{option_1:{flags:"-y, --yes",description:"skip confirmation prompt.",defaultValue:!1},option_2:{flags:"-d, --defaults,",description:"use default configuration.",defaultValue:!1},option_3:{flags:"-c, --cwd <cwd>",description:"the working directory. defaults to the current directory.",defaultValue:process.cwd()},option_4:{flags:"-s, --silent",description:"silent mode",defaultValue:!1},option_5:{flags:"-f, --force",description:"will force and overwrite old configurations.",defaultValue:!1},option_6:{flags:"-sd, --src-dir <src-dir>",description:"the source directory. defaults to the current directory.",defaultValue:process.cwd()}}};import re from"path";import{z as p}from"zod";var E=p.object({yes:p.boolean().default(!1),defaults:p.boolean().default(!1),cwd:p.string().default(process.cwd()),slint:p.boolean().default(!1),force:p.boolean().default(!1),srcDir:p.string().default(process.cwd())});var l=["**/node_modules","**/.git","**/dist","**/.next","**/build","**/coverage","**/public"];import Re from"fs-extra";import Nt from"fast-glob";import c from"kleur";import ht from"log-symbols";var{error:wt,warning:jt,info:bt,success:Tt}=ht,i={error:({with_icon:t=!0,args:e})=>(console.log(c.red([t?wt:"","ERROR:"].join(" ")),c.red(e.join(" "))),i),warn:({with_icon:t=!0,args:e})=>(console.log(c.yellow([t?jt:"","WARN:"].join(" ")),c.yellow(e.join(" "))),i),info:({with_icon:t=!0,args:e})=>(console.log(c.green([t?bt:"","INFO:"].join(" ")),c.green(e.join(" "))),i),success:({args:t,with_icon:e})=>(console.log(c.green([e?Tt:"","SUCCESS:"].join(" ")),c.green(t.join(" "))),i),break:()=>(console.log(""),i)};import{cyan as kt,green as St,red as Ct,yellow as Rt,bgRed as It,bgYellow as Pt,bgGreen as Et,bgCyan as vt}from"kleur/colors";var s={error:Ct,bg_error:It,warn:Rt,bg_warn:Pt,success:St,bg_success:Et,info:kt,bg_info:vt};async function v(t){return!!Nt.globSync("tailwind.config.*",{cwd:t,deep:3,ignore:l}).length}import{createMatchPath as Ot}from"tsconfig-paths";async function u(t,e){return Ot(e.absoluteBaseUrl,e.paths)(t,void 0,()=>!0,[".ts",".tsx"])}import N from"fast-glob";import O from"fs-extra";import $ from"path";import{loadConfig as $t}from"tsconfig-paths";async function L(t){let e=N.sync(["**/*.css","**/*.scss","**/*.sass"],{cwd:t,deep:3,ignore:l});if(!e.length)return null;for(let o of e){let r=await O.readFile($.resolve(t,o),"utf8");if(r.includes("@tailwind base")||r.includes("@tailwind components")||r.includes("@tailwind utilities"))return o}return null}async function J(t){let e=$t(t);if(e.resultType==="failed"||!e.paths)return null;for(let[o,r]of Object.entries(e.paths))if(r.includes("./src/*")||r.includes("./*"))return o.at(0);return null}function U(){if(!N.sync(["package.json"],{cwd:process.cwd(),deep:1,ignore:l}).length)return i.error({args:["package.json not found"]}),process.exit(1);let e=$.join(process.cwd(),"package.json");return JSON.parse(O.readFileSync(e,"utf8"))}import Gt from"chalk";import zt from"fs-extra";import{loadConfig as Yt}from"tsconfig-paths";import{cosmiconfig as Lt}from"cosmiconfig";var D=Lt("duck-ui",{searchPlaces:["duck-ui.config.js","duck-ui.config.ts"]}),V=t=>`export default ${JSON.stringify(t,null,2)};
`;import{z as n}from"zod";var h=n.object({$schema:n.string().optional(),style:n.string(),rsc:n.coerce.boolean().default(!1),tsx:n.coerce.boolean().default(!0),tailwind:n.object({config:n.string(),css:n.string(),baseColor:n.string(),cssVariables:n.boolean().default(!0),prefix:n.string().default("").optional()}),aliases:n.object({components:n.string(),hooks:n.string().optional(),pages:n.string().optional(),utils:n.string(),lib:n.string().optional(),ui:n.string().optional()})}).strict(),A=h.extend({resolvedPaths:n.object({tailwindConfig:n.string(),tailwindCss:n.string(),utils:n.string(),components:n.string(),ui:n.string()})});import j from"path";import Jt from"fast-glob";var M={type:"NEXT_JS",detect:async t=>!!(await Jt.glob("**/*",{cwd:t,deep:3,ignore:l})).find(r=>r.includes("next.config"))};var w=(a=>(a.NEXT_JS="Next.js",a.VITE="Vite",a.CREATE_REACT_APP="Create React App",a.UNKNOWN="Unknown",a))(w||{}),W=[M];async function x(t){for(let e of W)if(await e.detect(t))return e.type;return"UNKNOWN"}import{z as Ut}from"zod";function F(t){return Object.values(t)}var Dt=F(w),fo=Ut.enum([...Dt]);import Ft from"prompts";import B from"fs-extra";import q from"path";import Vt from"ora";function m(t,e){return Vt({color:"yellow",text:t,isSilent:e?.silent})}import{detect as At}from"@antfu/ni";async function d(t){let e=await At({programmatic:!0,cwd:t});return e==="yarn@berry"?"yarn":e==="pnpm@6"?"pnpm":e||"npm"}async function G(t,e){let o=e??await d(t);return o==="pnpm"?"pnpm dlx":o==="bun"?"bunx":"npx"}import{execa as Mt}from"execa";var z=[{type:"confirm",name:"typescript",message:`Would you like to install ${s.info("TypeScript")} (recommended)`,initial:!1,active:"yes",inactive:"no"}],Y=["typescript"],K=`{
  "compilerOptions": {
    "target": "es6",                   // Target ECMAScript version
    "module": "commonjs",               // Specify module code generation
    "baseUrl": ".",                     // Base directory for non-relative module names
    "paths": {                          // Path aliases for cleaner imports
      "@components/*": ["src/components/*"],
      "@utils/*": ["src/utils/*"]
    },
    "jsx": "react-jsx",                 // Set JSX handling for React projects
    "allowSyntheticDefaultImports": true, // Allow default imports from modules with no default export
    "esModuleInterop": true,            // Import compatibility for CommonJS and ES modules
    "strict": true                      // Enable all strict type-checking options
  },
  "include": ["src"],                   // Include files in the src folder
  "exclude": ["node_modules", "dist"]   // Exclude folders from the config
}
`,X=`{
  "compilerOptions": {
    "target": "es6", // Target ECMAScript version
    "module": "commonjs", // Module system used in Node.js
    "lib": ["dom", "es6", "dom.iterable", "scripthost"], // Standard library
    "jsx": "react-jsx", // JSX support for React
    "outDir": "./dist", // Output directory for compiled files
    "rootDir": "./src", // Root directory of source files
    "strict": true, // Enable strict type checking
    "moduleResolution": "node", // Module resolution strategy
    "esModuleInterop": true, // Allow default imports from CommonJS
    "skipLibCheck": true, // Skip type checking of declaration files
    "forceConsistentCasingInFileNames": true, // Enforce consistent file naming
    "resolveJsonModule": true, // Support importing JSON files
    "allowSyntheticDefaultImports": true, // Synthetic default imports for compatibility
    "baseUrl": ".", // Base directory for module resolution
    "paths": {
      // Define path aliases
      "@components/*": ["src/components/*"],
      "@utils/*": ["src/utils/*"]
    }
  },
  "include": ["src"], // Include all source files in the src directory
  "exclude": ["node_modules", "dist", "tests"] // Exclude directories from compilation
}
`;async function H(t,e){let o=m(s.info("Installing TypeScript...")).start(),r=await d(t),{failed:a}=await Mt(r,[r!=="npm"?"install":"add",...Y,"-D"],{cwd:t,shell:!0});if(a)return o.fail();await Wt(t,e),i.break(),o.succeed()}async function Wt(t,e){let o=m(s.info("Adding TypeScript config...")).start();await B.writeFile(q.join(t,`${e?"ts":"js"}config.json`),e?X:K),i.break(),o.succeed()}async function g(t){return B.pathExists(q.resolve(t,"tsconfig.json"))}import{z as Q}from"zod";var Z=Q.object({typescript:Q.boolean({message:"You have to pick one option",description:"Would you like to use TypeScript? (yes/no) -default: no"}).default(!1)});async function tt(t){if(await g(t))return;i.warn({args:[`${s.info("TypeScript")} is not installed. You need to install ${s.info("TypeScript")}...`]});let o=await Ft(z),{typescript:r}=Z.parse(o);r&&await H(t,r)}async function Kt(t){try{let e=await D.search(t);return e?h.parse(e.config):null}catch{i.error({args:[`Invalid configuration found in ${t}/components.json.`]}),process.exit(1)}}async function Xt(t){let e=await Kt(t);return e?await et(t,e):null}async function et(t,e){let o=Yt(t);return o.resultType==="failed"?i.error({args:[`Failed to leaod ${e.tsx?"tsconfig":"jsconfig"}.json. ${o.message??""}`.trim()]}):A.parse({...e,resolvedPaths:{tailwindConfig:j.resolve(t,e.tailwind.config),tailwindCss:j.resolve(t,e.tailwind.css),utils:await u(e.aliases.utils,o),components:await u(e.aliases.components,o),ui:e.aliases.ui?await u(e.aliases.ui,o):await u(e.aliases.components,o)}})}async function ot(t){let e=await Xt(t);if(e)return e;let o=await x(t),r=await L(t),a=await J(t);if(!o||!r||!a)return i.error({args:[`Failed to get project config!, ${Gt.bgRed.white("TailwindCss")} is required`]}),null;let f=await g(t),_={$schema:"https://duckui.vercel.app/schema.json",rsc:["NEXT_JS"].includes(o),tsx:f,style:"default",tailwind:{config:f?"tailwind.config.ts":"tailwind.config.js",baseColor:"zinc",css:r,cssVariables:!0,prefix:""},aliases:{utils:`${a}/lib/utils`,components:`${a}/components`}},xt=_?.tsx?`export const config = ${JSON.stringify(_,null,2)};`:V(_);try{await zt.writeFile(j.join(t,`duck-ui.config.${f?"ts":"js"}`),xt,"utf8")}catch{i.error({args:[`Failed to create duck-ui.config.${f?"ts":"js"}`]}),process.exit(1)}return et(t,_)}import{z as rt}from"zod";var Bt=rt.string().min(1,"Path must be a non-empty string"),qt=rt.string().refine(t=>/\/chat\/b\//.test(t),{message:"The URL must contain /chat/b/ in the pathname"});import oe from"prompts";var it=[{type:"confirm",name:"tailwind",message:`Would you like to install ${s.info("TailwindCSS")}`,initial:!1,active:"yes",inactive:"no"}],nt=["tailwindcss","postcss","autoprefixer"],st=["tailwindcss","init","-p"],b=`/** @type {import('tailwindcss').Config} */
    export default {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  };`;import{z as at}from"zod";var ct=at.object({tailwind:at.boolean({message:"You have to pick one option",description:"Would you like to use TailwindCSS? (yes/no) -default: no"}).default(!1)});import{execa as pt}from"execa";import lt from"path";import ft from"fs-extra";async function gt(t){let e=m(s.info("Installing TailwindCSS...")).start(),o=await d(t),{failed:r}=await pt(o,[o!=="npm"?"install":"add",...nt],{cwd:t,shell:!0});if(r)return e.fail();let a=await G(t,o),{failed:f}=await pt(a,[...st],{cwd:t,shell:!0});if(f)return e.fail();await Qt(t),e.succeed()}async function Qt(t){let e=await g(t),o=await x(t),r=m(s.info("Adding TailwindCSS config...")).start();await ft.writeFile(lt.join(t,`tailwind.config.${e?"ts":"js"}`),Zt(o)),await ft.writeFile(lt.join(t,te(o)),ee(o)),i.break(),r.succeed()}var Zt=t=>t==="UNKNOWN"?b:b,te=t=>"./style.css";function ee(t){return mt}var mt=`@tailwind base;
@tailwind components;
@tailwind utilities;
`;async function ut(t){if(await v(t))return;i.warn({args:[`${s.info("TailwindCss")} is not installed. You need to install ${s.info("TailwindCss")}...`]});let o=await oe(it),{tailwind:r}=ct.parse(o);r&&await gt(t)}async function dt(t){let e=E.parse(t),o=re.resolve(e.cwd);i.info({args:["Checking for preflight..."]}),await ut(o),await tt(o);let r=await ot(o)}var{name:ne,description:se,options:ae}=P,{option_1:T,option_2:k,option_3:S,option_4:C,option_5:R,option_6:I}=ae;function _t(){let t=new ie(ne);return t.description(se).option(T.flags,T.description,T.defaultValue).option(k.flags,k.description,k.defaultValue).option(S.flags,S.description,S.defaultValue).option(C.flags,C.description,C.defaultValue).option(R.flags,R.description,R.defaultValue).option(I.flags,I.description,I.defaultValue).action(dt),t}function yt(){let t=new ce,e=U();t.name(e?.name||y.name),t.description(e?.description||y.description),t.version(e?.version||y.version),t.addCommand(_t()),t.parse()}process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));yt();
//# sourceMappingURL=index.js.map