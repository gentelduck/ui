#!/usr/bin/env node
import{Command as _e}from"commander";var h={name:"duck-ui",description:"This is the main file of the duck-ui CLI application written with TypeScript",version:"1.0.0"},y="https://duckui.vercel.app/registry";import{Command as me}from"commander";var $={name:"init",description:"init the project",options:{option_1:{flags:"-y, --yes",description:"skip confirmation prompt.",defaultValue:!1},option_2:{flags:"-d, --defaults,",description:"use default configuration.",defaultValue:!1},option_3:{flags:"-c, --cwd <cwd>",description:"the working directory. defaults to the current directory.",defaultValue:process.cwd()},option_4:{flags:"-s, --silent",description:"silent mode",defaultValue:!1},option_5:{flags:"-f, --force",description:"will force and overwrite old configurations.",defaultValue:!1},option_6:{flags:"-sd, --src-dir <src-dir>",description:"the source directory. defaults to the current directory.",defaultValue:process.cwd()}}};import ae from"axios";import ce from"path";import{z as l}from"zod";var N=l.object({yes:l.boolean().default(!1),defaults:l.boolean().default(!1),cwd:l.string().default(process.cwd()),slint:l.boolean().default(!1),force:l.boolean().default(!1),srcDir:l.string().default(process.cwd())});var c=["**/node_modules","**/.git","**/dist","**/.next","**/build","**/coverage","**/public"];import Oe from"fs-extra";import Lt from"fast-glob";import p from"kleur";import bt from"log-symbols";var{error:kt,warning:Tt,info:St,success:Rt}=bt,r={error:({with_icon:t=!0,args:e})=>(console.log(p.red([t?kt:"","ERROR:"].join(" ")),p.red(e.join(" "))),r),warn:({with_icon:t=!0,args:e})=>(console.log(p.yellow([t?Tt:"","WARN:"].join(" ")),p.yellow(e.join(" "))),r),info:({with_icon:t=!0,args:e})=>(console.log(p.green([t?St:"","INFO:"].join(" ")),p.green(e.join(" "))),r),success:({args:t,with_icon:e})=>(console.log(p.green([e?Rt:"","SUCCESS:"].join(" ")),p.green(t.join(" "))),r),break:()=>(console.log(""),r)};import{cyan as Ct,green as It,red as Et,yellow as Pt,bgRed as vt,bgYellow as $t,bgGreen as Nt,bgCyan as Ot}from"kleur/colors";var a={error:Et,bg_error:vt,warn:Pt,bg_warn:$t,success:It,bg_success:Nt,info:Ct,bg_info:Ot};async function O(t){return!!Lt.globSync("tailwind.config.*",{cwd:t,deep:3,ignore:c}).length}import{createMatchPath as Ut}from"tsconfig-paths";async function g(t,e){return Ut(e.absoluteBaseUrl,e.paths)(t,void 0,()=>!0,[".ts",".tsx"])}import L from"fast-glob";import U from"fs-extra";import D from"path";import{loadConfig as Dt}from"tsconfig-paths";async function J(t){let e=L.sync(["**/*.css","**/*.scss","**/*.sass"],{cwd:t,deep:3,ignore:c});if(!e.length)return null;for(let o of e){let i=await U.readFile(D.resolve(t,o),"utf8");if(i.includes("@tailwind base")||i.includes("@tailwind components")||i.includes("@tailwind utilities"))return o}return null}async function A(t){let e=Dt(t);if(e.resultType==="failed"||!e.paths)return null;for(let[o,i]of Object.entries(e.paths))if(i.includes("./src/*")||i.includes("./*"))return o.at(0);return null}function V(){if(!L.sync(["package.json"],{cwd:process.cwd(),deep:1,ignore:c}).length)return r.error({args:["package.json not found"]}),process.exit(1);let e=D.join(process.cwd(),"package.json");return JSON.parse(U.readFileSync(e,"utf8"))}import Kt from"chalk";import Xt from"fs-extra";import{loadConfig as qt}from"tsconfig-paths";import{cosmiconfig as Jt}from"cosmiconfig";var M=Jt("duck-ui",{searchPlaces:["duck-ui.config.js","duck-ui.config.ts"]}),W=t=>`export default ${JSON.stringify(t,null,2)};
`;import{z as n}from"zod";var j=n.object({$schema:n.string().optional(),style:n.string(),rsc:n.coerce.boolean().default(!1),tsx:n.coerce.boolean().default(!0),tailwind:n.object({config:n.string(),css:n.string(),baseColor:n.string(),cssVariables:n.boolean().default(!0),prefix:n.string().default("").optional()}),aliases:n.object({components:n.string(),hooks:n.string().optional(),pages:n.string().optional(),utils:n.string(),lib:n.string().optional(),ui:n.string().optional()})}).strict(),F=j.extend({resolvedPaths:n.object({tailwindConfig:n.string(),tailwindCss:n.string(),utils:n.string(),components:n.string(),ui:n.string()})});import k from"path";import At from"fast-glob";var G={type:"NEXT_JS",detect:async t=>!!(await At.glob("**/*",{cwd:t,deep:3,ignore:c})).find(i=>i.includes("next.config"))};var b=(s=>(s.NEXT_JS="Next.js",s.VITE="Vite",s.CREATE_REACT_APP="Create React App",s.UNKNOWN="Unknown",s))(b||{}),z=[G];async function x(t){for(let e of z)if(await e.detect(t))return e.type;return"UNKNOWN"}import{z as Vt}from"zod";function Y(t){return Object.values(t)}var Mt=Y(b),xo=Vt.enum([...Mt]);import Bt from"prompts";import Gt from"fast-glob";import Q from"fs-extra";import Z from"path";import Wt from"ora";function m(t,e){return Wt({color:"yellow",text:t,isSilent:e?.silent})}import{detect as Ft}from"@antfu/ni";async function d(t){let e=await Ft({programmatic:!0,cwd:t});return e==="yarn@berry"?"yarn":e==="pnpm@6"?"pnpm":e||"npm"}async function B(t,e){let o=e??await d(t);return o==="pnpm"?"pnpm dlx":o==="bun"?"bunx":"npx"}import{execa as zt}from"execa";var K=[{type:"confirm",name:"typescript",message:`Would you like to install ${a.info("TypeScript")} (recommended)`,initial:!1,active:"yes",inactive:"no"}],X=["typescript"],q=`{
  "compilerOptions": {
    "target": "es6",                   // Target ECMAScript version
    "module": "commonjs",               // Specify module code generation
    "baseUrl": ".",                     // Base directory for non-relative module names
    "paths": {                          // Path aliases for cleaner imports
      "@components/*": ["src/components/*"],
      "@utils/*": ["src/utils/*"]
    },
    "jsx": "react-jsx",                 // Set JSX handling for React projects
    "allowSyntheticDefaultImports": true, // Allow default imports from modules with no default export
    "esModuleInterop": true,            // Import compatibility for CommonJS and ES modules
    "strict": true                      // Enable all strict type-checking options
  },
  "include": ["src"],                   // Include files in the src folder
  "exclude": ["node_modules", "dist"]   // Exclude folders from the config
}
`,H=`{
  "compilerOptions": {
    "target": "es6", // Target ECMAScript version
    "module": "commonjs", // Module system used in Node.js
    "lib": ["dom", "es6", "dom.iterable", "scripthost"], // Standard library
    "jsx": "react-jsx", // JSX support for React
    "outDir": "./dist", // Output directory for compiled files
    "rootDir": "./src", // Root directory of source files
    "strict": true, // Enable strict type checking
    "moduleResolution": "node", // Module resolution strategy
    "esModuleInterop": true, // Allow default imports from CommonJS
    "skipLibCheck": true, // Skip type checking of declaration files
    "forceConsistentCasingInFileNames": true, // Enforce consistent file naming
    "resolveJsonModule": true, // Support importing JSON files
    "allowSyntheticDefaultImports": true, // Synthetic default imports for compatibility
    "baseUrl": ".", // Base directory for module resolution
    "paths": {
      // Define path aliases
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"], // Include all source files in the src directory
  "exclude": ["node_modules", "dist", "tests"] // Exclude directories from compilation
}
`;async function tt(t,e){let o=m(a.info("Installing TypeScript...")).start(),i=await d(t),{failed:s}=await zt(i,[i!=="npm"?"install":"add",...X,"-D"],{cwd:t,shell:!0});if(s)return o.fail();await Yt(t,e),r.break(),o.succeed()}async function Yt(t,e){let o=m(a.info("Adding TypeScript config...")).start();await Q.writeFile(Z.join(t,`${e?"ts":"js"}config.json`),e?H:q),r.break(),o.succeed()}async function u(t){return Q.pathExists(Z.resolve(t,"tsconfig.json"))}async function et(t){return!!Gt.sync(["duck-ui.*"],{cwd:t,deep:3,ignore:c}).length}import{z as ot}from"zod";var rt=ot.object({typescript:ot.boolean({message:"You have to pick one option",description:"Would you like to use TypeScript? (yes/no) -default: no"}).default(!1)});async function it(t){let e=await et(t);if(await u(t)||e)return;r.warn({args:[`${a.info("TypeScript")} is not installed. You need to install ${a.info("TypeScript")}...`]});let i=await Bt(K),{typescript:s}=rt.parse(i);s&&await tt(t,s)}async function Ht(t){try{let e=await M.search(t);return e?j.parse(e.config):null}catch{r.error({args:[`Invalid configuration found in ${t}/components.json.`]}),process.exit(1)}}async function Qt(t){let e=await Ht(t);return e?await nt(t,e):null}async function nt(t,e){let o=qt(t);return o.resultType==="failed"?r.error({args:[`Failed to leaod ${e.tsx?"tsconfig":"jsconfig"}.json. ${o.message??""}`.trim()]}):F.parse({...e,resolvedPaths:{tailwindConfig:k.resolve(t,e.tailwind.config),tailwindCss:k.resolve(t,e.tailwind.css),utils:await g(e.aliases.utils,o),components:await g(e.aliases.components,o),ui:e.aliases.ui?await g(e.aliases.ui,o):await g(e.aliases.components,o)}})}async function st(t){let e=await Qt(t);if(e)return e;let o=await x(t),i=await J(t),s=await A(t);if(!o||!i||!s)return r.error({args:[`Failed to get project config!, ${Kt.bgRed.white("TailwindCss")} is required`]}),null;let f=await u(t),_={$schema:"https://duckui.vercel.app/schema.json",rsc:["NEXT_JS"].includes(o),tsx:f,style:"default",tailwind:{config:f?"tailwind.config.ts":"tailwind.config.js",baseColor:"zinc",css:i,cssVariables:!0,prefix:""},aliases:{utils:`${s}/lib/utils`,components:`${s}/components`}},wt=_?.tsx?`export const config = ${JSON.stringify(_,null,2)};`:W(_);try{await Xt.writeFile(k.join(t,`duck-ui.config.${f?"ts":"js"}`),wt,"utf8")}catch(jt){console.log(jt),r.error({args:[`Failed to create duck-ui.config.${f?"ts":"js"}`]}),process.exit(1)}return nt(t,_)}import{z as at}from"zod";var Zt=at.string().min(1,"Path must be a non-empty string"),te=at.string().refine(t=>/\/chat\/b\//.test(t),{message:"The URL must contain /chat/b/ in the pathname"});import ne from"prompts";var ct=[{type:"confirm",name:"tailwind",message:`Would you like to install ${a.info("TailwindCSS")}`,initial:!1,active:"yes",inactive:"no"}],pt=["tailwindcss","postcss","autoprefixer"],lt=["tailwindcss","init","-p"],T=`/** @type {import('tailwindcss').Config} */
    export default {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  };`;import{z as ft}from"zod";var mt=ft.object({tailwind:ft.boolean({message:"You have to pick one option",description:"Would you like to use TailwindCSS? (yes/no) -default: no"}).default(!1)});import{execa as S}from"execa";import w from"path";import ut from"fs-extra";async function dt(t){let e=m(a.info("Installing TailwindCSS...")).start(),o=await d(t),{failed:i}=await S(o,[o!=="npm"?"install":"add",...pt],{cwd:t,shell:!0});if(i)return e.fail();let s=await B(t,o),{failed:f}=await S(s,[...lt],{cwd:t,shell:!0});if(f)return e.fail();await ee(t),e.succeed()}async function ee(t){let e=await u(t),o=await x(t),i=m(a.info("Adding TailwindCSS config...")).start();e&&await S(`mv ${w.join(t,"tailwind.config.js")} ${w.join(t,"tailwind.config.ts")}`,{shell:!0,cwd:t}),await ut.writeFile(w.join(t,`tailwind.config.${e?"ts":"js"}`),oe(o)),await ut.writeFile(w.join(t,re(o)),ie(o)),r.break(),i.succeed()}var oe=t=>t==="UNKNOWN"?T:T,re=t=>"./style.css";function ie(t){return gt}var gt=`@tailwind base;
@tailwind components;
@tailwind utilities;
`;async function _t(t){if(await O(t))return;r.warn({args:[`${a.info("TailwindCss")} is not installed. You need to install ${a.info("TailwindCss")}...`]});let o=await ne(ct),{tailwind:i}=mt.parse(o);i&&await dt(t)}import ri from"axios";import{HttpsProxyAgent as se}from"https-proxy-agent";var ai=process.env.https_proxy?new se(process.env.https_proxy):void 0;async function ht(t){let e=N.parse(t),o=ce.resolve(e.cwd);r.info({args:["Checking for preflight..."]}),await it(o),await _t(o);let i=await st(o);r.success({with_icon:!0,args:[,"Done.!, preflight passed"]});let s=await fe("");console.log(s)}function pe(t){try{return new URL(t),!0}catch{return!1}}function le(t){if(pe(t)){let e=new URL(t);return e.pathname.match(/\/chat\/b\//)&&!e.pathname.endsWith("/json")&&(e.pathname=`${e.pathname}/json`),e.toString()}return`${y}/${t}`}async function fe(t){try{let e=le(t);return(await ae.get(e)).data}catch(e){console.log(e)}}var{name:ue,description:ge,options:de}=$,{option_1:R,option_2:C,option_3:I,option_4:E,option_5:P,option_6:v}=de;function yt(){let t=new me(ue);return t.description(ge).option(R.flags,R.description,R.defaultValue).option(C.flags,C.description,C.defaultValue).option(I.flags,I.description,I.defaultValue).option(E.flags,E.description,E.defaultValue).option(P.flags,P.description,P.defaultValue).option(v.flags,v.description,v.defaultValue).action(ht),t}function xt(){let t=new _e,e=V();t.name(e?.name||h.name),t.description(e?.description||h.description),t.version(e?.version||h.version),t.addCommand(yt()),t.parse()}process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));xt();
//# sourceMappingURL=index.js.map